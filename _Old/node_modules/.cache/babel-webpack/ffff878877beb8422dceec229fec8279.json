{"ast":null,"code":"import _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, SecurityContext, Directive, ElementRef, Input, Output, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { BehaviorSubject, EMPTY, throwError, from, zip, animationFrameScheduler } from 'rxjs';\nimport { filter, map, take, switchMap, tap, catchError } from 'rxjs/operators';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nvar HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS'); // @dynamic\n\nvar HighlightLoader = /*#__PURE__*/function () {\n  function HighlightLoader(doc, platformId, _options) {\n    var _this = this;\n\n    _classCallCheck(this, HighlightLoader);\n\n    this._options = _options; // Stream that emits when hljs library is loaded and ready to use\n\n    this._ready = new BehaviorSubject(null);\n    this.ready = this._ready.asObservable().pipe(filter(function (hljs) {\n      return !!hljs;\n    }), map(function (hljs) {\n      return hljs;\n    }), take(1)); // Check if hljs is already available\n\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n      this._ready.next(doc.defaultView.hljs);\n    } else {\n      // Load hljs library\n      this._loadLibrary().pipe(switchMap(function (hljs) {\n        if (_this._options && _this._options.lineNumbersLoader) {\n          // Make hljs available on window object (required for the line numbers library)\n          doc.defaultView.hljs = hljs; // Load line numbers library\n\n          return _this.loadLineNumbers().pipe(tap(function () {\n            return _this._ready.next(hljs);\n          }));\n        } else {\n          _this._ready.next(hljs);\n\n          return EMPTY;\n        }\n      }), catchError(function (e) {\n        console.error('[HLJS] ', e);\n        return EMPTY;\n      })).subscribe();\n    }\n  }\n  /**\n   * Lazy-Load highlight.js library\n   */\n\n\n  _createClass(HighlightLoader, [{\n    key: \"_loadLibrary\",\n    value: function _loadLibrary() {\n      var _this2 = this;\n\n      if (this._options) {\n        if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {\n          return throwError('The full library and the core library were imported, only one of them should be imported!');\n        }\n\n        if (this._options.fullLibraryLoader && this._options.languages) {\n          return throwError('The highlighting languages were imported they are not needed!');\n        }\n\n        if (this._options.coreLibraryLoader && !this._options.languages) {\n          return throwError('The highlighting languages were not imported!');\n        }\n\n        if (!this._options.coreLibraryLoader && this._options.languages) {\n          return throwError('The core library was not imported!');\n        }\n\n        if (this._options.fullLibraryLoader) {\n          return this.loadFullLibrary();\n        }\n\n        if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {\n          return this.loadCoreLibrary().pipe(switchMap(function (hljs) {\n            return _this2._loadLanguages(hljs);\n          }));\n        }\n      }\n\n      return throwError('Highlight.js library was not imported!');\n    }\n    /**\n     * Lazy-load highlight.js languages\n     */\n\n  }, {\n    key: \"_loadLanguages\",\n    value: function _loadLanguages(hljs) {\n      var languages = Object.entries(this._options.languages).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            langName = _ref2[0],\n            langLoader = _ref2[1];\n\n        return importModule(langLoader()).pipe(tap(function (langFunc) {\n          return hljs.registerLanguage(langName, langFunc);\n        }));\n      });\n      return zip.apply(void 0, _toConsumableArray(languages)).pipe(map(function () {\n        return hljs;\n      }));\n    }\n    /**\n     * Import highlight.js core library\n     */\n\n  }, {\n    key: \"loadCoreLibrary\",\n    value: function loadCoreLibrary() {\n      return importModule(this._options.coreLibraryLoader());\n    }\n    /**\n     * Import highlight.js library with all languages\n     */\n\n  }, {\n    key: \"loadFullLibrary\",\n    value: function loadFullLibrary() {\n      return importModule(this._options.fullLibraryLoader());\n    }\n    /**\n     * Import line numbers library\n     */\n\n  }, {\n    key: \"loadLineNumbers\",\n    value: function loadLineNumbers() {\n      return importModule(this._options.lineNumbersLoader());\n    }\n  }]);\n\n  return HighlightLoader;\n}();\n\nHighlightLoader.ɵfac = function HighlightLoader_Factory(t) {\n  return new (t || HighlightLoader)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n};\n\nHighlightLoader.ɵprov = ɵɵdefineInjectable({\n  factory: function HighlightLoader_Factory() {\n    return new HighlightLoader(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID), ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n  },\n  token: HighlightLoader,\n  providedIn: \"root\"\n});\n\nHighlightLoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [HIGHLIGHT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightLoader, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HIGHLIGHT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Map loader response to module object\n */\n\n\nvar importModule = function importModule(moduleLoader) {\n  return from(moduleLoader).pipe(filter(function (module) {\n    return !!module && !!module.default;\n  }), map(function (module) {\n    return module.default;\n  }));\n};\n\nvar ɵ0 = importModule;\n\nvar HighlightJS = /*#__PURE__*/function () {\n  function HighlightJS(_loader, options) {\n    var _this3 = this;\n\n    _classCallCheck(this, HighlightJS);\n\n    this._loader = _loader;\n    this._hljs = null; // Load highlight.js library on init\n\n    _loader.ready.pipe().subscribe(function (hljs) {\n      _this3._hljs = hljs;\n\n      if (options && options.config) {\n        // Set global config if present\n        hljs.configure(options.config);\n\n        if (hljs.listLanguages().length < 1) {\n          console.error('[HighlightJS]: No languages were registered!');\n        }\n      }\n    });\n  } // A reference for hljs library\n\n\n  _createClass(HighlightJS, [{\n    key: \"hljs\",\n    get: function get() {\n      return this._hljs;\n    }\n    /**\n     * Core highlighting function.\n     * @param name Accepts a language name, or an alias\n     * @param value A string with the code to highlight.\n     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n     * even in case of detecting illegal syntax for the language instead of throwing an exception.\n     * @param continuation An optional mode stack representing unfinished parsing.\n     * When present, the function will restart parsing from this state instead of initializing a new one\n     */\n\n  }, {\n    key: \"highlight\",\n    value: function highlight(name, value, ignore_illegals, continuation) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.highlight(name, value, ignore_illegals, continuation);\n      }));\n    }\n    /**\n     * Highlighting with language detection.\n     * @param value Accepts a string with the code to highlight\n     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n     * The subset can also be set with configure, but the local parameter overrides the option if set.\n     */\n\n  }, {\n    key: \"highlightAuto\",\n    value: function highlightAuto(value, languageSubset) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.highlightAuto(value, languageSubset);\n      }));\n    }\n    /**\n     * Post-processing of the highlighted markup.\n     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n     * Options are set globally with configure.\n     * @param value Accepts a string with the highlighted markup\n     */\n\n  }, {\n    key: \"fixMarkup\",\n    value: function fixMarkup(value) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.fixMarkup(value);\n      }));\n    }\n    /**\n     * Applies highlighting to a DOM node containing code.\n     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n     * See the class reference for all available language names and aliases.\n     * @param block The element to apply highlight on.\n     */\n\n  }, {\n    key: \"highlightBlock\",\n    value: function highlightBlock(block) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.highlightBlock(block);\n      }));\n    }\n    /**\n     * Configures global options:\n     * @param config HighlightJs configuration argument\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure(config) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.configure(config);\n      }));\n    }\n    /**\n     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n     */\n\n  }, {\n    key: \"initHighlighting\",\n    value: function initHighlighting() {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.initHighlighting();\n      }));\n    }\n    /**\n     * Adds new language to the library under the specified name. Used mostly internally.\n     * @param name A string with the name of the language being registered\n     * @param language A function that returns an object which represents the language definition.\n     * The function is passed the hljs object to be able to use common regular expressions defined within it.\n     */\n\n  }, {\n    key: \"registerLanguage\",\n    value: function registerLanguage(name, language) {\n      return this._loader.ready.pipe(tap(function (hljs) {\n        return hljs.registerLanguage(name, language);\n      }));\n    }\n    /**\n     * @return The languages names list.\n     */\n\n  }, {\n    key: \"listLanguages\",\n    value: function listLanguages() {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.listLanguages();\n      }));\n    }\n    /**\n     * Looks up a language by name or alias.\n     * @param name Language name\n     * @return The language object if found, undefined otherwise.\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage(name) {\n      return this._loader.ready.pipe(map(function (hljs) {\n        return hljs.getLanguage(name);\n      }));\n    }\n    /**\n     * Display line numbers\n     * @param el Code element\n     */\n\n  }, {\n    key: \"lineNumbersBlock\",\n    value: function lineNumbersBlock(el) {\n      return this._loader.ready.pipe(filter(function (hljs) {\n        return !!hljs.lineNumbersBlock;\n      }), tap(function (hljs) {\n        return hljs.lineNumbersBlock(el);\n      }));\n    }\n  }]);\n\n  return HighlightJS;\n}();\n\nHighlightJS.ɵfac = function HighlightJS_Factory(t) {\n  return new (t || HighlightJS)(ɵngcc0.ɵɵinject(HighlightLoader), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n};\n\nHighlightJS.ɵprov = ɵɵdefineInjectable({\n  factory: function HighlightJS_Factory() {\n    return new HighlightJS(ɵɵinject(HighlightLoader), ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n  },\n  token: HighlightJS,\n  providedIn: \"root\"\n});\n\nHighlightJS.ctorParameters = function () {\n  return [{\n    type: HighlightLoader\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [HIGHLIGHT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightJS, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: HighlightLoader\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HIGHLIGHT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n\nvar Highlight = /*#__PURE__*/function () {\n  function Highlight(el, _hljs, _sanitizer, _options) {\n    _classCallCheck(this, Highlight);\n\n    this._hljs = _hljs;\n    this._sanitizer = _sanitizer;\n    this._options = _options; // Stream that emits when code string is highlighted\n\n    this.highlighted = new EventEmitter();\n    this._nativeElement = el.nativeElement;\n  }\n\n  _createClass(Highlight, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (this.code && changes.code && typeof changes.code.currentValue !== 'undefined' && changes.code.currentValue !== changes.code.previousValue) {\n        this.highlightElement(this.code, this.languages);\n      }\n    }\n    /**\n     * Highlighting with language detection and fix markup.\n     * @param code Accepts a string with the code to highlight\n     * @param languages An optional array of language names and aliases restricting detection to only those languages.\n     * The subset can also be set with configure, but the local parameter overrides the option if set.\n     */\n\n  }, {\n    key: \"highlightElement\",\n    value: function highlightElement(code, languages) {\n      var _this4 = this;\n\n      // Set code text before highlighting\n      this.setTextContent(code);\n\n      this._hljs.highlightAuto(code, languages).subscribe(function (res) {\n        // Set highlighted code\n        _this4.setInnerHTML(res.value); // Check if user want to show line numbers\n\n\n        if (_this4.lineNumbers && _this4._options && _this4._options.lineNumbersLoader) {\n          _this4.addLineNumbers();\n        } // Forward highlight response to the highlighted output\n\n\n        _this4.highlighted.emit(res);\n      });\n    }\n  }, {\n    key: \"addLineNumbers\",\n    value: function addLineNumbers() {\n      var _this5 = this;\n\n      // Clean up line numbers observer\n      this.destroyLineNumbersObserver();\n      animationFrameScheduler.schedule(function () {\n        // Add line numbers\n        _this5._hljs.lineNumbersBlock(_this5._nativeElement).subscribe(); // If lines count is 1, the line numbers library will not add numbers\n        // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n\n\n        _this5._lineNumbersObs = new MutationObserver(function () {\n          if (_this5._nativeElement.firstElementChild && _this5._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n            _this5._nativeElement.classList.add('hljs-line-numbers');\n          }\n\n          _this5.destroyLineNumbersObserver();\n        });\n\n        _this5._lineNumbersObs.observe(_this5._nativeElement, {\n          childList: true\n        });\n      });\n    }\n  }, {\n    key: \"destroyLineNumbersObserver\",\n    value: function destroyLineNumbersObserver() {\n      if (this._lineNumbersObs) {\n        this._lineNumbersObs.disconnect();\n\n        this._lineNumbersObs = null;\n      }\n    }\n  }, {\n    key: \"setTextContent\",\n    value: function setTextContent(content) {\n      var _this6 = this;\n\n      animationFrameScheduler.schedule(function () {\n        return _this6._nativeElement.textContent = content;\n      });\n    }\n  }, {\n    key: \"setInnerHTML\",\n    value: function setInnerHTML(content) {\n      var _this7 = this;\n\n      animationFrameScheduler.schedule(function () {\n        return _this7._nativeElement.innerHTML = _this7._sanitizer.sanitize(SecurityContext.HTML, content) || '';\n      });\n    }\n  }]);\n\n  return Highlight;\n}();\n\nHighlight.ɵfac = function Highlight_Factory(t) {\n  return new (t || Highlight)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(HighlightJS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(HIGHLIGHT_OPTIONS, 8));\n};\n\nHighlight.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Highlight,\n  selectors: [[\"\", \"highlight\", \"\"]],\n  hostVars: 2,\n  hostBindings: function Highlight_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"hljs\", true);\n    }\n  },\n  inputs: {\n    code: [\"highlight\", \"code\"],\n    languages: \"languages\",\n    lineNumbers: \"lineNumbers\"\n  },\n  outputs: {\n    highlighted: \"highlighted\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nHighlight.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: HighlightJS\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [HIGHLIGHT_OPTIONS]\n    }]\n  }];\n};\n\nHighlight.propDecorators = {\n  code: [{\n    type: Input,\n    args: ['highlight']\n  }],\n  languages: [{\n    type: Input\n  }],\n  lineNumbers: [{\n    type: Input\n  }],\n  highlighted: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Highlight, [{\n    type: Directive,\n    args: [{\n      host: {\n        '[class.hljs]': 'true'\n      },\n      selector: '[highlight]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: HighlightJS\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HIGHLIGHT_OPTIONS]\n      }]\n    }];\n  }, {\n    highlighted: [{\n      type: Output\n    }],\n    code: [{\n      type: Input,\n      args: ['highlight']\n    }],\n    languages: [{\n      type: Input\n    }],\n    lineNumbers: [{\n      type: Input\n    }]\n  });\n})();\n\nvar HighlightModule = function HighlightModule() {\n  _classCallCheck(this, HighlightModule);\n};\n\nHighlightModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HighlightModule\n});\nHighlightModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function HighlightModule_Factory(t) {\n    return new (t || HighlightModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, {\n    declarations: [Highlight],\n    exports: [Highlight]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighlightModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [Highlight],\n      exports: [Highlight]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HIGHLIGHT_OPTIONS, Highlight, HighlightJS, HighlightLoader, HighlightModule, ɵ0 };","map":{"version":3,"sources":["../../projects/ngx-highlightjs/src/lib/highlight.model.ts","../../projects/ngx-highlightjs/src/lib/highlight.loader.ts","../../projects/ngx-highlightjs/src/lib/highlight.service.ts","../../projects/ngx-highlightjs/src/lib/highlight.ts","../../projects/ngx-highlightjs/src/lib/highlight.module.ts","../../../projects/ngx-highlightjs/src/ngx-highlightjs.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface HighlightLibrary {\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): HighlightResult;\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): string;\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): void;\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): void;\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): void;\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): void;\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): string[];\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): any;\n\n  /**\n   * Add line numbers to code element\n   * @param el Code element\n   */\n  lineNumbersBlock(el: Element): void;\n}\n\nexport interface HighlightConfig {\n  /** tabReplace: a string used to replace TAB characters in indentation. */\n  tabReplace?: string;\n  /** useBR: a flag to generate <br> tags instead of new-line characters in the output, useful when code is marked up using a non-<pre> container. */\n  useBR?: boolean;\n  /** classPrefix: a string prefix added before class names in the generated markup, used for backwards compatibility with stylesheets. */\n  classPrefix?: string;\n  /** languages: an array of language names and aliases restricting auto detection to only these languages. */\n  languages?: string[];\n}\n\nexport interface HighlightResult {\n  language?: string;\n  second_best?: any;\n  top?: any;\n  value?: string;\n  relevance?: number;\n}\n\nexport interface HighlightOptions {\n  config?: HighlightConfig;\n  languages?: { [name: string]: () => Promise<any> };\n  coreLibraryLoader?: () => Promise<any>;\n  fullLibraryLoader?: () => Promise<any>;\n  lineNumbersLoader?: () => Promise<any>;\n}\n\nexport const HIGHLIGHT_OPTIONS = new InjectionToken<HighlightOptions>('HIGHLIGHT_OPTIONS');\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, from, EMPTY, zip, throwError } from 'rxjs';\nimport { catchError, tap, map, switchMap, filter, take } from 'rxjs/operators';\nimport { HIGHLIGHT_OPTIONS, HighlightLibrary, HighlightOptions } from './highlight.model';\n\n// @dynamic\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightLoader {\n  // Stream that emits when hljs library is loaded and ready to use\n  private readonly _ready = new BehaviorSubject<HighlightLibrary | null>(null);\n  readonly ready: Observable<HighlightLibrary> = this._ready.asObservable().pipe(\n    filter((hljs: HighlightLibrary | null) => !!hljs),\n    map((hljs: HighlightLibrary | null) => hljs as HighlightLibrary),\n    take(1)\n  );\n\n  constructor(@Inject(DOCUMENT) doc: any,\n              @Inject(PLATFORM_ID) platformId: object,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    // Check if hljs is already available\n    if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n      this._ready.next(doc.defaultView.hljs);\n    } else {\n      // Load hljs library\n      this._loadLibrary().pipe(\n        switchMap((hljs: HighlightLibrary) => {\n          if (this._options && this._options.lineNumbersLoader) {\n            // Make hljs available on window object (required for the line numbers library)\n            doc.defaultView.hljs = hljs;\n            // Load line numbers library\n            return this.loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\n          } else {\n            this._ready.next(hljs);\n            return EMPTY;\n          }\n        }),\n        catchError((e: any) => {\n          console.error('[HLJS] ', e);\n          return EMPTY;\n        })\n      ).subscribe();\n    }\n  }\n\n  /**\n   * Lazy-Load highlight.js library\n   */\n  private _loadLibrary(): Observable<any> {\n    if (this._options) {\n      if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {\n        return throwError('The full library and the core library were imported, only one of them should be imported!');\n      }\n      if (this._options.fullLibraryLoader && this._options.languages) {\n        return throwError('The highlighting languages were imported they are not needed!');\n      }\n      if (this._options.coreLibraryLoader && !this._options.languages) {\n        return throwError('The highlighting languages were not imported!');\n      }\n      if (!this._options.coreLibraryLoader && this._options.languages) {\n        return throwError('The core library was not imported!');\n      }\n      if (this._options.fullLibraryLoader) {\n        return this.loadFullLibrary();\n      }\n      if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {\n        return this.loadCoreLibrary().pipe(switchMap((hljs: HighlightLibrary) => this._loadLanguages(hljs)));\n      }\n    }\n    return throwError('Highlight.js library was not imported!');\n  }\n\n  /**\n   * Lazy-load highlight.js languages\n   */\n  private _loadLanguages(hljs: HighlightLibrary): Observable<any> {\n    const languages = Object.entries(this._options.languages!).map(([langName, langLoader]) =>\n      importModule(langLoader()).pipe(\n        tap((langFunc: any) => hljs.registerLanguage(langName, langFunc))\n      )\n    );\n    return zip(...languages).pipe(map(() => hljs));\n  }\n\n\n  /**\n   * Import highlight.js core library\n   */\n  private loadCoreLibrary(): Observable<HighlightLibrary> {\n    return importModule(this._options.coreLibraryLoader!());\n  }\n\n  /**\n   * Import highlight.js library with all languages\n   */\n  private loadFullLibrary(): Observable<HighlightLibrary> {\n    return importModule(this._options.fullLibraryLoader!());\n  }\n\n\n  /**\n   * Import line numbers library\n   */\n  private loadLineNumbers(): Observable<any> {\n    return importModule(this._options.lineNumbersLoader!());\n  }\n}\n\n/**\n * Map loader response to module object\n */\nconst importModule = (moduleLoader: Promise<any>): Observable<any> => {\n  return from(moduleLoader).pipe(\n    filter((module: any) => !!module && !!module.default),\n    map((module: any) => module.default)\n  );\n};\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { HighlightConfig, HighlightResult, HighlightLibrary, HighlightOptions, HIGHLIGHT_OPTIONS } from './highlight.model';\nimport { HighlightLoader } from './highlight.loader';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HighlightJS {\n\n  private _hljs: HighlightLibrary | null = null;\n\n  // A reference for hljs library\n  get hljs(): HighlightLibrary | null {\n    return this._hljs;\n  }\n\n  constructor(private _loader: HighlightLoader, @Optional() @Inject(HIGHLIGHT_OPTIONS) options: HighlightOptions) {\n    // Load highlight.js library on init\n    _loader.ready.pipe().subscribe((hljs: HighlightLibrary) => {\n      this._hljs = hljs;\n      if (options && options.config) {\n        // Set global config if present\n        hljs.configure(options.config);\n        if (hljs.listLanguages().length < 1) {\n          console.error('[HighlightJS]: No languages were registered!');\n        }\n      }\n    });\n  }\n\n  /**\n   * Core highlighting function.\n   * @param name Accepts a language name, or an alias\n   * @param value A string with the code to highlight.\n   * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n   * even in case of detecting illegal syntax for the language instead of throwing an exception.\n   * @param continuation An optional mode stack representing unfinished parsing.\n   * When present, the function will restart parsing from this state instead of initializing a new one\n   */\n  highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlight(name, value, ignore_illegals, continuation))\n    );\n  }\n\n  /**\n   * Highlighting with language detection.\n   * @param value Accepts a string with the code to highlight\n   * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightAuto(value: string, languageSubset: string[]): Observable<HighlightResult> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightAuto(value, languageSubset))\n    );\n  }\n\n  /**\n   * Post-processing of the highlighted markup.\n   * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n   * Options are set globally with configure.\n   * @param value Accepts a string with the highlighted markup\n   */\n  fixMarkup(value: string): Observable<string> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.fixMarkup(value))\n    );\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n   * See the class reference for all available language names and aliases.\n   * @param block The element to apply highlight on.\n   */\n  highlightBlock(block: HTMLElement): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.highlightBlock(block))\n    );\n  }\n\n  /**\n   * Configures global options:\n   * @param config HighlightJs configuration argument\n   */\n  configure(config: HighlightConfig): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.configure(config))\n    );\n  }\n\n  /**\n   * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n   */\n  initHighlighting(): Observable<void> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.initHighlighting())\n    );\n  }\n\n  /**\n   * Adds new language to the library under the specified name. Used mostly internally.\n   * @param name A string with the name of the language being registered\n   * @param language A function that returns an object which represents the language definition.\n   * The function is passed the hljs object to be able to use common regular expressions defined within it.\n   */\n  registerLanguage(name: string, language: () => any): Observable<HighlightLibrary> {\n    return this._loader.ready.pipe(\n      tap((hljs: HighlightLibrary) => hljs.registerLanguage(name, language))\n    );\n  }\n\n  /**\n   * @return The languages names list.\n   */\n  listLanguages(): Observable<string[]> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.listLanguages())\n    );\n  }\n\n  /**\n   * Looks up a language by name or alias.\n   * @param name Language name\n   * @return The language object if found, undefined otherwise.\n   */\n  getLanguage(name: string): Observable<any> {\n    return this._loader.ready.pipe(\n      map((hljs: HighlightLibrary) => hljs.getLanguage(name))\n    );\n  }\n\n  /**\n   * Display line numbers\n   * @param el Code element\n   */\n  lineNumbersBlock(el: HTMLElement): Observable<any> {\n    return this._loader.ready.pipe(\n      filter((hljs: HighlightLibrary) => !!hljs.lineNumbersBlock),\n      tap((hljs: HighlightLibrary) => hljs.lineNumbersBlock(el))\n    );\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  Optional,\n  OnChanges,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { animationFrameScheduler } from 'rxjs';\nimport { HighlightJS } from './highlight.service';\nimport { HIGHLIGHT_OPTIONS, HighlightOptions, HighlightResult } from './highlight.model';\n\n@Directive({\n  host: {\n    '[class.hljs]': 'true'\n  },\n  selector: '[highlight]'\n})\nexport class Highlight implements OnChanges {\n\n  // Highlighted Code\n  private readonly _nativeElement: HTMLElement;\n\n  // Temp observer to observe when line numbers has been added to code element\n  private _lineNumbersObs: any;\n\n  // Highlight code input\n  @Input('highlight') code!: string;\n\n  // An optional array of language names and aliases restricting detection to only those languages.\n  // The subset can also be set with configure, but the local parameter overrides the option if set.\n  @Input() languages!: string[];\n\n  // Show line numbers\n  @Input() lineNumbers!: boolean;\n\n  // Stream that emits when code string is highlighted\n  @Output() highlighted = new EventEmitter<HighlightResult>();\n\n  constructor(el: ElementRef,\n              private _hljs: HighlightJS,\n              private _sanitizer: DomSanitizer,\n              @Optional() @Inject(HIGHLIGHT_OPTIONS) private _options: HighlightOptions) {\n    this._nativeElement = el.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (\n      this.code &&\n      changes.code &&\n      typeof changes.code.currentValue !== 'undefined' &&\n      changes.code.currentValue !== changes.code.previousValue\n    ) {\n      this.highlightElement(this.code, this.languages);\n    }\n  }\n\n  /**\n   * Highlighting with language detection and fix markup.\n   * @param code Accepts a string with the code to highlight\n   * @param languages An optional array of language names and aliases restricting detection to only those languages.\n   * The subset can also be set with configure, but the local parameter overrides the option if set.\n   */\n  highlightElement(code: string, languages: string[]): void {\n    // Set code text before highlighting\n    this.setTextContent(code);\n    this._hljs.highlightAuto(code, languages).subscribe((res: any) => {\n      // Set highlighted code\n      this.setInnerHTML(res.value);\n      // Check if user want to show line numbers\n      if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {\n        this.addLineNumbers();\n      }\n      // Forward highlight response to the highlighted output\n      this.highlighted.emit(res);\n    });\n  }\n\n  private addLineNumbers() {\n    // Clean up line numbers observer\n    this.destroyLineNumbersObserver();\n    animationFrameScheduler.schedule(() => {\n      // Add line numbers\n      this._hljs.lineNumbersBlock(this._nativeElement).subscribe();\n      // If lines count is 1, the line numbers library will not add numbers\n      // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n      this._lineNumbersObs = new MutationObserver(() => {\n        if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n          this._nativeElement.classList.add('hljs-line-numbers');\n        }\n        this.destroyLineNumbersObserver();\n      });\n      this._lineNumbersObs.observe(this._nativeElement, { childList: true });\n    });\n  }\n\n  private destroyLineNumbersObserver() {\n    if (this._lineNumbersObs) {\n      this._lineNumbersObs.disconnect();\n      this._lineNumbersObs = null;\n    }\n  }\n\n  private setTextContent(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.textContent = content\n    );\n  }\n\n  private setInnerHTML(content: string) {\n    animationFrameScheduler.schedule(() =>\n      this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content) || ''\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Highlight } from './highlight';\n\n@NgModule({\n  declarations: [Highlight],\n  exports: [Highlight]\n})\nexport class HighlightModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}