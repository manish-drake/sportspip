{"ast":null,"code":"import _regeneratorRuntime from \"C:/git/sportspip/node_modules/@babel/runtime/regenerator\";\nimport _get from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar config = new InjectionToken('config');\nvar NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nvar INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nvar initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nvar timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nvar withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nvar MaskApplierService = /*#__PURE__*/function () {\n  function MaskApplierService(_config) {\n    var _this = this;\n\n    _classCallCheck(this, MaskApplierService);\n\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = function (str, thousandSeparatorChar, decimalChar, precision) {\n      var x = str.split(decimalChar);\n      var decimals = x.length > 1 ? \"\".concat(decimalChar).concat(x[1]) : '';\n      var res = x[0];\n\n      var separatorLimit = _this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = \"-\".concat(res.slice(1, res.length).slice(0, separatorLimit.length));\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substr(0, precision + 1);\n    };\n\n    this.percentage = function (str) {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = function (maskExpression) {\n      var x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = function (inputValue) {\n      var _a, _b, _c;\n\n      for (var i = ((_a = _this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        var substr = _this.suffix.substr(i, (_b = _this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(_this.suffix.substr(i - 1, (_c = _this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = function (inputValue, precision, decimalMarker) {\n      if (precision < Infinity) {\n        var precisionRegEx = new RegExp(_this._charToRegExpExpression(decimalMarker) + \"\\\\d{\".concat(precision, \"}.*$\"));\n        var precisionMatch = inputValue.match(precisionRegEx);\n\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          var diff = precisionMatch[0].length - 1 - precision;\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  _createClass(MaskApplierService, [{\n    key: \"applyMaskWithPattern\",\n    value: function applyMaskWithPattern(inputValue, maskAndPattern) {\n      var _maskAndPattern = _slicedToArray(maskAndPattern, 2),\n          mask = _maskAndPattern[0],\n          customPattern = _maskAndPattern[1];\n\n      this.customPattern = customPattern;\n      return this.applyMask(inputValue, mask);\n    }\n  }, {\n    key: \"applyMask\",\n    value: function applyMask(inputValue, maskExpression) {\n      var _this2 = this;\n\n      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n      if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n        return '';\n      }\n\n      var cursor = 0;\n      var result = '';\n      var multi = false;\n      var backspaceShift = false;\n      var shift = 1;\n      var stepBack = false;\n\n      if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n        inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n      }\n\n      if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n        inputValue = this.checkAndRemoveSuffix(inputValue);\n      }\n\n      var inputArray = inputValue.toString().split('');\n\n      if (maskExpression === 'IP') {\n        this.ipError = !!(inputArray.filter(function (i) {\n          return i === '.';\n        }).length < 3 && inputArray.length < 7);\n        maskExpression = '099.099.099.099';\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputValue.length; i++) {\n        if (inputValue[i].match('\\\\d')) {\n          arr.push(inputValue[i]);\n        }\n      }\n\n      if (maskExpression === 'CPF_CNPJ') {\n        this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n\n        if (arr.length > 11) {\n          maskExpression = '00.000.000/0000-00';\n        } else {\n          maskExpression = '000.000.000-00';\n        }\n      }\n\n      if (maskExpression.startsWith('percent')) {\n        if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n          inputValue = this._stripToDecimal(inputValue);\n          var precision = this.getPrecision(maskExpression);\n          inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n        }\n\n        if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n          var base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n          inputValue = \"\".concat(base).concat(inputValue.substring(inputValue.indexOf('.'), inputValue.length));\n        }\n\n        if (this.percentage(inputValue)) {\n          result = inputValue;\n        } else {\n          result = inputValue.substring(0, inputValue.length - 1);\n        }\n      } else if (maskExpression.startsWith('separator')) {\n        if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n          inputValue = this._stripToDecimal(inputValue);\n        }\n\n        inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker ? inputValue.slice(1, inputValue.length) : inputValue; // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n        //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n        var thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n        var decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n\n        var invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');\n        var invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n        if (inputValue.match(invalidCharRegexp)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n\n        var _precision = this.getPrecision(maskExpression);\n\n        inputValue = this.checkInputPrecision(inputValue, _precision, this.decimalMarker);\n        var strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n        result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, _precision);\n        var commaShift = result.indexOf(',') - inputValue.indexOf(',');\n        var shiftStep = result.length - inputValue.length;\n\n        if (shiftStep > 0 && result[position] !== ',') {\n          backspaceShift = true;\n          var _shift = 0;\n\n          do {\n            this._shift.add(position + _shift);\n\n            _shift++;\n          } while (_shift < shiftStep);\n        } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n          this._shift.clear();\n\n          backspaceShift = true;\n          shift = shiftStep;\n          position += shiftStep;\n\n          this._shift.add(position);\n        } else {\n          this._shift.clear();\n        }\n      } else {\n        for ( // tslint:disable-next-line\n        var _i = 0, inputSymbol = inputArray[0]; _i < inputArray.length; _i++, inputSymbol = inputArray[_i]) {\n          if (cursor === maskExpression.length) {\n            break;\n          }\n\n          if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n            result += inputSymbol;\n            cursor += 2;\n          } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n            multi = false;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n            result += inputSymbol;\n            multi = true;\n          } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n            result += inputSymbol;\n            cursor += 3;\n          } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n            if (maskExpression[cursor] === 'H') {\n              if (Number(inputSymbol) > 2) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'h') {\n              if (result === '2' && Number(inputSymbol) > 3) {\n                cursor += 1;\n                _i--;\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'm') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 's') {\n              if (Number(inputSymbol) > 5) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            var daysCount = 31;\n\n            if (maskExpression[cursor] === 'd') {\n              if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            if (maskExpression[cursor] === 'M') {\n              var monthsCount = 12; // mask without day\n\n              var withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n              var day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n              var day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n              var day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n              var day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n              if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                cursor += 1;\n\n                this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                _i--;\n\n                if (this.leadZeroDateTime) {\n                  result += '0';\n                }\n\n                continue;\n              }\n            }\n\n            result += inputSymbol;\n            cursor++;\n          } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n            result += maskExpression[cursor];\n            cursor++;\n\n            this._shiftStep(maskExpression, cursor, inputArray.length);\n\n            _i--;\n          } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n            if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n              result += inputArray[cursor];\n            }\n\n            cursor++;\n            _i--;\n          } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n            cursor += 3;\n            result += inputSymbol;\n          } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n            stepBack = true;\n          }\n        }\n      }\n\n      if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n        result += maskExpression[maskExpression.length - 1];\n      }\n\n      var newPosition = position + 1;\n\n      while (this._shift.has(newPosition)) {\n        shift++;\n        newPosition++;\n      }\n\n      var actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n\n      if (stepBack) {\n        actualShift--;\n      }\n\n      cb(actualShift, backspaceShift);\n\n      if (shift < 0) {\n        this._shift.clear();\n      }\n\n      var onlySpecial = false;\n\n      if (backspaced) {\n        onlySpecial = inputArray.every(function (char) {\n          return _this2.maskSpecialCharacters.includes(char);\n        });\n      }\n\n      var res = \"\".concat(this.prefix).concat(onlySpecial ? '' : result).concat(this.suffix);\n\n      if (result.length === 0) {\n        res = \"\".concat(this.prefix).concat(result);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"_findSpecialChar\",\n    value: function _findSpecialChar(inputSymbol) {\n      return this.maskSpecialCharacters.find(function (val) {\n        return val === inputSymbol;\n      });\n    }\n  }, {\n    key: \"_checkSymbolMask\",\n    value: function _checkSymbolMask(inputSymbol, maskSymbol) {\n      this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n      return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n    }\n  }, {\n    key: \"_stripToDecimal\",\n    value: function _stripToDecimal(str) {\n      var _this3 = this;\n\n      return str.split('').filter(function (i, idx) {\n        return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && _this3.allowNegativeNumbers;\n      }).join('');\n    }\n  }, {\n    key: \"_charToRegExpExpression\",\n    value: function _charToRegExpExpression(char) {\n      if (char) {\n        var charsToEscape = '[\\\\^$.|?*+()';\n        return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n      }\n\n      return char;\n    }\n  }, {\n    key: \"_shiftStep\",\n    value: function _shiftStep(maskExpression, cursor, inputLength) {\n      var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n      this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n  }]);\n\n  return MaskApplierService;\n}();\n\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n  return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config));\n};\n\nMaskApplierService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MaskApplierService,\n  factory: MaskApplierService.ɵfac\n});\n\nMaskApplierService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, null);\n})();\n\nvar MaskService = /*#__PURE__*/function (_MaskApplierService) {\n  _inherits(MaskService, _MaskApplierService);\n\n  var _super = _createSuper(MaskService);\n\n  function MaskService(document, _config, _elementRef, _renderer) {\n    var _this4;\n\n    _classCallCheck(this, MaskService);\n\n    _this4 = _super.call(this, _config);\n    _this4.document = document;\n    _this4._config = _config;\n    _this4._elementRef = _elementRef;\n    _this4._renderer = _renderer;\n    _this4.maskExpression = '';\n    _this4.isNumberValue = false;\n    _this4.placeHolderCharacter = '_';\n    _this4.maskIsShown = '';\n    _this4.selStart = null;\n    _this4.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    _this4.writingValue = false;\n\n    _this4.onChange = function (_) {};\n\n    return _this4;\n  } // tslint:disable-next-line:cyclomatic-complexity\n\n\n  _createClass(MaskService, [{\n    key: \"applyMask\",\n    value: function applyMask(inputValue, maskExpression) {\n      var _this5 = this;\n\n      var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n      if (!maskExpression) {\n        return inputValue;\n      }\n\n      this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n      if (this.maskExpression === 'IP' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n\n      if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n        this.maskIsShown = this.showMaskInInput(inputValue || '#');\n      }\n\n      if (!inputValue && this.showMaskTyped) {\n        this.formControlResult(this.prefix);\n        return this.prefix + this.maskIsShown;\n      }\n\n      var getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n      var newInputValue = '';\n\n      if (this.hiddenInput !== undefined) {\n        var actualResult = this.actualValue.split(''); // tslint:disable no-unused-expression\n\n        inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = []; // tslint:enable no-unused-expression\n\n        newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n      }\n\n      newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n\n      var result = _get(_getPrototypeOf(MaskService.prototype), \"applyMask\", this).call(this, newInputValue, maskExpression, position, justPasted, backspaced, cb);\n\n      this.actualValue = this.getActualValue(result); // handle some separator implications:\n      // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n      if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n        this.decimalMarker = ',';\n      } // b) remove decimal marker from list of special characters to mask\n\n\n      if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n        this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) {\n          return item !== _this5.decimalMarker;\n        });\n      }\n\n      this.formControlResult(result);\n\n      if (!this.showMaskTyped) {\n        if (this.hiddenInput) {\n          return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n        }\n\n        return result;\n      }\n\n      var resLen = result.length;\n      var prefNmask = this.prefix + this.maskIsShown;\n\n      if (this.maskExpression.includes('H')) {\n        var countSkipedSymbol = this._numberSkipedSymbols(result);\n\n        return result + prefNmask.slice(resLen + countSkipedSymbol);\n      } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n        return result + prefNmask;\n      }\n\n      return result + prefNmask.slice(resLen);\n    } // get the number of characters that were shifted\n\n  }, {\n    key: \"_numberSkipedSymbols\",\n    value: function _numberSkipedSymbols(value) {\n      var regex = /(^|\\D)(\\d\\D)/g;\n      var match = regex.exec(value);\n      var countSkipedSymbol = 0;\n\n      while (match != null) {\n        countSkipedSymbol += 1;\n        match = regex.exec(value);\n      }\n\n      return countSkipedSymbol;\n    }\n  }, {\n    key: \"applyValueChanges\",\n    value: function applyValueChanges() {\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var justPasted = arguments.length > 1 ? arguments[1] : undefined;\n      var backspaced = arguments.length > 2 ? arguments[2] : undefined;\n      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n      var formElement = this._elementRef.nativeElement;\n      formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n      if (formElement === this.document.activeElement) {\n        return;\n      }\n\n      this.clearIfNotMatchFn();\n    }\n  }, {\n    key: \"hideInput\",\n    value: function hideInput(inputValue, maskExpression) {\n      var _this6 = this;\n\n      return inputValue.split('').map(function (curr, index) {\n        if (_this6.maskAvailablePatterns && _this6.maskAvailablePatterns[maskExpression[index]] && _this6.maskAvailablePatterns[maskExpression[index]].symbol) {\n          return _this6.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n\n        return curr;\n      }).join('');\n    } // this function is not necessary, it checks result against maskExpression\n\n  }, {\n    key: \"getActualValue\",\n    value: function getActualValue(res) {\n      var _this7 = this;\n\n      var compare = res.split('').filter(function (symbol, i) {\n        return _this7._checkSymbolMask(symbol, _this7.maskExpression[i]) || _this7.maskSpecialCharacters.includes(_this7.maskExpression[i]) && symbol === _this7.maskExpression[i];\n      });\n\n      if (compare.join('') === res) {\n        return compare.join('');\n      }\n\n      return res;\n    }\n  }, {\n    key: \"shiftTypedSymbols\",\n    value: function shiftTypedSymbols(inputValue) {\n      var _this8 = this;\n\n      var symbolToReplace = '';\n      var newInputValue = inputValue && inputValue.split('').map(function (currSymbol, index) {\n        if (_this8.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== _this8.maskExpression[index + 1]) {\n          symbolToReplace = currSymbol;\n          return inputValue[index + 1];\n        }\n\n        if (symbolToReplace.length) {\n          var replaceSymbol = symbolToReplace;\n          symbolToReplace = '';\n          return replaceSymbol;\n        }\n\n        return currSymbol;\n      }) || [];\n      return newInputValue.join('');\n    }\n  }, {\n    key: \"showMaskInInput\",\n    value: function showMaskInInput(inputVal) {\n      if (this.showMaskTyped && !!this.shownMaskExpression) {\n        if (this.maskExpression.length !== this.shownMaskExpression.length) {\n          throw new Error('Mask expression must match mask placeholder length');\n        } else {\n          return this.shownMaskExpression;\n        }\n      } else if (this.showMaskTyped) {\n        if (inputVal) {\n          if (this.maskExpression === 'IP') {\n            return this._checkForIp(inputVal);\n          }\n\n          if (this.maskExpression === 'CPF_CNPJ') {\n            return this._checkForCpfCnpj(inputVal);\n          }\n        }\n\n        return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n      }\n\n      return '';\n    }\n  }, {\n    key: \"clearIfNotMatchFn\",\n    value: function clearIfNotMatchFn() {\n      var formElement = this._elementRef.nativeElement;\n\n      if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n        this.formElementProperty = ['value', ''];\n        this.applyMask(formElement.value, this.maskExpression);\n      }\n    }\n  }, {\n    key: \"formElementProperty\",\n    set: function set(_ref) {\n      var _this9 = this;\n\n      var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          value = _ref2[1];\n\n      Promise.resolve().then(function () {\n        return _this9._renderer.setProperty(_this9._elementRef.nativeElement, name, value);\n      });\n    }\n  }, {\n    key: \"checkSpecialCharAmount\",\n    value: function checkSpecialCharAmount(mask) {\n      var _this10 = this;\n\n      var chars = mask.split('').filter(function (item) {\n        return _this10._findSpecialChar(item);\n      });\n      return chars.length;\n    }\n  }, {\n    key: \"removeMask\",\n    value: function removeMask(inputValue) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n  }, {\n    key: \"_checkForIp\",\n    value: function _checkForIp(inputVal) {\n      if (inputVal === '#') {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n\n      if (arr.length <= 3) {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      if (arr.length > 3 && arr.length <= 6) {\n        return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n      }\n\n      if (arr.length > 6 && arr.length <= 9) {\n        return this.placeHolderCharacter;\n      }\n\n      if (arr.length > 9 && arr.length <= 12) {\n        return '';\n      }\n\n      return '';\n    }\n  }, {\n    key: \"_checkForCpfCnpj\",\n    value: function _checkForCpfCnpj(inputVal) {\n      var cpf = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n      var cnpj = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"/\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n\n      if (inputVal === '#') {\n        return cpf;\n      }\n\n      var arr = [];\n\n      for (var i = 0; i < inputVal.length; i++) {\n        if (inputVal[i].match('\\\\d')) {\n          arr.push(inputVal[i]);\n        }\n      }\n\n      if (arr.length <= 3) {\n        return cpf.slice(arr.length, cpf.length);\n      }\n\n      if (arr.length > 3 && arr.length <= 6) {\n        return cpf.slice(arr.length + 1, cpf.length);\n      }\n\n      if (arr.length > 6 && arr.length <= 9) {\n        return cpf.slice(arr.length + 2, cpf.length);\n      }\n\n      if (arr.length > 9 && arr.length < 11) {\n        return cpf.slice(arr.length + 3, cpf.length);\n      }\n\n      if (arr.length === 11) {\n        return '';\n      }\n\n      if (arr.length === 12) {\n        if (inputVal.length === 17) {\n          return cnpj.slice(16, cnpj.length);\n        }\n\n        return cnpj.slice(15, cnpj.length);\n      }\n\n      if (arr.length > 12 && arr.length <= 14) {\n        return cnpj.slice(arr.length + 4, cnpj.length);\n      }\n\n      return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n\n  }, {\n    key: \"formControlResult\",\n    value: function formControlResult(inputValue) {\n      if (this.writingValue) {\n        return;\n      }\n\n      if (Array.isArray(this.dropSpecialCharacters)) {\n        this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n      } else if (this.dropSpecialCharacters) {\n        this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n      } else {\n        this.onChange(this._removeSuffix(inputValue));\n      }\n    }\n  }, {\n    key: \"_toNumber\",\n    value: function _toNumber(value) {\n      if (!this.isNumberValue) {\n        return value;\n      }\n\n      var num = Number(value);\n      return Number.isNaN(num) ? value : num;\n    }\n  }, {\n    key: \"_removeMask\",\n    value: function _removeMask(value, specialCharactersForRemove) {\n      return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n  }, {\n    key: \"_removePrefix\",\n    value: function _removePrefix(value) {\n      if (!this.prefix) {\n        return value;\n      }\n\n      return value ? value.replace(this.prefix, '') : value;\n    }\n  }, {\n    key: \"_removeSuffix\",\n    value: function _removeSuffix(value) {\n      if (!this.suffix) {\n        return value;\n      }\n\n      return value ? value.replace(this.suffix, '') : value;\n    }\n  }, {\n    key: \"_retrieveSeparatorValue\",\n    value: function _retrieveSeparatorValue(result) {\n      return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n  }, {\n    key: \"_regExpForRemove\",\n    value: function _regExpForRemove(specialCharactersForRemove) {\n      return new RegExp(specialCharactersForRemove.map(function (item) {\n        return \"\\\\\".concat(item);\n      }).join('|'), 'gi');\n    }\n  }, {\n    key: \"_checkSymbols\",\n    value: function _checkSymbols(result) {\n      if (result === '') {\n        return result;\n      }\n\n      var separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n      var separatorValue = this._retrieveSeparatorValue(result);\n\n      if (this.decimalMarker !== '.') {\n        separatorValue = separatorValue.replace(this.decimalMarker, '.');\n      }\n\n      if (!this.isNumberValue) {\n        return separatorValue;\n      }\n\n      if (separatorPrecision) {\n        if (result === this.decimalMarker) {\n          return null;\n        }\n\n        return this._checkPrecision(this.maskExpression, separatorValue);\n      } else {\n        return Number(separatorValue);\n      }\n    } // TODO should think about helpers or separting decimal precision to own property\n\n  }, {\n    key: \"_retrieveSeparatorPrecision\",\n    value: function _retrieveSeparatorPrecision(maskExpretion) {\n      var matcher = maskExpretion.match(new RegExp(\"^separator\\\\.([^d]*)\"));\n      return matcher ? Number(matcher[1]) : null;\n    }\n  }, {\n    key: \"_checkPrecision\",\n    value: function _checkPrecision(separatorExpression, separatorValue) {\n      if (separatorExpression.indexOf('2') > 0) {\n        return Number(separatorValue).toFixed(2);\n      }\n\n      return Number(separatorValue);\n    }\n  }]);\n\n  return MaskService;\n}(MaskApplierService);\n\nMaskService.ɵfac = function MaskService_Factory(t) {\n  return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n};\n\nMaskService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MaskService,\n  factory: MaskService.ɵfac\n});\n\nMaskService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, null);\n})(); // tslint:disable deprecation\n// tslint:disable no-input-rename\n\n\nvar MaskDirective = /*#__PURE__*/function () {\n  function MaskDirective(document, _maskService, _config) {\n    _classCallCheck(this, MaskDirective);\n\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config;\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n\n    this.onChange = function (_) {};\n\n    this.onTouch = function () {};\n  }\n\n  _createClass(MaskDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var maskExpression = changes.maskExpression,\n          specialCharacters = changes.specialCharacters,\n          patterns = changes.patterns,\n          prefix = changes.prefix,\n          suffix = changes.suffix,\n          thousandSeparator = changes.thousandSeparator,\n          decimalMarker = changes.decimalMarker,\n          dropSpecialCharacters = changes.dropSpecialCharacters,\n          hiddenInput = changes.hiddenInput,\n          showMaskTyped = changes.showMaskTyped,\n          placeHolderCharacter = changes.placeHolderCharacter,\n          shownMaskExpression = changes.shownMaskExpression,\n          showTemplate = changes.showTemplate,\n          clearIfNotMatch = changes.clearIfNotMatch,\n          validation = changes.validation,\n          separatorLimit = changes.separatorLimit,\n          allowNegativeNumbers = changes.allowNegativeNumbers,\n          leadZeroDateTime = changes.leadZeroDateTime;\n\n      if (maskExpression) {\n        this._maskValue = maskExpression.currentValue || '';\n\n        if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n          this._maskExpressionArray = maskExpression.currentValue.split('||').sort(function (a, b) {\n            return a.length - b.length;\n          });\n          this._maskValue = this._maskExpressionArray[0];\n          this.maskExpression = this._maskExpressionArray[0];\n          this._maskService.maskExpression = this._maskExpressionArray[0];\n        }\n      }\n\n      if (specialCharacters) {\n        if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n          return;\n        } else {\n          this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n        }\n      } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n      if (patterns && patterns.currentValue) {\n        this._maskService.maskAvailablePatterns = patterns.currentValue;\n      }\n\n      if (prefix) {\n        this._maskService.prefix = prefix.currentValue;\n      }\n\n      if (suffix) {\n        this._maskService.suffix = suffix.currentValue;\n      }\n\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator.currentValue;\n      }\n\n      if (decimalMarker) {\n        this._maskService.decimalMarker = decimalMarker.currentValue;\n      }\n\n      if (dropSpecialCharacters) {\n        this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n      }\n\n      if (hiddenInput) {\n        this._maskService.hiddenInput = hiddenInput.currentValue;\n      }\n\n      if (showMaskTyped) {\n        this._maskService.showMaskTyped = showMaskTyped.currentValue;\n      }\n\n      if (placeHolderCharacter) {\n        this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n      }\n\n      if (shownMaskExpression) {\n        this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n      }\n\n      if (showTemplate) {\n        this._maskService.showTemplate = showTemplate.currentValue;\n      }\n\n      if (clearIfNotMatch) {\n        this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n      }\n\n      if (validation) {\n        this._maskService.validation = validation.currentValue;\n      }\n\n      if (separatorLimit) {\n        this._maskService.separatorLimit = separatorLimit.currentValue;\n      }\n\n      if (allowNegativeNumbers) {\n        this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n        if (this._maskService.allowNegativeNumbers) {\n          this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(function (c) {\n            return c !== '-';\n          });\n        }\n      }\n\n      if (leadZeroDateTime) {\n        this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n      }\n\n      this._applyMask();\n    } // tslint:disable-next-line: cyclomatic-complexity\n\n  }, {\n    key: \"validate\",\n    value: function validate(_ref3) {\n      var _this11 = this;\n\n      var value = _ref3.value;\n\n      if (!this._maskService.validation || !this._maskValue) {\n        return null;\n      }\n\n      if (this._maskService.ipError) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskService.cpfCnpjError) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.startsWith('separator')) {\n        return null;\n      }\n\n      if (withoutValidation.includes(this._maskValue)) {\n        return null;\n      }\n\n      if (this._maskService.clearIfNotMatch) {\n        return null;\n      }\n\n      if (timeMasks.includes(this._maskValue)) {\n        return this._validateTime(value);\n      }\n\n      if (value && value.toString().length >= 1) {\n        var counterOfOpt = 0;\n\n        var _loop = function _loop(key) {\n          if (_this11._maskService.maskAvailablePatterns[key].optional && _this11._maskService.maskAvailablePatterns[key].optional === true) {\n            if (_this11._maskValue.indexOf(key) !== _this11._maskValue.lastIndexOf(key)) {\n              var opt = _this11._maskValue.split('').filter(function (i) {\n                return i === key;\n              }).join('');\n\n              counterOfOpt += opt.length;\n            } else if (_this11._maskValue.indexOf(key) !== -1) {\n              counterOfOpt++;\n            }\n\n            if (_this11._maskValue.indexOf(key) !== -1 && value.toString().length >= _this11._maskValue.indexOf(key)) {\n              return {\n                v: null\n              };\n            }\n\n            if (counterOfOpt === _this11._maskValue.length) {\n              return {\n                v: null\n              };\n            }\n          }\n        };\n\n        for (var key in this._maskService.maskAvailablePatterns) {\n          var _ret = _loop(key);\n\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n\n        if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n          return null;\n        }\n\n        if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n          return null;\n        } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n          return this._createValidationError(value);\n        }\n\n        if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n          var length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n          if (value.toString().length < length) {\n            return this._createValidationError(value);\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste() {\n      this._justPasted = true;\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(e) {\n      var _this12 = this;\n\n      var el = e.target;\n      this._inputValue = el.value;\n\n      this._setMask();\n\n      if (!this._maskValue) {\n        this.onChange(el.value);\n        return;\n      }\n\n      var position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n      var caretShift = 0;\n      var backspaceShift = false;\n\n      this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace', function (shift, _backspaceShift) {\n        _this12._justPasted = false;\n        caretShift = shift;\n        backspaceShift = _backspaceShift;\n      }); // only set the selection if the element is active\n\n\n      if (this.document.activeElement !== el) {\n        return;\n      }\n\n      this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n      var positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n      if (positionToApply > this._getActualInputLength()) {\n        positionToApply = this._getActualInputLength();\n      }\n\n      el.setSelectionRange(positionToApply, positionToApply);\n      this._position = null;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      if (this._maskValue) {\n        this._maskService.clearIfNotMatchFn();\n      }\n\n      this.onTouch();\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(e) {\n      if (!this._maskValue) {\n        return;\n      }\n\n      var el = e.target;\n      var posStart = 0;\n      var posEnd = 0;\n\n      if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // tslint:disable-next-line\n      e.keyCode !== 38) {\n        if (this._maskService.showMaskTyped) {\n          // We are showing the mask in the input\n          this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n          if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n            // the input ONLY contains the mask, so position the cursor at the start\n            el.focus();\n            el.setSelectionRange(posStart, posEnd);\n          } else {\n            // the input contains some characters already\n            if (el.selectionStart > this._maskService.actualValue.length) {\n              // if the user clicked beyond our value's length, position the cursor at the end of our value\n              el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n            }\n          }\n        }\n      }\n\n      var nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n      /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n      if (el.value !== nextValue) {\n        el.value = nextValue;\n      }\n      /** fix of cursor position with prefix when mouse click occur */\n\n\n      if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n        el.selectionStart = this._maskService.prefix.length;\n        return;\n      }\n      /** select only inserted text */\n\n\n      if (el.selectionEnd > this._getActualInputLength()) {\n        el.selectionEnd = this._getActualInputLength();\n      }\n    } // tslint:disable-next-line: cyclomatic-complexity\n\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(e) {\n      var _a;\n\n      if (!this._maskValue) {\n        return;\n      }\n\n      this._code = e.code ? e.code : e.key;\n      var el = e.target;\n      this._inputValue = el.value;\n\n      this._setMask();\n\n      if (e.keyCode === 38) {\n        e.preventDefault();\n      }\n\n      if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n        if (e.keyCode === 8 && el.value.length === 0) {\n          el.selectionStart = el.selectionEnd;\n        }\n\n        if (e.keyCode === 8 && el.selectionStart !== 0) {\n          // If specialChars is false, (shouldn't ever happen) then set to the defaults\n          this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n          if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n            el.setSelectionRange(this.prefix.length, this.prefix.length);\n          } else {\n            if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n              while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n              }\n            }\n\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n          }\n        }\n\n        this.suffixCheckOnPressDelete(e.keyCode, el);\n\n        if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n          e.preventDefault();\n        }\n\n        var cursorStart = el.selectionStart; // this.onFocus(e);\n\n        if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n          this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n          this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n        }\n      }\n\n      if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      } else if (e.keyCode === 65 && e.ctrlKey === true || // Ctrl+ A\n      e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)\n      ) {\n          el.setSelectionRange(0, this._getActualInputLength());\n          e.preventDefault();\n        }\n\n      this._maskService.selStart = el.selectionStart;\n      this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(inputValue) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                  if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                  }\n\n                  inputValue = inputValue.value;\n                }\n\n                if (inputValue === undefined) {\n                  inputValue = '';\n                }\n\n                if (typeof inputValue === 'number') {\n                  inputValue = String(inputValue);\n                  inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                  this._maskService.isNumberValue = true;\n                }\n\n                if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n                  // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                  this._maskService.writingValue = true;\n                  this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n                  this._maskService.writingValue = false;\n                } else {\n                  this._maskService.formElementProperty = ['value', inputValue];\n                }\n\n                this._inputValue = inputValue;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n      this._maskService.onChange = this.onChange;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouch = fn;\n    }\n  }, {\n    key: \"suffixCheckOnPressDelete\",\n    value: function suffixCheckOnPressDelete(keyCode, el) {\n      if (keyCode === 46 && this.suffix.length > 0) {\n        if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n      }\n\n      if (keyCode === 8) {\n        if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n\n        if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n          el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n        }\n      }\n    }\n    /** It disables the input element */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n  }, {\n    key: \"_repeatPatternSymbols\",\n    value: function _repeatPatternSymbols(maskExp) {\n      var _this13 = this;\n\n      return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce(function (accum, currval, index) {\n        _this13._start = currval === '{' ? index : _this13._start;\n\n        if (currval !== '}') {\n          return _this13._maskService._findSpecialChar(currval) ? accum + currval : accum;\n        }\n\n        _this13._end = index;\n        var repeatNumber = Number(maskExp.slice(_this13._start + 1, _this13._end));\n        var replaceWith = new Array(repeatNumber + 1).join(maskExp[_this13._start - 1]);\n        return accum + replaceWith;\n      }, '') || maskExp;\n    } // tslint:disable-next-line:no-any\n\n  }, {\n    key: \"_applyMask\",\n    value: function _applyMask() {\n      this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n      this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n    }\n  }, {\n    key: \"_validateTime\",\n    value: function _validateTime(value) {\n      var rowMaskLen = this._maskValue.split('').filter(function (s) {\n        return s !== ':';\n      }).length;\n\n      if (value === null || value.length === 0) {\n        return null; // Don't validate empty values to allow for optional form control\n      }\n\n      if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n        return this._createValidationError(value);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getActualInputLength\",\n    value: function _getActualInputLength() {\n      return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n    }\n  }, {\n    key: \"_createValidationError\",\n    value: function _createValidationError(actualValue) {\n      return {\n        mask: {\n          requiredMask: this._maskValue,\n          actualValue: actualValue\n        }\n      };\n    }\n  }, {\n    key: \"_setMask\",\n    value: function _setMask() {\n      var _this14 = this;\n\n      if (this._maskExpressionArray.length > 0) {\n        this._maskExpressionArray.some(function (mask) {\n          var test = _this14._maskService.removeMask(_this14._inputValue).length <= _this14._maskService.removeMask(mask).length;\n\n          if (_this14._inputValue && test) {\n            _this14._maskValue = mask;\n            _this14.maskExpression = mask;\n            _this14._maskService.maskExpression = mask;\n            return test;\n          } else {\n            _this14._maskValue = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n            _this14.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n            _this14._maskService.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n          }\n        });\n      }\n    }\n  }]);\n\n  return MaskDirective;\n}();\n\nMaskDirective.ɵfac = function MaskDirective_Factory(t) {\n  return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config));\n};\n\nMaskDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n        return ctx.onFocus($event);\n      })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return MaskDirective;\n    }),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return MaskDirective;\n    }),\n    multi: true\n  }, MaskService]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMaskDirective.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MaskService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [config]\n    }]\n  }];\n};\n\nMaskDirective.propDecorators = {\n  maskExpression: [{\n    type: Input,\n    args: ['mask']\n  }],\n  specialCharacters: [{\n    type: Input\n  }],\n  patterns: [{\n    type: Input\n  }],\n  prefix: [{\n    type: Input\n  }],\n  suffix: [{\n    type: Input\n  }],\n  thousandSeparator: [{\n    type: Input\n  }],\n  decimalMarker: [{\n    type: Input\n  }],\n  dropSpecialCharacters: [{\n    type: Input\n  }],\n  hiddenInput: [{\n    type: Input\n  }],\n  showMaskTyped: [{\n    type: Input\n  }],\n  placeHolderCharacter: [{\n    type: Input\n  }],\n  shownMaskExpression: [{\n    type: Input\n  }],\n  showTemplate: [{\n    type: Input\n  }],\n  clearIfNotMatch: [{\n    type: Input\n  }],\n  validation: [{\n    type: Input\n  }],\n  separatorLimit: [{\n    type: Input\n  }],\n  allowNegativeNumbers: [{\n    type: Input\n  }],\n  leadZeroDateTime: [{\n    type: Input\n  }],\n  onPaste: [{\n    type: HostListener,\n    args: ['paste']\n  }],\n  onInput: [{\n    type: HostListener,\n    args: ['input', ['$event']]\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }],\n  onFocus: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return MaskDirective;\n        }),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(function () {\n          return MaskDirective;\n        }),\n        multi: true\n      }, MaskService]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nvar MaskPipe = /*#__PURE__*/function () {\n  function MaskPipe(_maskService) {\n    _classCallCheck(this, MaskPipe);\n\n    this._maskService = _maskService;\n  }\n\n  _createClass(MaskPipe, [{\n    key: \"transform\",\n    value: function transform(value, mask) {\n      var thousandSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!value && typeof value !== 'number') {\n        return '';\n      }\n\n      if (thousandSeparator) {\n        this._maskService.thousandSeparator = thousandSeparator;\n      }\n\n      if (typeof mask === 'string') {\n        return this._maskService.applyMask(\"\".concat(value), mask);\n      }\n\n      return this._maskService.applyMaskWithPattern(\"\".concat(value), mask);\n    }\n  }]);\n\n  return MaskPipe;\n}();\n\nMaskPipe.ɵfac = function MaskPipe_Factory(t) {\n  return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService));\n};\n\nMaskPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: MaskPipe,\n  pure: true\n});\n\nMaskPipe.ctorParameters = function () {\n  return [{\n    type: MaskApplierService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }, null);\n})();\n\nvar NgxMaskModule = /*#__PURE__*/function () {\n  function NgxMaskModule() {\n    _classCallCheck(this, NgxMaskModule);\n  }\n\n  _createClass(NgxMaskModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(configValue) {\n      return {\n        ngModule: NgxMaskModule,\n        providers: [{\n          provide: NEW_CONFIG,\n          useValue: configValue\n        }, {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig\n        }, {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG]\n        }, MaskApplierService]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      return {\n        ngModule: NgxMaskModule\n      };\n    }\n  }]);\n\n  return NgxMaskModule;\n}();\n\nNgxMaskModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxMaskModule_Factory(t) {\n    return new (t || NgxMaskModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, {\n    declarations: [MaskDirective, MaskPipe],\n    exports: [MaskDirective, MaskPipe]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }], null, null);\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"sources":["../../projects/ngx-mask-lib/src/lib/config.ts","../../projects/ngx-mask-lib/src/lib/mask-applier.service.ts","../../projects/ngx-mask-lib/src/lib/mask.service.ts","../../projects/ngx-mask-lib/src/lib/mask.directive.ts","../../projects/ngx-mask-lib/src/lib/mask.pipe.ts","../../projects/ngx-mask-lib/src/lib/ngx-mask.module.ts","../../projects/ngx-mask-lib/src/lib/custom-keyboard-event.ts","../../../projects/ngx-mask-lib/src/ngx-mask.ts"],"names":[],"mappings":";;;;;;;;;;;;;IA6Ba,MAAM,GAA4B,IAAI,cAAJ,CAAmB,QAAnB,C;AAC/C,IAAa,UAAU,GAA4B,IAAI,cAAJ,CAAmB,YAAnB,CAAnD;AACA,IAAa,cAAc,GAA4B,IAAI,cAAJ,CAAmB,gBAAnB,CAAvD;AACA,IACa,aAAa,GAAY;AACpC,EAAA,MAAM,EAAE,EAD4B;AAEpC,EAAA,MAAM,EAAE,EAF4B;AAGpC,EAAA,iBAAiB,EAAE,GAHiB;AAIpC,EAAA,aAAa,EAAE,GAJqB;AAKpC,EAAA,eAAe,EAAE,KALmB;AAMpC,EAAA,YAAY,EAAE,KANsB;AAOpC,EAAA,aAAa,EAAE,KAPqB;AAQpC,EAAA,oBAAoB,EAAE,GARc;AASpC,EAAA,qBAAqB,EAAE,IATa;AAUpC,EAAA,WAAW,EAAE,SAVuB;AAWpC,EAAA,mBAAmB,EAAE,EAXe;AAYpC,EAAA,cAAc,EAAE,EAZoB;AAapC,EAAA,oBAAoB,EAAE,KAbc;AAcpC,EAAA,UAAU,EAAE,IAdwB;AAetC;AACE,EAAA,iBAAiB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,CAhBiB;AAiBpC,EAAA,gBAAgB,EAAE,KAjBkB;AAkBpC,EAAA,QAAQ,EAAE;AACR,SAAK;AACH,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADN,KADG;AAIR,SAAK;AACH,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX,CADN;AAEH,MAAA,QAAQ,EAAE;AAFP,KAJG;AAQR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX,CADR;AAED,MAAA,MAAM,EAAE;AAFP,KARK;AAYR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,aAAX;AADR,KAZK;AAeR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,UAAX;AADR,KAfK;AAkBR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR,KAlBK;AAqBR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR,KArBK;AAwBR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR,KAxBK;AA2BR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR,KA3BK;AA8BR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR,KA9BK;AAiCR,IAAA,CAAC,EAAE;AACD,MAAA,OAAO,EAAE,IAAI,MAAJ,CAAW,KAAX;AADR;AAjCK;AAlB0B,CADtC;AAyDA,IACa,SAAS,GAAa,CAAC,UAAD,EAAa,OAAb,EAAsB,OAAtB,CADnC;AAEA,IACa,iBAAiB,GAAa,CACzC,SADyC,EAEzC,IAFyC,EAGzC,IAHyC,EAIzC,IAJyC,EAKzC,WALyC,EAMzC,YANyC,EAOzC,OAPyC,EAQzC,IARyC,EASzC,IATyC,CAD3C;;ICvFa,kB;AA0BX,8BAA6C,OAA7C,EAA6D;AAAA;;AAAA;;AAAhB,SAAA,OAAA,GAAA,OAAA;AArBtC,SAAA,cAAA,GAAyB,EAAzB;AACA,SAAA,WAAA,GAAsB,EAAtB;AACA,SAAA,mBAAA,GAA8B,EAA9B;;AA2YC,SAAA,qBAAA,GAAwB,UAC9B,GAD8B,EAE9B,qBAF8B,EAG9B,WAH8B,EAI9B,SAJ8B,EAIb;AAEjB,UAAM,CAAC,GAAa,GAAG,CAAC,KAAJ,CAAU,WAAV,CAApB;AACA,UAAM,QAAQ,GAAW,CAAC,CAAC,MAAF,GAAW,CAAX,aAAkB,WAAlB,SAAgC,CAAC,CAAC,CAAD,CAAjC,IAAyC,EAAlE;AACA,UAAI,GAAG,GAAW,CAAC,CAAC,CAAD,CAAnB;;AACA,UAAM,cAAc,GAAW,KAAI,CAAC,cAAL,CAAoB,OAApB,CAA4B,KAA5B,EAAmC,EAAnC,CAA/B;;AACA,UAAI,cAAc,IAAI,CAAC,cAAvB,EAAuC;AACrC,YAAI,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,UAAA,GAAG,cAAO,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,GAAG,CAAC,MAAjB,EAAyB,KAAzB,CAA+B,CAA/B,EAAkC,cAAc,CAAC,MAAjD,CAAP,CAAH;AACD,SAFD,MAEO;AACL,UAAA,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,CAAV,EAAa,cAAc,CAAC,MAA5B,CAAN;AACD;AACF;;AACD,UAAM,GAAG,GAAW,cAApB;;AAEA,aAAO,qBAAqB,IAAI,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAhC,EAA+C;AAC7C,QAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,EAAiB,OAAO,qBAAP,GAA+B,IAAhD,CAAN;AACD;;AAED,UAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,eAAO,GAAG,GAAG,QAAb;AACD,OAFD,MAEO,IAAI,SAAS,KAAK,CAAlB,EAAqB;AAC1B,eAAO,GAAP;AACD;;AACD,aAAO,GAAG,GAAG,QAAQ,CAAC,MAAT,CAAgB,CAAhB,EAAmB,SAAS,GAAG,CAA/B,CAAb;AACD,KA7BO;;AA+BA,SAAA,UAAA,GAAa,UAAC,GAAD,EAAY;AAC/B,aAAO,MAAM,CAAC,GAAD,CAAN,IAAe,CAAf,IAAoB,MAAM,CAAC,GAAD,CAAN,IAAe,GAA1C;AACD,KAFO;;AAIA,SAAA,YAAA,GAAe,UAAC,cAAD,EAAuB;AAC5C,UAAM,CAAC,GAAa,cAAc,CAAC,KAAf,CAAqB,GAArB,CAApB;;AACA,UAAI,CAAC,CAAC,MAAF,GAAW,CAAf,EAAkB;AAChB,eAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAF,GAAW,CAAZ,CAAF,CAAb;AACD;;AAED,aAAO,QAAP;AACD,KAPO;;AASA,SAAA,oBAAA,GAAuB,UAAC,UAAD,EAAmB;AAAO,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA;;AACvD,WAAK,IAAI,CAAC,GAAG,CAAA,CAAA,EAAA,GAAA,KAAI,CAAC,MAAL,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,MAAb,IAAsB,CAAnC,EAAsC,CAAC,IAAI,CAA3C,EAA8C,CAAC,EAA/C,EAAmD;AACjD,YAAM,MAAM,GAAG,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,CAAnB,EAAoB,CAAA,EAAA,GAAE,KAAI,CAAC,MAAP,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE,MAAnC,CAAf;;AACA,YACE,UAAU,CAAC,QAAX,CAAoB,MAApB,MACC,CAAC,GAAG,CAAJ,GAAQ,CAAR,IAAa,CAAC,UAAU,CAAC,QAAX,CAAoB,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,CAAC,GAAG,CAAvB,EAAwB,CAAA,EAAA,GAAE,KAAI,CAAC,MAAP,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAE,MAAvC,CAApB,CADf,CADF,EAGE;AACA,iBAAO,UAAU,CAAC,OAAX,CAAmB,MAAnB,EAA2B,EAA3B,CAAP;AACD;AACF;;AACD,aAAO,UAAP;AACD,KAXO;;AAaA,SAAA,mBAAA,GAAsB,UAC5B,UAD4B,EAE5B,SAF4B,EAG5B,aAH4B,EAGW;AAEvC,UAAI,SAAS,GAAG,QAAhB,EAA0B;AACxB,YAAM,cAAc,GAAW,IAAI,MAAJ,CAAW,KAAI,CAAC,uBAAL,CAA6B,aAA7B,kBAAqD,SAArD,SAAX,CAA/B;AAEA,YAAM,cAAc,GAA4B,UAAU,CAAC,KAAX,CAAiB,cAAjB,CAAhD;;AACA,YAAI,cAAc,IAAI,cAAc,CAAC,CAAD,CAAd,CAAkB,MAAlB,GAA2B,CAA3B,GAA+B,SAArD,EAAgE;AAC9D,cAAM,IAAI,GAAG,cAAc,CAAC,CAAD,CAAd,CAAkB,MAAlB,GAA2B,CAA3B,GAA+B,SAA5C;AACA,UAAA,UAAU,GAAG,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,MAAX,GAAoB,IAA5C,CAAb;AACD;;AACD,YAAI,SAAS,KAAK,CAAd,IAAmB,UAAU,CAAC,QAAX,CAAoB,aAApB,CAAvB,EAA2D;AACzD,UAAA,UAAU,GAAG,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,MAAX,GAAoB,CAA5C,CAAb;AACD;AACF;;AACD,aAAO,UAAP;AACD,KAlBO;;AAhbN,SAAK,MAAL,GAAc,IAAI,GAAJ,EAAd;AACA,SAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,eAApC;AACA,SAAK,qBAAL,GAA6B,KAAK,OAAL,CAAa,qBAA1C;AACA,SAAK,qBAAL,GAA6B,KAAK,OAAL,CAAa,iBAA1C;AACA,SAAK,qBAAL,GAA6B,KAAK,OAAL,CAAa,QAA1C;AACA,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,MAA3B;AACA,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,MAA3B;AACA,SAAK,iBAAL,GAAyB,KAAK,OAAL,CAAa,iBAAtC;AACA,SAAK,aAAL,GAAqB,KAAK,OAAL,CAAa,aAAlC;AACA,SAAK,WAAL,GAAmB,KAAK,OAAL,CAAa,WAAhC;AACA,SAAK,aAAL,GAAqB,KAAK,OAAL,CAAa,aAAlC;AACA,SAAK,oBAAL,GAA4B,KAAK,OAAL,CAAa,oBAAzC;AACA,SAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,UAA/B;AACA,SAAK,cAAL,GAAsB,KAAK,OAAL,CAAa,cAAnC;AACA,SAAK,oBAAL,GAA4B,KAAK,OAAL,CAAa,oBAAzC;AACA,SAAK,gBAAL,GAAwB,KAAK,OAAL,CAAa,gBAArC;AACD;;;;WAEM,8BAAqB,UAArB,EAAyC,cAAzC,EAAsF;AAC3F,2CAA8B,cAA9B;AAAA,UAAO,IAAP;AAAA,UAAa,aAAb;;AACA,WAAK,aAAL,GAAqB,aAArB;AACA,aAAO,KAAK,SAAL,CAAe,UAAf,EAA2B,IAA3B,CAAP;AACD;;;WAEM,mBACL,UADK,EAEL,cAFK,EAMkB;AAAA;;AAAA,UAHvB,QAGuB,uEAHJ,CAGI;AAAA,UAFvB,UAEuB,uEAFD,KAEC;AAAA,UADvB,UACuB,uEADD,KACC;AAAA,UAAvB,EAAuB,uEAAR,YAAA,CAAQ,CAAA;;AAEvB,UAAI,UAAU,KAAK,SAAf,IAA4B,UAAU,KAAK,IAA3C,IAAmD,cAAc,KAAK,SAA1E,EAAqF;AACnF,eAAO,EAAP;AACD;;AACD,UAAI,MAAM,GAAG,CAAb;AACA,UAAI,MAAM,GAAG,EAAb;AACA,UAAI,KAAK,GAAG,KAAZ;AACA,UAAI,cAAc,GAAG,KAArB;AACA,UAAI,KAAK,GAAG,CAAZ;AACA,UAAI,QAAQ,GAAG,KAAf;;AACA,UAAI,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,KAAK,MAAL,CAAY,MAAhC,MAA4C,KAAK,MAArD,EAA6D;AAC3D,QAAA,UAAU,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAK,MAAL,CAAY,MAA7B,EAAqC,UAAU,CAAC,MAAhD,CAAb;AACD;;AACD,UAAI,CAAC,CAAC,KAAK,MAAP,IAAiB,CAAA,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,MAAZ,IAAqB,CAA1C,EAA6C;AAC3C,QAAA,UAAU,GAAG,KAAK,oBAAL,CAA0B,UAA1B,CAAb;AACD;;AACD,UAAM,UAAU,GAAa,UAAU,CAAC,QAAX,GAAsB,KAAtB,CAA4B,EAA5B,CAA7B;;AACA,UAAI,cAAc,KAAK,IAAvB,EAA6B;AAC3B,aAAK,OAAL,GAAe,CAAC,EAAE,UAAU,CAAC,MAAX,CAAkB,UAAC,CAAD;AAAA,iBAAe,CAAC,KAAK,GAArB;AAAA,SAAlB,EAA4C,MAA5C,GAAqD,CAArD,IAA0D,UAAU,CAAC,MAAX,GAAoB,CAAhF,CAAhB;AACA,QAAA,cAAc,GAAG,iBAAjB;AACD;;AACD,UAAM,GAAG,GAAa,EAAtB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,YAAI,UAAU,CAAC,CAAD,CAAV,CAAc,KAAd,CAAoB,KAApB,CAAJ,EAAgC;AAC9B,UAAA,GAAG,CAAC,IAAJ,CAAS,UAAU,CAAC,CAAD,CAAnB;AACD;AACF;;AACD,UAAI,cAAc,KAAK,UAAvB,EAAmC;AACjC,aAAK,YAAL,GAAoB,CAAC,EAAE,GAAG,CAAC,MAAJ,KAAe,EAAf,IAAqB,GAAG,CAAC,MAAJ,KAAe,EAAtC,CAArB;;AACA,YAAI,GAAG,CAAC,MAAJ,GAAa,EAAjB,EAAqB;AACnB,UAAA,cAAc,GAAG,oBAAjB;AACD,SAFD,MAEO;AACL,UAAA,cAAc,GAAG,gBAAjB;AACD;AACF;;AACD,UAAI,cAAc,CAAC,UAAf,CAA0B,SAA1B,CAAJ,EAA0C;AACxC,YAAI,UAAU,CAAC,KAAX,CAAiB,aAAjB,KAAmC,UAAU,CAAC,KAAX,CAAiB,oCAAjB,CAAvC,EAA+F;AAC7F,UAAA,UAAU,GAAG,KAAK,eAAL,CAAqB,UAArB,CAAb;AACA,cAAM,SAAS,GAAW,KAAK,YAAL,CAAkB,cAAlB,CAA1B;AACA,UAAA,UAAU,GAAG,KAAK,mBAAL,CAAyB,UAAzB,EAAqC,SAArC,EAAgD,KAAK,aAArD,CAAb;AACD;;AACD,YAAI,UAAU,CAAC,OAAX,CAAmB,GAAnB,IAA0B,CAA1B,IAA+B,CAAC,KAAK,UAAL,CAAgB,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAxB,CAAhB,CAApC,EAAuG;AACrG,cAAM,IAAI,GAAW,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,OAAX,CAAmB,GAAnB,IAA0B,CAAlD,CAArB;AACA,UAAA,UAAU,aAAM,IAAN,SAAa,UAAU,CAAC,SAAX,CAAqB,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAArB,EAA8C,UAAU,CAAC,MAAzD,CAAb,CAAV;AACD;;AACD,YAAI,KAAK,UAAL,CAAgB,UAAhB,CAAJ,EAAiC;AAC/B,UAAA,MAAM,GAAG,UAAT;AACD,SAFD,MAEO;AACL,UAAA,MAAM,GAAG,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,MAAX,GAAoB,CAA5C,CAAT;AACD;AACF,OAfD,MAeO,IAAI,cAAc,CAAC,UAAf,CAA0B,WAA1B,CAAJ,EAA4C;AACjD,YACE,UAAU,CAAC,KAAX,CAAiB,WAAjB,KACA,UAAU,CAAC,KAAX,CAAiB,SAAjB,CADA,IAEA,UAAU,CAAC,KAAX,CAAiB,aAAjB,CAFA,IAGA,UAAU,CAAC,KAAX,CAAiB,yCAAjB,CAHA,IAIA,UAAU,CAAC,KAAX,CAAiB,eAAjB,CALF,EAME;AACA,UAAA,UAAU,GAAG,KAAK,eAAL,CAAqB,UAArB,CAAb;AACD;;AAED,QAAA,UAAU,GACR,UAAU,CAAC,MAAX,GAAoB,CAApB,IAAyB,UAAU,CAAC,CAAD,CAAV,KAAkB,GAA3C,IAAkD,UAAU,CAAC,CAAD,CAAV,KAAkB,KAAK,aAAzE,GACI,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,UAAU,CAAC,MAA/B,CADJ,GAEI,UAHN,CAXiD,CAevD;AAEK;;AAEC,YAAM,4BAA4B,GAAW,KAAK,uBAAL,CAA6B,KAAK,iBAAlC,CAA7C;;AACA,YAAM,oBAAoB,GAAW,KAAK,uBAAL,CAA6B,KAAK,aAAlC,CAArC;;AACA,YAAM,YAAY,GAAW,2CAC1B,OAD0B,CAClB,4BADkB,EACY,EADZ,EAE1B,OAF0B,CAElB,oBAFkB,EAEI,EAFJ,CAA7B;AAIA,YAAM,iBAAiB,GAAW,IAAI,MAAJ,CAAW,MAAM,YAAN,GAAqB,GAAhC,CAAlC;;AAEA,YAAI,UAAU,CAAC,KAAX,CAAiB,iBAAjB,CAAJ,EAAyC;AACvC,UAAA,UAAU,GAAG,UAAU,CAAC,SAAX,CAAqB,CAArB,EAAwB,UAAU,CAAC,MAAX,GAAoB,CAA5C,CAAb;AACD;;AAED,YAAM,UAAS,GAAW,KAAK,YAAL,CAAkB,cAAlB,CAA1B;;AACA,QAAA,UAAU,GAAG,KAAK,mBAAL,CAAyB,UAAzB,EAAqC,UAArC,EAAgD,KAAK,aAArD,CAAb;AACA,YAAM,SAAS,GAAW,UAAU,CAAC,OAAX,CAAmB,IAAI,MAAJ,CAAW,4BAAX,EAAyC,GAAzC,CAAnB,EAAkE,EAAlE,CAA1B;AACA,QAAA,MAAM,GAAG,KAAK,qBAAL,CAA2B,SAA3B,EAAsC,KAAK,iBAA3C,EAA8D,KAAK,aAAnE,EAAkF,UAAlF,CAAT;AAEA,YAAM,UAAU,GAAW,MAAM,CAAC,OAAP,CAAe,GAAf,IAAsB,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAjD;AACA,YAAM,SAAS,GAAW,MAAM,CAAC,MAAP,GAAgB,UAAU,CAAC,MAArD;;AAEA,YAAI,SAAS,GAAG,CAAZ,IAAiB,MAAM,CAAC,QAAD,CAAN,KAAqB,GAA1C,EAA+C;AAC7C,UAAA,cAAc,GAAG,IAAjB;AACA,cAAI,MAAM,GAAG,CAAb;;AACA,aAAG;AACD,iBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAQ,GAAG,MAA3B;;AACA,YAAA,MAAM;AACP,WAHD,QAGS,MAAM,GAAG,SAHlB;AAID,SAPD,MAOO,IACJ,UAAU,KAAK,CAAf,IAAoB,QAAQ,GAAG,CAA/B,IAAoC,EAAE,MAAM,CAAC,OAAP,CAAe,GAAf,KAAuB,QAAvB,IAAmC,QAAQ,GAAG,CAAhD,CAArC,IACC,EAAE,MAAM,CAAC,OAAP,CAAe,GAAf,KAAuB,QAAvB,IAAmC,QAAQ,GAAG,CAAhD,KAAsD,SAAS,IAAI,CAF/D,EAGL;AACA,eAAK,MAAL,CAAY,KAAZ;;AACA,UAAA,cAAc,GAAG,IAAjB;AACA,UAAA,KAAK,GAAG,SAAR;AACA,UAAA,QAAQ,IAAI,SAAZ;;AACA,eAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB;AACD,SATM,MASA;AACL,eAAK,MAAL,CAAY,KAAZ;AACD;AACF,OA1DM,MA0DA;AACL,cACN;AACQ,YAAI,EAAC,GAAW,CAAhB,EAAmB,WAAW,GAAW,UAAU,CAAC,CAAD,CAFrD,EAGE,EAAC,GAAG,UAAU,CAAC,MAHjB,EAIE,EAAC,IAAI,WAAW,GAAG,UAAU,CAAC,EAAD,CAJ/B,EAKE;AACA,cAAI,MAAM,KAAK,cAAc,CAAC,MAA9B,EAAsC;AACpC;AACD;;AACD,cAAI,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,cAAc,CAAC,MAAD,CAAjD,KAA8D,cAAc,CAAC,MAAM,GAAG,CAAV,CAAd,KAA+B,GAAjG,EAAsG;AACpG,YAAA,MAAM,IAAI,WAAV;AACA,YAAA,MAAM,IAAI,CAAV;AACD,WAHD,MAGO,IACL,cAAc,CAAC,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACA,KADA,IAEA,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,cAAc,CAAC,MAAM,GAAG,CAAV,CAAjD,CAHK,EAIL;AACA,YAAA,MAAM,IAAI,WAAV;AACA,YAAA,MAAM,IAAI,CAAV;AACA,YAAA,KAAK,GAAG,KAAR;AACD,WARM,MAQA,IAAI,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,cAAc,CAAC,MAAD,CAAjD,KAA8D,cAAc,CAAC,MAAM,GAAG,CAAV,CAAd,KAA+B,GAAjG,EAAsG;AAC3G,YAAA,MAAM,IAAI,WAAV;AACA,YAAA,KAAK,GAAG,IAAR;AACD,WAHM,MAGA,IACL,cAAc,CAAC,MAAM,GAAG,CAAV,CAAd,KAA+B,GAA/B,IACA,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,cAAc,CAAC,MAAM,GAAG,CAAV,CAAjD,CAFK,EAGL;AACA,YAAA,MAAM,IAAI,WAAV;AACA,YAAA,MAAM,IAAI,CAAV;AACD,WANM,MAMA,IAAI,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,cAAc,CAAC,MAAD,CAAjD,CAAJ,EAAgE;AACrE,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBAAI,MAAM,CAAC,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AAC3B,gBAAA,MAAM,IAAI,CAAV;;AACA,qBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,gBAAA,EAAC;;AACD,oBAAI,KAAK,gBAAT,EAA2B;AACzB,kBAAA,MAAM,IAAI,GAAV;AACD;;AACD;AACD;AACF;;AACD,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBAAI,MAAM,KAAK,GAAX,IAAkB,MAAM,CAAC,WAAD,CAAN,GAAsB,CAA5C,EAA+C;AAC7C,gBAAA,MAAM,IAAI,CAAV;AACA,gBAAA,EAAC;AACD;AACD;AACF;;AACD,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBAAI,MAAM,CAAC,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AAC3B,gBAAA,MAAM,IAAI,CAAV;;AACA,qBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,gBAAA,EAAC;;AACD,oBAAI,KAAK,gBAAT,EAA2B;AACzB,kBAAA,MAAM,IAAI,GAAV;AACD;;AACD;AACD;AACF;;AACD,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBAAI,MAAM,CAAC,WAAD,CAAN,GAAsB,CAA1B,EAA6B;AAC3B,gBAAA,MAAM,IAAI,CAAV;;AACA,qBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,gBAAA,EAAC;;AACD,oBAAI,KAAK,gBAAT,EAA2B;AACzB,kBAAA,MAAM,IAAI,GAAV;AACD;;AACD;AACD;AACF;;AACD,gBAAM,SAAS,GAAG,EAAlB;;AACA,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBACG,MAAM,CAAC,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK,gBAAjC,IACA,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C,SAD/C,IAEA,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAH7B,EAIE;AACA,gBAAA,MAAM,IAAI,CAAV;;AACA,qBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,gBAAA,EAAC;;AACD,oBAAI,KAAK,gBAAT,EAA2B;AACzB,kBAAA,MAAM,IAAI,GAAV;AACD;;AACD;AACD;AACF;;AACD,gBAAI,cAAc,CAAC,MAAD,CAAd,KAA2B,GAA/B,EAAoC;AAClC,kBAAM,WAAW,GAAG,EAApB,CADkC,CAE9C;;AACY,kBAAM,WAAW,GACf,MAAM,KAAK,CAAX,KACC,MAAM,CAAC,WAAD,CAAN,GAAsB,CAAtB,IACC,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C,WADhD,IAEC,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAH7B,CADF,CAHkC,CAQ9C;;AACY,kBAAM,cAAc,GAClB,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,EAAyC,QAAzC,CAAkD,GAAlD,MACE,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACA,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD,WADnD,IAEA,UAAU,CAAC,MAAD,CAAV,KAAuB,GAFxB,IAGC,UAAU,CAAC,MAAD,CAAV,KAAuB,GAHxB,IAIE,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAA3B,IACC,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAA7B,CAAD,CAAN,GAA+C,WADhD,IAEC,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAN9B,IAOC,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAR7B,CADF,CATkC,CAmB9C;;AACY,kBAAM,cAAc,GAClB,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD,SAApD,IACA,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,EAAyC,QAAzC,CAAkD,GAAlD,CADD,IAEA,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAF3B,KAGC,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAjB,EAAyB,MAAM,GAAG,CAAlC,CAAD,CAAN,GAA+C,WAA/C,IAA8D,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAH1F,CADF,CApBkC,CAyB9C;;AACY,kBAAM,cAAc,GAClB,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD,SAAnD,IACA,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,EAAyC,QAAzC,CAAkD,GAAlD,CADD,IAEA,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAA7B,EAAqC,QAArC,CAA8C,GAA9C,CAFD,IAGA,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAA7B,CAAD,CAAN,GAA+C,WAJjD,CA1BkC,CA+B9C;;AACY,kBAAM,cAAc,GAClB,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,CAAD,CAAN,IAAoD,SAApD,IACA,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,EAAyC,QAAzC,CAAkD,GAAlD,CADD,IAEA,UAAU,CAAC,MAAM,GAAG,CAAV,CAAV,KAA2B,GAF3B,IAGA,MAAM,CAAC,UAAU,CAAC,KAAX,CAAiB,MAAM,GAAG,CAA1B,EAA6B,MAAM,GAAG,CAAtC,CAAD,CAAN,GAAmD,WAJrD;;AAMA,kBACG,MAAM,CAAC,WAAD,CAAN,GAAsB,CAAtB,IAA2B,KAAK,gBAAjC,IACA,WADA,IAEA,cAFA,IAGA,cAHA,IAIA,cAJA,IAKA,cANF,EAOE;AACA,gBAAA,MAAM,IAAI,CAAV;;AACA,qBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,gBAAA,EAAC;;AACD,oBAAI,KAAK,gBAAT,EAA2B;AACzB,kBAAA,MAAM,IAAI,GAAV;AACD;;AACD;AACD;AACF;;AACD,YAAA,MAAM,IAAI,WAAV;AACA,YAAA,MAAM;AACP,WAlHM,MAkHA,IAAI,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,cAAc,CAAC,MAAD,CAAjD,MAA+D,CAAC,CAApE,EAAuE;AAC5E,YAAA,MAAM,IAAI,cAAc,CAAC,MAAD,CAAxB;AACA,YAAA,MAAM;;AACN,iBAAK,UAAL,CAAgB,cAAhB,EAAgC,MAAhC,EAAwC,UAAU,CAAC,MAAnD;;AACA,YAAA,EAAC;AACF,WALM,MAKA,IACL,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,WAAnC,IAAkD,CAAC,CAAnD,IACA,KAAK,qBAAL,CAA2B,cAAc,CAAC,MAAD,CAAzC,CADA,IAEA,KAAK,qBAAL,CAA2B,cAAc,CAAC,MAAD,CAAzC,EAAmD,QAH9C,EAIL;AACA,gBACE,CAAC,CAAC,UAAU,CAAC,MAAD,CAAZ,IACA,cAAc,KAAK,iBADnB,IAEA,cAAc,KAAK,gBAFnB,IAGA,cAAc,KAAK,oBAJrB,EAKE;AACA,cAAA,MAAM,IAAI,UAAU,CAAC,MAAD,CAApB;AACD;;AACD,YAAA,MAAM;AACN,YAAA,EAAC;AACF,WAfM,MAeA,IACL,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACA,KAAK,gBAAL,CAAsB,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,CAAtB,CADA,IAEA,KAAK,gBAAL,CAAsB,WAAtB,MAAuC,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,CAFvC,IAGA,KAJK,EAKL;AACA,YAAA,MAAM,IAAI,CAAV;AACA,YAAA,MAAM,IAAI,WAAV;AACD,WARM,MAQA,IACL,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,MAAoC,GAApC,IACA,KAAK,gBAAL,CAAsB,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,CAAtB,CADA,IAEA,KAAK,gBAAL,CAAsB,WAAtB,MAAuC,KAAK,cAAL,CAAoB,MAAM,GAAG,CAA7B,CAFvC,IAGA,KAJK,EAKL;AACA,YAAA,MAAM,IAAI,CAAV;AACA,YAAA,MAAM,IAAI,WAAV;AACD,WARM,MAQA,IACL,KAAK,aAAL,IACA,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,WAAnC,IAAkD,CADlD,IAEA,WAAW,KAAK,KAAK,oBAHhB,EAIL;AACA,YAAA,QAAQ,GAAG,IAAX;AACD;AACF;AACF;;AACD,UACE,MAAM,CAAC,MAAP,GAAgB,CAAhB,KAAsB,cAAc,CAAC,MAArC,IACA,KAAK,qBAAL,CAA2B,OAA3B,CAAmC,cAAc,CAAC,cAAc,CAAC,MAAf,GAAwB,CAAzB,CAAjD,MAAkF,CAAC,CAFrF,EAGE;AACA,QAAA,MAAM,IAAI,cAAc,CAAC,cAAc,CAAC,MAAf,GAAwB,CAAzB,CAAxB;AACD;;AAED,UAAI,WAAW,GAAW,QAAQ,GAAG,CAArC;;AAEA,aAAO,KAAK,MAAL,CAAY,GAAZ,CAAgB,WAAhB,CAAP,EAAqC;AACnC,QAAA,KAAK;AACL,QAAA,WAAW;AACZ;;AAED,UAAI,WAAW,GAAW,UAAU,GAAG,MAAH,GAAY,KAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,IAA4B,KAA5B,GAAoC,CAApF;;AACA,UAAI,QAAJ,EAAc;AACZ,QAAA,WAAW;AACZ;;AAED,MAAA,EAAE,CAAC,WAAD,EAAc,cAAd,CAAF;;AACA,UAAI,KAAK,GAAG,CAAZ,EAAe;AACb,aAAK,MAAL,CAAY,KAAZ;AACD;;AACD,UAAI,WAAW,GAAG,KAAlB;;AACA,UAAI,UAAJ,EAAgB;AACd,QAAA,WAAW,GAAG,UAAU,CAAC,KAAX,CAAiB,UAAC,IAAD;AAAA,iBAAU,MAAI,CAAC,qBAAL,CAA2B,QAA3B,CAAoC,IAApC,CAAV;AAAA,SAAjB,CAAd;AACD;;AACD,UAAI,GAAG,aAAM,KAAK,MAAX,SAAoB,WAAW,GAAG,EAAH,GAAQ,MAAvC,SAAgD,KAAK,MAArD,CAAP;;AACA,UAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,QAAA,GAAG,aAAM,KAAK,MAAX,SAAoB,MAApB,CAAH;AACD;;AACD,aAAO,GAAP;AACD;;;WAEM,0BAAiB,WAAjB,EAAoC;AACzC,aAAO,KAAK,qBAAL,CAA2B,IAA3B,CAAgC,UAAC,GAAD;AAAA,eAAiB,GAAG,KAAK,WAAzB;AAAA,OAAhC,CAAP;AACD;;;WAES,0BAAiB,WAAjB,EAAsC,UAAtC,EAAwD;AAChE,WAAK,qBAAL,GAA6B,KAAK,aAAL,GAAqB,KAAK,aAA1B,GAA0C,KAAK,qBAA5E;AACA,aACE,KAAK,qBAAL,CAA2B,UAA3B,KACA,KAAK,qBAAL,CAA2B,UAA3B,EAAuC,OADvC,IAEA,KAAK,qBAAL,CAA2B,UAA3B,EAAuC,OAAvC,CAA+C,IAA/C,CAAoD,WAApD,CAHF;AAKD;;;WA+EO,yBAAgB,GAAhB,EAA2B;AAAA;;AACjC,aAAO,GAAG,CACP,KADI,CACE,EADF,EAEJ,MAFI,CAEG,UAAC,CAAD,EAAY,GAAZ,EAAuB;AAC7B,eACE,CAAC,CAAC,KAAF,CAAQ,QAAR,KACA,CAAC,CAAC,KAAF,CAAQ,KAAR,CADA,IAEA,CAAC,KAAK,GAFN,IAGA,CAAC,KAAK,GAHN,IAIC,CAAC,KAAK,GAAN,IAAa,GAAG,KAAK,CAArB,IAA0B,MAAI,CAAC,oBALlC;AAOD,OAVI,EAWJ,IAXI,CAWC,EAXD,CAAP;AAYD;;;WAEO,iCAAwB,IAAxB,EAAoC;AAC1C,UAAI,IAAJ,EAAU;AACR,YAAM,aAAa,GAAG,cAAtB;AACA,eAAO,IAAI,KAAK,GAAT,GAAe,KAAf,GAAuB,aAAa,CAAC,OAAd,CAAsB,IAAtB,KAA+B,CAA/B,GAAmC,OAAO,IAA1C,GAAiD,IAA/E;AACD;;AACD,aAAO,IAAP;AACD;;;WAEO,oBAAW,cAAX,EAAmC,MAAnC,EAAmD,WAAnD,EAAsE;AAC5E,UAAM,SAAS,GAAW,QAAQ,IAAR,CAAa,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,MAAxB,CAAb,IAAgD,WAAhD,GAA8D,MAAxF;;AACA,WAAK,MAAL,CAAY,GAAZ,CAAgB,SAAS,GAAG,KAAK,MAAL,CAAY,MAAxB,IAAkC,CAAlD;AACD;;;;;;mCA1fF,0B,CAAU,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,kBAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA;AAAA,C;;;;8BACT;;;AAAC,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACU;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAyBS,MAzBT;AAyBe,MAAA,IAAA,EAAA,CAAC,MAAD;AAzBf,KAAA;AAAA,GADV,CAAA;AAAA,CAAA;;;;;;;;;;;;;;AA0B0C,C;;ICvBhC,W;;;;;AAgBX,uBAC4B,QAD5B,EAE4B,OAF5B,EAGU,WAHV,EAIU,SAJV,EAI8B;AAAA;;AAAA;;AAE5B,+BAAM,OAAN;AAL0B,WAAA,QAAA,GAAA,QAAA;AACA,WAAA,OAAA,GAAA,OAAA;AAClB,WAAA,WAAA,GAAA,WAAA;AACA,WAAA,SAAA,GAAA,SAAA;AAnBH,WAAA,cAAA,GAAyB,EAAzB;AACA,WAAA,aAAA,GAAyB,KAAzB;AACA,WAAA,oBAAA,GAA+B,GAA/B;AACA,WAAA,WAAA,GAAsB,EAAtB;AACA,WAAA,QAAA,GAA0B,IAA1B;AACA,WAAA,MAAA,GAAwB,IAAxB;AACT;AAEK;AACM;AAEA;;AAAF,WAAA,YAAA,GAAwB,KAAxB;;AAEA,WAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;;AAMuB;AAG7B,G,CACH;;;;;WAES,mBACL,UADK,EAEL,cAFK,EAMkB;AAAA;;AAAA,UAHvB,QAGuB,uEAHJ,CAGI;AAAA,UAFvB,UAEuB,uEAFV,KAEU;AAAA,UADvB,UACuB,uEADV,KACU;AAAA,UAAvB,EAAuB,uEAAR,YAAA,CAAQ,CAAA;;AAEvB,UAAI,CAAC,cAAL,EAAqB;AACnB,eAAO,UAAP;AACD;;AACD,WAAK,WAAL,GAAmB,KAAK,aAAL,GAAqB,KAAK,eAAL,EAArB,GAA8C,EAAjE;;AACA,UAAI,KAAK,cAAL,KAAwB,IAAxB,IAAgC,KAAK,aAAzC,EAAwD;AACtD,aAAK,WAAL,GAAmB,KAAK,eAAL,CAAqB,UAAU,IAAI,GAAnC,CAAnB;AACD;;AACD,UAAI,KAAK,cAAL,KAAwB,UAAxB,IAAsC,KAAK,aAA/C,EAA8D;AAC5D,aAAK,WAAL,GAAmB,KAAK,eAAL,CAAqB,UAAU,IAAI,GAAnC,CAAnB;AACD;;AACD,UAAI,CAAC,UAAD,IAAe,KAAK,aAAxB,EAAuC;AACrC,aAAK,iBAAL,CAAuB,KAAK,MAA5B;AACA,eAAO,KAAK,MAAL,GAAc,KAAK,WAA1B;AACD;;AACD,UAAM,SAAS,GAAW,CAAC,CAAC,UAAF,IAAgB,OAAO,KAAK,QAAZ,KAAyB,QAAzC,GAAoD,UAAU,CAAC,KAAK,QAAN,CAA9D,GAAgF,EAA1G;AACA,UAAI,aAAa,GAAG,EAApB;;AACA,UAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAClC,YAAI,YAAY,GAAa,KAAK,WAAL,CAAiB,KAAjB,CAAuB,EAAvB,CAA7B,CADkC,CAExC;;AACM,QAAA,UAAU,KAAK,EAAf,IAAqB,YAAY,CAAC,MAAlC,GACI,OAAO,KAAK,QAAZ,KAAyB,QAAzB,IAAqC,OAAO,KAAK,MAAZ,KAAuB,QAA5D,GACE,UAAU,CAAC,MAAX,GAAoB,YAAY,CAAC,MAAjC,GACE,YAAY,CAAC,MAAb,CAAoB,KAAK,QAAzB,EAAmC,CAAnC,EAAsC,SAAtC,CADF,GAEE,UAAU,CAAC,MAAX,GAAoB,YAAY,CAAC,MAAjC,GACA,YAAY,CAAC,MAAb,GAAsB,UAAU,CAAC,MAAjC,KAA4C,CAA5C,GACE,YAAY,CAAC,MAAb,CAAoB,KAAK,QAAL,GAAgB,CAApC,EAAuC,CAAvC,CADF,GAEE,YAAY,CAAC,MAAb,CAAoB,KAAK,QAAzB,EAAmC,KAAK,MAAL,GAAc,KAAK,QAAtD,CAHF,GAIA,IAPJ,GAQE,IATN,GAUK,YAAY,GAAG,EAVpB,CAHkC,CAcxC;;AACM,QAAA,aAAa,GAAG,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,iBAAL,CAAuB,YAAY,CAAC,IAAb,CAAkB,EAAlB,CAAvB,CAA1B,GAA0E,UAA1F;AACD;;AACD,MAAA,aAAa,GAAG,OAAO,CAAC,aAAD,CAAP,IAA0B,aAAa,CAAC,MAAxC,GAAiD,aAAjD,GAAiE,UAAjF;;AACA,UAAM,MAAM,8EAA2B,aAA3B,EAA0C,cAA1C,EAA0D,QAA1D,EAAoE,UAApE,EAAgF,UAAhF,EAA4F,EAA5F,CAAZ;;AACA,WAAK,WAAL,GAAmB,KAAK,cAAL,CAAoB,MAApB,CAAnB,CArCuB,CAsC3B;AAEG;;AACC,UAAI,KAAK,iBAAL,KAA2B,GAA3B,IAAkC,KAAK,aAAL,KAAuB,GAA7D,EAAkE;AAChE,aAAK,aAAL,GAAqB,GAArB;AACD,OA3CsB,CA4C3B;;;AAEI,UAAI,KAAK,cAAL,CAAoB,UAApB,CAA+B,WAA/B,KAA+C,KAAK,qBAAL,KAA+B,IAAlF,EAAwF;AACtF,aAAK,qBAAL,GAA6B,KAAK,qBAAL,CAA2B,MAA3B,CAAkC,UAAC,IAAD;AAAA,iBAAkB,IAAI,KAAK,MAAI,CAAC,aAAhC;AAAA,SAAlC,CAA7B;AACD;;AAED,WAAK,iBAAL,CAAuB,MAAvB;;AAEA,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,YAAI,KAAK,WAAT,EAAsB;AACpB,iBAAO,MAAM,IAAI,MAAM,CAAC,MAAjB,GAA0B,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,cAA5B,CAA1B,GAAwE,MAA/E;AACD;;AACD,eAAO,MAAP;AACD;;AACD,UAAM,MAAM,GAAW,MAAM,CAAC,MAA9B;AACA,UAAM,SAAS,GAAW,KAAK,MAAL,GAAc,KAAK,WAA7C;;AAEA,UAAI,KAAK,cAAL,CAAoB,QAApB,CAA6B,GAA7B,CAAJ,EAAuC;AACrC,YAAM,iBAAiB,GAAG,KAAK,oBAAL,CAA0B,MAA1B,CAA1B;;AACA,eAAO,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,MAAM,GAAG,iBAAzB,CAAhB;AACD,OAHD,MAGO,IAAI,KAAK,cAAL,KAAwB,IAAxB,IAAgC,KAAK,cAAL,KAAwB,UAA5D,EAAwE;AAC7E,eAAO,MAAM,GAAG,SAAhB;AACD;;AACD,aAAO,MAAM,GAAG,SAAS,CAAC,KAAV,CAAgB,MAAhB,CAAhB;AACD,K,CACH;;;;WAEU,8BAAqB,KAArB,EAAkC;AACxC,UAAM,KAAK,GAAG,eAAd;AACA,UAAI,KAAK,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAZ;AACA,UAAI,iBAAiB,GAAG,CAAxB;;AACA,aAAO,KAAK,IAAI,IAAhB,EAAsB;AACpB,QAAA,iBAAiB,IAAI,CAArB;AACA,QAAA,KAAK,GAAG,KAAK,CAAC,IAAN,CAAW,KAAX,CAAR;AACD;;AACD,aAAO,iBAAP;AACD;;;WAEM,6BAIkB;AAAA,UAHvB,QAGuB,uEAHJ,CAGI;AAAA,UAFvB,UAEuB;AAAA,UADvB,UACuB;AAAA,UAAvB,EAAuB,uEAAR,YAAA,CAAQ,CAAA;AAEvB,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,aAArC;AACA,MAAA,WAAW,CAAC,KAAZ,GAAoB,KAAK,SAAL,CAAe,WAAW,CAAC,KAA3B,EAAkC,KAAK,cAAvC,EAAuD,QAAvD,EAAiE,UAAjE,EAA6E,UAA7E,EAAyF,EAAzF,CAApB;;AACA,UAAI,WAAW,KAAK,KAAK,QAAL,CAAc,aAAlC,EAAiD;AAC/C;AACD;;AACD,WAAK,iBAAL;AACD;;;WAEM,mBAAU,UAAV,EAA8B,cAA9B,EAAoD;AAAA;;AACzD,aAAO,UAAU,CACd,KADI,CACE,EADF,EAEJ,GAFI,CAEA,UAAC,IAAD,EAAe,KAAf,EAA4B;AAC/B,YACE,MAAI,CAAC,qBAAL,IACA,MAAI,CAAC,qBAAL,CAA2B,cAAc,CAAC,KAAD,CAAzC,CADA,IAEA,MAAI,CAAC,qBAAL,CAA2B,cAAc,CAAC,KAAD,CAAzC,EAAkD,MAHpD,EAIE;AACA,iBAAO,MAAI,CAAC,qBAAL,CAA2B,cAAc,CAAC,KAAD,CAAzC,EAAkD,MAAzD;AACD;;AACD,eAAO,IAAP;AACD,OAXI,EAYJ,IAZI,CAYC,EAZD,CAAP;AAaD,K,CACH;;;;WAES,wBAAe,GAAf,EAA0B;AAAA;;AAC/B,UAAM,OAAO,GAAa,GAAG,CAC1B,KADuB,CACjB,EADiB,EAEvB,MAFuB,CAGtB,UAAC,MAAD,EAAiB,CAAjB;AAAA,eACE,MAAI,CAAC,gBAAL,CAAsB,MAAtB,EAA8B,MAAI,CAAC,cAAL,CAAoB,CAApB,CAA9B,KACC,MAAI,CAAC,qBAAL,CAA2B,QAA3B,CAAoC,MAAI,CAAC,cAAL,CAAoB,CAApB,CAApC,KAA+D,MAAM,KAAK,MAAI,CAAC,cAAL,CAAoB,CAApB,CAF7E;AAAA,OAHsB,CAA1B;;AAOA,UAAI,OAAO,CAAC,IAAR,CAAa,EAAb,MAAqB,GAAzB,EAA8B;AAC5B,eAAO,OAAO,CAAC,IAAR,CAAa,EAAb,CAAP;AACD;;AACD,aAAO,GAAP;AACD;;;WAEM,2BAAkB,UAAlB,EAAoC;AAAA;;AACzC,UAAI,eAAe,GAAG,EAAtB;AACA,UAAM,aAAa,GAChB,UAAU,IACT,UAAU,CAAC,KAAX,CAAiB,EAAjB,EAAqB,GAArB,CAAyB,UAAC,UAAD,EAAqB,KAArB,EAAkC;AACzD,YACE,MAAI,CAAC,qBAAL,CAA2B,QAA3B,CAAoC,UAAU,CAAC,KAAK,GAAG,CAAT,CAA9C,KACA,UAAU,CAAC,KAAK,GAAG,CAAT,CAAV,KAA0B,MAAI,CAAC,cAAL,CAAoB,KAAK,GAAG,CAA5B,CAF5B,EAGE;AACA,UAAA,eAAe,GAAG,UAAlB;AACA,iBAAO,UAAU,CAAC,KAAK,GAAG,CAAT,CAAjB;AACD;;AACD,YAAI,eAAe,CAAC,MAApB,EAA4B;AAC1B,cAAM,aAAa,GAAW,eAA9B;AACA,UAAA,eAAe,GAAG,EAAlB;AACA,iBAAO,aAAP;AACD;;AACD,eAAO,UAAP;AACD,OAdD,CADF,IAgBA,EAjBF;AAkBA,aAAO,aAAa,CAAC,IAAd,CAAmB,EAAnB,CAAP;AACD;;;WAEM,yBAAgB,QAAhB,EAAiC;AACtC,UAAI,KAAK,aAAL,IAAsB,CAAC,CAAC,KAAK,mBAAjC,EAAsD;AACpD,YAAI,KAAK,cAAL,CAAoB,MAApB,KAA+B,KAAK,mBAAL,CAAyB,MAA5D,EAAoE;AAClE,gBAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACD,SAFD,MAEO;AACL,iBAAO,KAAK,mBAAZ;AACD;AACF,OAND,MAMO,IAAI,KAAK,aAAT,EAAwB;AAC7B,YAAI,QAAJ,EAAc;AACZ,cAAI,KAAK,cAAL,KAAwB,IAA5B,EAAkC;AAChC,mBAAO,KAAK,WAAL,CAAiB,QAAjB,CAAP;AACD;;AACD,cAAI,KAAK,cAAL,KAAwB,UAA5B,EAAwC;AACtC,mBAAO,KAAK,gBAAL,CAAsB,QAAtB,CAAP;AACD;AACF;;AACD,eAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAA5B,EAAmC,KAAK,oBAAxC,CAAP;AACD;;AACD,aAAO,EAAP;AACD;;;WAEM,6BAAiB;AACtB,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,aAArC;;AACA,UACE,KAAK,eAAL,IACA,KAAK,MAAL,CAAY,MAAZ,GAAqB,KAAK,cAAL,CAAoB,MAAzC,GAAkD,KAAK,MAAL,CAAY,MAA9D,KACE,WAAW,CAAC,KAAZ,CAAkB,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,EAAoC,MAHxC,EAIE;AACA,aAAK,mBAAL,GAA2B,CAAC,OAAD,EAAU,EAAV,CAA3B;AACA,aAAK,SAAL,CAAe,WAAW,CAAC,KAA3B,EAAkC,KAAK,cAAvC;AACD;AACF;;;SAED,mBAAwE;AAAA;;AAAA;AAAA,UAAxC,IAAwC;AAAA,UAAlC,KAAkC;;AACtE,MAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB;AAAA,eAAM,MAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,MAAI,CAAC,WAAL,CAAiB,aAA5C,EAA2D,IAA3D,EAAiE,KAAjE,CAAN;AAAA,OAAvB;AACD;;;WAEM,gCAAuB,IAAvB,EAAmC;AAAA;;AACxC,UAAM,KAAK,GAAa,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,MAAf,CAAsB,UAAC,IAAD;AAAA,eAAkB,OAAI,CAAC,gBAAL,CAAsB,IAAtB,CAAlB;AAAA,OAAtB,CAAxB;AACA,aAAO,KAAK,CAAC,MAAb;AACD;;;WAEM,oBAAW,UAAX,EAA6B;AAClC,aAAO,KAAK,WAAL,CACL,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,UAAnB,CAAnB,CADK,EAEL,KAAK,qBAAL,CAA2B,MAA3B,CAAkC,GAAlC,EAAuC,MAAvC,CAA8C,KAAK,oBAAnD,CAFK,CAAP;AAID;;;WAEO,qBAAY,QAAZ,EAA4B;AAClC,UAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB,yBAAU,KAAK,oBAAf,cAAuC,KAAK,oBAA5C,cAAoE,KAAK,oBAAzE,cAAiG,KAAK,oBAAtG;AACD;;AACD,UAAM,GAAG,GAAa,EAAtB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAZ,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,UAAA,GAAG,CAAC,IAAJ,CAAS,QAAQ,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,UAAI,GAAG,CAAC,MAAJ,IAAc,CAAlB,EAAqB;AACnB,yBAAU,KAAK,oBAAf,cAAuC,KAAK,oBAA5C,cAAoE,KAAK,oBAAzE;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAc,CAApC,EAAuC;AACrC,yBAAU,KAAK,oBAAf,cAAuC,KAAK,oBAA5C;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAc,CAApC,EAAuC;AACrC,eAAO,KAAK,oBAAZ;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAc,EAApC,EAAwC;AACtC,eAAO,EAAP;AACD;;AACD,aAAO,EAAP;AACD;;;WAEO,0BAAiB,QAAjB,EAAiC;AACvC,UAAM,GAAG,GACP,UAAG,KAAK,oBAAR,SAA+B,KAAK,oBAApC,SAA2D,KAAK,oBAAhE,eACI,KAAK,oBADT,SACgC,KAAK,oBADrC,SAC4D,KAAK,oBADjE,eAEI,KAAK,oBAFT,SAEgC,KAAK,oBAFrC,SAE4D,KAAK,oBAFjE,eAGI,KAAK,oBAHT,SAGgC,KAAK,oBAHrC,CADF;AAKA,UAAM,IAAI,GACR,UAAG,KAAK,oBAAR,SAA+B,KAAK,oBAApC,eACI,KAAK,oBADT,SACgC,KAAK,oBADrC,SAC4D,KAAK,oBADjE,eAEI,KAAK,oBAFT,SAEgC,KAAK,oBAFrC,SAE4D,KAAK,oBAFjE,eAGI,KAAK,oBAHT,SAGgC,KAAK,oBAHrC,SAG4D,KAAK,oBAHjE,SAGwF,KAAK,oBAH7F,eAII,KAAK,oBAJT,SAIgC,KAAK,oBAJrC,CADF;;AAOA,UAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB,eAAO,GAAP;AACD;;AACD,UAAM,GAAG,GAAa,EAAtB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,YAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAZ,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B,UAAA,GAAG,CAAC,IAAJ,CAAS,QAAQ,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,UAAI,GAAG,CAAC,MAAJ,IAAc,CAAlB,EAAqB;AACnB,eAAO,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAd,EAAsB,GAAG,CAAC,MAA1B,CAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAc,CAApC,EAAuC;AACrC,eAAO,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAJ,GAAa,CAAvB,EAA0B,GAAG,CAAC,MAA9B,CAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAc,CAApC,EAAuC;AACrC,eAAO,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAJ,GAAa,CAAvB,EAA0B,GAAG,CAAC,MAA9B,CAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,GAAa,EAAnC,EAAuC;AACrC,eAAO,GAAG,CAAC,KAAJ,CAAU,GAAG,CAAC,MAAJ,GAAa,CAAvB,EAA0B,GAAG,CAAC,MAA9B,CAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,KAAe,EAAnB,EAAuB;AACrB,eAAO,EAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,KAAe,EAAnB,EAAuB;AACrB,YAAI,QAAQ,CAAC,MAAT,KAAoB,EAAxB,EAA4B;AAC1B,iBAAO,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,IAAI,CAAC,MAApB,CAAP;AACD;;AACD,eAAO,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,IAAI,CAAC,MAApB,CAAP;AACD;;AACD,UAAI,GAAG,CAAC,MAAJ,GAAa,EAAb,IAAmB,GAAG,CAAC,MAAJ,IAAc,EAArC,EAAyC;AACvC,eAAO,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,MAAJ,GAAa,CAAxB,EAA2B,IAAI,CAAC,MAAhC,CAAP;AACD;;AACD,aAAO,EAAP;AACD;AACH;AAEC;AACE;AACE;AACE;AACE;AAEJ;;;;WAAK,2BAAkB,UAAlB,EAAoC;AAC1C,UAAI,KAAK,YAAT,EAAuB;AACrB;AACD;;AACD,UAAI,KAAK,CAAC,OAAN,CAAc,KAAK,qBAAnB,CAAJ,EAA+C;AAC7C,aAAK,QAAL,CACE,KAAK,SAAL,CAAe,KAAK,WAAL,CAAiB,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,UAAnB,CAAnB,CAAjB,EAAqE,KAAK,qBAA1E,CAAf,CADF;AAGD,OAJD,MAIO,IAAI,KAAK,qBAAT,EAAgC;AACrC,aAAK,QAAL,CAAc,KAAK,SAAL,CAAe,KAAK,aAAL,CAAmB,UAAnB,CAAf,CAAd;AACD,OAFM,MAEA;AACL,aAAK,QAAL,CAAc,KAAK,aAAL,CAAmB,UAAnB,CAAd;AACD;AACF;;;WAEO,mBAAU,KAAV,EAAmD;AACzD,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,eAAO,KAAP;AACD;;AACD,UAAM,GAAG,GAAG,MAAM,CAAC,KAAD,CAAlB;AACA,aAAO,MAAM,CAAC,KAAP,CAAa,GAAb,IAAoB,KAApB,GAA4B,GAAnC;AACD;;;WAEO,qBAAY,KAAZ,EAA2B,0BAA3B,EAA+D;AACrE,aAAO,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,KAAK,gBAAL,CAAsB,0BAAtB,CAAd,EAAiE,EAAjE,CAAH,GAA0E,KAAtF;AACD;;;WAEO,uBAAc,KAAd,EAA2B;AACjC,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,eAAO,KAAP;AACD;;AACD,aAAO,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,KAAK,MAAnB,EAA2B,EAA3B,CAAH,GAAoC,KAAhD;AACD;;;WAEO,uBAAc,KAAd,EAA2B;AACjC,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,eAAO,KAAP;AACD;;AACD,aAAO,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,KAAK,MAAnB,EAA2B,EAA3B,CAAH,GAAoC,KAAhD;AACD;;;WAEO,iCAAwB,MAAxB,EAAsC;AAC5C,aAAO,KAAK,WAAL,CAAiB,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,MAAnB,CAAnB,CAAjB,EAAiE,KAAK,qBAAtE,CAAP;AACD;;;WAEO,0BAAiB,0BAAjB,EAAqD;AAC3D,aAAO,IAAI,MAAJ,CAAW,0BAA0B,CAAC,GAA3B,CAA+B,UAAC,IAAD;AAAA,2BAAuB,IAAvB;AAAA,OAA/B,EAA8D,IAA9D,CAAmE,GAAnE,CAAX,EAAoF,IAApF,CAAP;AACD;;;WAEO,uBAAc,MAAd,EAA4B;AAClC,UAAI,MAAM,KAAK,EAAf,EAAmB;AACjB,eAAO,MAAP;AACD;;AAED,UAAM,kBAAkB,GAAkB,KAAK,2BAAL,CAAiC,KAAK,cAAtC,CAA1C;;AACA,UAAI,cAAc,GAAW,KAAK,uBAAL,CAA6B,MAA7B,CAA7B;;AACA,UAAI,KAAK,aAAL,KAAuB,GAA3B,EAAgC;AAC9B,QAAA,cAAc,GAAG,cAAc,CAAC,OAAf,CAAuB,KAAK,aAA5B,EAA2C,GAA3C,CAAjB;AACD;;AAED,UAAI,CAAC,KAAK,aAAV,EAAyB;AACvB,eAAO,cAAP;AACD;;AACD,UAAI,kBAAJ,EAAwB;AACtB,YAAI,MAAM,KAAK,KAAK,aAApB,EAAmC;AACjC,iBAAO,IAAP;AACD;;AACD,eAAO,KAAK,eAAL,CAAqB,KAAK,cAA1B,EAA0C,cAA1C,CAAP;AACD,OALD,MAKO;AACL,eAAO,MAAM,CAAC,cAAD,CAAb;AACD;AACF,K,CACH;;;;WAEU,qCAA4B,aAA5B,EAAiD;AACvD,UAAM,OAAO,GAA4B,aAAa,CAAC,KAAd,CAAoB,IAAI,MAAJ,wBAApB,CAAzC;AACA,aAAO,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAD,CAAR,CAAT,GAAwB,IAAtC;AACD;;;WAEO,yBAAgB,mBAAhB,EAA6C,cAA7C,EAAmE;AACzE,UAAI,mBAAmB,CAAC,OAApB,CAA4B,GAA5B,IAAmC,CAAvC,EAA0C;AACxC,eAAO,MAAM,CAAC,cAAD,CAAN,CAAuB,OAAvB,CAA+B,CAA/B,CAAP;AACD;;AACD,aAAO,MAAM,CAAC,cAAD,CAAb;AACD;;;;EA5Y8B,kB;;4BADhC,mB,CAAA,C,EAAU;AAAA,SAAA,KAAA,CAAA,IAAA,WAAA,EAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA;AAAA,C;;;;uBACT;;;AAAC,WAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAqC;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAiBnC,MAjBmC;AAiB7B,MAAA,IAAA,EAAA,CAAC,QAAD;AAjB6B,KAAA;AAAA,GAArC,EAiB0B;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EACxB,MADwB;AAClB,MAAA,IAAA,EAAA,CAAC,MAAD;AADkB,KAAA;AAAA,GAjB1B,EAkBwB;AAAA,IAAA,IAAA,EAzBlB;AAyBkB,GAlBxB,EAPoB;AAAA,IAAA,IAAA,EAAkB;AAAlB,GAOpB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;AAPoD,C,KCevD;AACA;;;IAiBa,a;AA4BX,yBAC4B,QAD5B,EAEU,YAFV,EAG4B,OAH5B,EAG4C;AAAA;;AAFhB,SAAA,QAAA,GAAA,QAAA;AAClB,SAAA,YAAA,GAAA,YAAA;AACkB,SAAA,OAAA,GAAA,OAAA;AA9BN,SAAA,cAAA,GAAyB,EAAzB;AACN,SAAA,iBAAA,GAAkD,EAAlD;AACA,SAAA,QAAA,GAAgC,EAAhC;AACA,SAAA,MAAA,GAA4B,EAA5B;AACA,SAAA,MAAA,GAA4B,EAA5B;AACA,SAAA,iBAAA,GAAkD,GAAlD;AACA,SAAA,aAAA,GAA0C,GAA1C;AACA,SAAA,qBAAA,GAAiE,IAAjE;AACA,SAAA,WAAA,GAA6C,IAA7C;AACA,SAAA,aAAA,GAAiD,IAAjD;AACA,SAAA,oBAAA,GAA+D,IAA/D;AACA,SAAA,mBAAA,GAA6D,IAA7D;AACA,SAAA,YAAA,GAA+C,IAA/C;AACA,SAAA,eAAA,GAAqD,IAArD;AACA,SAAA,UAAA,GAA2C,IAA3C;AACA,SAAA,cAAA,GAAmD,IAAnD;AACA,SAAA,oBAAA,GAA+D,IAA/D;AACA,SAAA,gBAAA,GAAuD,IAAvD;AACR,SAAA,UAAA,GAAqB,EAArB;AAEA,SAAA,SAAA,GAA2B,IAA3B;AAIA,SAAA,oBAAA,GAAiC,EAAjC;AACA,SAAA,WAAA,GAAuB,KAAvB;;AAQD,SAAA,QAAA,GAAW,UAAC,CAAD,EAAO,CAAO,CAAzB;;AACA,SAAA,OAAA,GAAU,YAAA,CAAQ,CAAlB;AAHH;;;;WAKG,qBAAY,OAAZ,EAAkC;AACvC,UACE,cADF,GAmBI,OAnBJ,CACE,cADF;AAAA,UAEE,iBAFF,GAmBI,OAnBJ,CAEE,iBAFF;AAAA,UAGE,QAHF,GAmBI,OAnBJ,CAGE,QAHF;AAAA,UAIE,MAJF,GAmBI,OAnBJ,CAIE,MAJF;AAAA,UAKE,MALF,GAmBI,OAnBJ,CAKE,MALF;AAAA,UAME,iBANF,GAmBI,OAnBJ,CAME,iBANF;AAAA,UAOE,aAPF,GAmBI,OAnBJ,CAOE,aAPF;AAAA,UAQE,qBARF,GAmBI,OAnBJ,CAQE,qBARF;AAAA,UASE,WATF,GAmBI,OAnBJ,CASE,WATF;AAAA,UAUE,aAVF,GAmBI,OAnBJ,CAUE,aAVF;AAAA,UAWE,oBAXF,GAmBI,OAnBJ,CAWE,oBAXF;AAAA,UAYE,mBAZF,GAmBI,OAnBJ,CAYE,mBAZF;AAAA,UAaE,YAbF,GAmBI,OAnBJ,CAaE,YAbF;AAAA,UAcE,eAdF,GAmBI,OAnBJ,CAcE,eAdF;AAAA,UAeE,UAfF,GAmBI,OAnBJ,CAeE,UAfF;AAAA,UAgBE,cAhBF,GAmBI,OAnBJ,CAgBE,cAhBF;AAAA,UAiBE,oBAjBF,GAmBI,OAnBJ,CAiBE,oBAjBF;AAAA,UAkBE,gBAlBF,GAmBI,OAnBJ,CAkBE,gBAlBF;;AAoBA,UAAI,cAAJ,EAAoB;AAClB,aAAK,UAAL,GAAkB,cAAc,CAAC,YAAf,IAA+B,EAAjD;;AACA,YAAI,cAAc,CAAC,YAAf,IAA+B,cAAc,CAAC,YAAf,CAA4B,KAA5B,CAAkC,IAAlC,EAAwC,MAAxC,GAAiD,CAApF,EAAuF;AACrF,eAAK,oBAAL,GAA4B,cAAc,CAAC,YAAf,CAA4B,KAA5B,CAAkC,IAAlC,EAAwC,IAAxC,CAA6C,UAAC,CAAD,EAAY,CAAZ,EAAqB;AAC5F,mBAAO,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAApB;AACD,WAF2B,CAA5B;AAGA,eAAK,UAAL,GAAkB,KAAK,oBAAL,CAA0B,CAA1B,CAAlB;AACA,eAAK,cAAL,GAAsB,KAAK,oBAAL,CAA0B,CAA1B,CAAtB;AACA,eAAK,YAAL,CAAkB,cAAlB,GAAmC,KAAK,oBAAL,CAA0B,CAA1B,CAAnC;AACD;AACF;;AACD,UAAI,iBAAJ,EAAuB;AACrB,YAAI,CAAC,iBAAiB,CAAC,YAAnB,IAAmC,CAAC,KAAK,CAAC,OAAN,CAAc,iBAAiB,CAAC,YAAhC,CAAxC,EAAuF;AACrF;AACD,SAFD,MAEO;AACL,eAAK,YAAL,CAAkB,qBAAlB,GAA0C,iBAAiB,CAAC,YAAlB,IAAkC,EAA5E;AACD;AACF,OAtCsC,CAuC3C;;;AACI,UAAI,QAAQ,IAAI,QAAQ,CAAC,YAAzB,EAAuC;AACrC,aAAK,YAAL,CAAkB,qBAAlB,GAA0C,QAAQ,CAAC,YAAnD;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,aAAK,YAAL,CAAkB,MAAlB,GAA2B,MAAM,CAAC,YAAlC;AACD;;AACD,UAAI,MAAJ,EAAY;AACV,aAAK,YAAL,CAAkB,MAAlB,GAA2B,MAAM,CAAC,YAAlC;AACD;;AACD,UAAI,iBAAJ,EAAuB;AACrB,aAAK,YAAL,CAAkB,iBAAlB,GAAsC,iBAAiB,CAAC,YAAxD;AACD;;AACD,UAAI,aAAJ,EAAmB;AACjB,aAAK,YAAL,CAAkB,aAAlB,GAAkC,aAAa,CAAC,YAAhD;AACD;;AACD,UAAI,qBAAJ,EAA2B;AACzB,aAAK,YAAL,CAAkB,qBAAlB,GAA0C,qBAAqB,CAAC,YAAhE;AACD;;AACD,UAAI,WAAJ,EAAiB;AACf,aAAK,YAAL,CAAkB,WAAlB,GAAgC,WAAW,CAAC,YAA5C;AACD;;AACD,UAAI,aAAJ,EAAmB;AACjB,aAAK,YAAL,CAAkB,aAAlB,GAAkC,aAAa,CAAC,YAAhD;AACD;;AACD,UAAI,oBAAJ,EAA0B;AACxB,aAAK,YAAL,CAAkB,oBAAlB,GAAyC,oBAAoB,CAAC,YAA9D;AACD;;AACD,UAAI,mBAAJ,EAAyB;AACvB,aAAK,YAAL,CAAkB,mBAAlB,GAAwC,mBAAmB,CAAC,YAA5D;AACD;;AACD,UAAI,YAAJ,EAAkB;AAChB,aAAK,YAAL,CAAkB,YAAlB,GAAiC,YAAY,CAAC,YAA9C;AACD;;AACD,UAAI,eAAJ,EAAqB;AACnB,aAAK,YAAL,CAAkB,eAAlB,GAAoC,eAAe,CAAC,YAApD;AACD;;AACD,UAAI,UAAJ,EAAgB;AACd,aAAK,YAAL,CAAkB,UAAlB,GAA+B,UAAU,CAAC,YAA1C;AACD;;AACD,UAAI,cAAJ,EAAoB;AAClB,aAAK,YAAL,CAAkB,cAAlB,GAAmC,cAAc,CAAC,YAAlD;AACD;;AACD,UAAI,oBAAJ,EAA0B;AACxB,aAAK,YAAL,CAAkB,oBAAlB,GAAyC,oBAAoB,CAAC,YAA9D;;AACA,YAAI,KAAK,YAAL,CAAkB,oBAAtB,EAA4C;AAC1C,eAAK,YAAL,CAAkB,qBAAlB,GAA0C,KAAK,YAAL,CAAkB,qBAAlB,CAAwC,MAAxC,CACxC,UAAC,CAAD;AAAA,mBAAe,CAAC,KAAK,GAArB;AAAA,WADwC,CAA1C;AAGD;AACF;;AACD,UAAI,gBAAJ,EAAsB;AACpB,aAAK,YAAL,CAAkB,gBAAlB,GAAqC,gBAAgB,CAAC,YAAtD;AACD;;AACD,WAAK,UAAL;AACD,K,CACH;;;;WAES,yBAA+B;AAAA;;AAAA,UAApB,KAAoB,SAApB,KAAoB;;AACpC,UAAI,CAAC,KAAK,YAAL,CAAkB,UAAnB,IAAiC,CAAC,KAAK,UAA3C,EAAuD;AACrD,eAAO,IAAP;AACD;;AACD,UAAI,KAAK,YAAL,CAAkB,OAAtB,EAA+B;AAC7B,eAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAP;AACD;;AACD,UAAI,KAAK,YAAL,CAAkB,YAAtB,EAAoC;AAClC,eAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAP;AACD;;AACD,UAAI,KAAK,UAAL,CAAgB,UAAhB,CAA2B,WAA3B,CAAJ,EAA6C;AAC3C,eAAO,IAAP;AACD;;AACD,UAAI,iBAAiB,CAAC,QAAlB,CAA2B,KAAK,UAAhC,CAAJ,EAAiD;AAC/C,eAAO,IAAP;AACD;;AACD,UAAI,KAAK,YAAL,CAAkB,eAAtB,EAAuC;AACrC,eAAO,IAAP;AACD;;AACD,UAAI,SAAS,CAAC,QAAV,CAAmB,KAAK,UAAxB,CAAJ,EAAyC;AACvC,eAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP;AACD;;AACD,UAAI,KAAK,IAAI,KAAK,CAAC,QAAN,GAAiB,MAAjB,IAA2B,CAAxC,EAA2C;AACzC,YAAI,YAAY,GAAG,CAAnB;;AADyC,mCAE9B,GAF8B;AAGvC,cACE,OAAI,CAAC,YAAL,CAAkB,qBAAlB,CAAwC,GAAxC,EAA6C,QAA7C,IACA,OAAI,CAAC,YAAL,CAAkB,qBAAlB,CAAwC,GAAxC,EAA6C,QAA7C,KAA0D,IAF5D,EAGE;AACA,gBAAI,OAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,OAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B,GAA5B,CAArC,EAAuE;AACrE,kBAAM,GAAG,GAAW,OAAI,CAAC,UAAL,CACjB,KADiB,CACX,EADW,EAEjB,MAFiB,CAEV,UAAC,CAAD;AAAA,uBAAe,CAAC,KAAK,GAArB;AAAA,eAFU,EAGjB,IAHiB,CAGZ,EAHY,CAApB;;AAIA,cAAA,YAAY,IAAI,GAAG,CAAC,MAApB;AACD,aAND,MAMO,IAAI,OAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AAC9C,cAAA,YAAY;AACb;;AACD,gBAAI,OAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAAlC,IAAuC,KAAK,CAAC,QAAN,GAAiB,MAAjB,IAA2B,OAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,CAAtE,EAAoG;AAClG;AAAA,mBAAO;AAAP;AACD;;AACD,gBAAI,YAAY,KAAK,OAAI,CAAC,UAAL,CAAgB,MAArC,EAA6C;AAC3C;AAAA,mBAAO;AAAP;AACD;AACF;AAtBsC;;AAEzC,aAAK,IAAM,GAAX,IAAkB,KAAK,YAAL,CAAkB,qBAApC,EAA2D;AAAA,2BAAhD,GAAgD;;AAAA;AAqB1D;;AACD,YACE,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IACA,KAAK,CAAC,QAAN,GAAiB,MAAjB,KAA4B,KAAK,UAAL,CAAgB,MAAhB,GAAyB,MAAM,CAAC,KAAK,UAAL,CAAgB,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,EAA8B,KAA9B,CAAoC,GAApC,EAAyC,CAAzC,CAAD,CAA/B,GAA+E,CAF7G,EAGE;AACA,iBAAO,IAAP;AACD;;AACD,YAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAjC,IAAsC,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAA3E,EAA8E;AAC5E,iBAAO,IAAP;AACD,SAFD,MAEO,IACJ,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IAAoC,KAAK,CAAC,QAAN,GAAiB,MAAjB,GAA0B,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,CAA/D,IACC,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,IAA+B,CAA/B,IAAoC,KAAK,CAAC,QAAN,GAAiB,MAAjB,GAA0B,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,CAD/D,IAEA,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAH5B,EAIL;AACA,iBAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAP;AACD;;AACD,YAAI,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAAlC,IAAuC,KAAK,UAAL,CAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAA7E,EAAgF;AAC9E,cAAM,MAAM,GAAW,KAAK,YAAL,CAAkB,qBAAlB,GACnB,KAAK,UAAL,CAAgB,MAAhB,GAAyB,KAAK,YAAL,CAAkB,sBAAlB,CAAyC,KAAK,UAA9C,CAAzB,GAAqF,YADlE,GAEnB,KAAK,UAAL,CAAgB,MAAhB,GAAyB,YAF7B;;AAGA,cAAI,KAAK,CAAC,QAAN,GAAiB,MAAjB,GAA0B,MAA9B,EAAsC;AACpC,mBAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAP;AACD;AACF;AACF;;AACD,aAAO,IAAP;AACD;;;WAEM,mBAAO;AACZ,WAAK,WAAL,GAAmB,IAAnB;AACD;;;WAGM,iBAAQ,CAAR,EAA8B;AAAA;;AACnC,UAAM,EAAE,GAAqB,CAAC,CAAC,MAA/B;AACA,WAAK,WAAL,GAAmB,EAAE,CAAC,KAAtB;;AAEA,WAAK,QAAL;;AAEA,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,aAAK,QAAL,CAAc,EAAE,CAAC,KAAjB;AACA;AACD;;AACD,UAAM,QAAQ,GACZ,EAAE,CAAC,cAAH,KAAsB,CAAtB,GACK,EAAE,CAAC,cAAH,GAA+B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAD7D,GAEK,EAAE,CAAC,cAHV;AAIA,UAAI,UAAU,GAAG,CAAjB;AACA,UAAI,cAAc,GAAG,KAArB;;AACA,WAAK,YAAL,CAAkB,iBAAlB,CACE,QADF,EAEE,KAAK,WAFP,EAGE,KAAK,KAAL,KAAe,WAHjB,EAIE,UAAC,KAAD,EAAgB,eAAhB,EAAwC;AACtC,QAAA,OAAI,CAAC,WAAL,GAAmB,KAAnB;AACA,QAAA,UAAU,GAAG,KAAb;AACA,QAAA,cAAc,GAAG,eAAjB;AACD,OARH,EAhBmC,CA0BvC;;;AACI,UAAI,KAAK,QAAL,CAAc,aAAd,KAAgC,EAApC,EAAwC;AACtC;AACD;;AACD,WAAK,SAAL,GAAiB,KAAK,SAAL,KAAmB,CAAnB,IAAwB,KAAK,WAAL,CAAiB,MAAjB,KAA4B,CAApD,GAAwD,IAAxD,GAA+D,KAAK,SAArF;AACA,UAAI,eAAe,GAAW,KAAK,SAAL,GAC1B,KAAK,WAAL,CAAiB,MAAjB,GAA0B,QAA1B,GAAqC,UADX,GAE1B,QAAQ,IAAI,KAAK,KAAL,KAAe,WAAf,IAA8B,CAAC,cAA/B,GAAgD,CAAhD,GAAoD,UAAxD,CAFZ;;AAGA,UAAI,eAAe,GAAG,KAAK,qBAAL,EAAtB,EAAoD;AAClD,QAAA,eAAe,GAAG,KAAK,qBAAL,EAAlB;AACD;;AACD,MAAA,EAAE,CAAC,iBAAH,CAAqB,eAArB,EAAsC,eAAtC;AACA,WAAK,SAAL,GAAiB,IAAjB;AACD;;;WAGM,kBAAM;AACX,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,YAAL,CAAkB,iBAAlB;AACD;;AACD,WAAK,OAAL;AACD;;;WAGM,iBAAQ,CAAR,EAA2C;AAChD,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACD;;AACD,UAAM,EAAE,GAAqB,CAAC,CAAC,MAA/B;AACA,UAAM,QAAQ,GAAG,CAAjB;AACA,UAAM,MAAM,GAAG,CAAf;;AACA,UACE,EAAE,KAAK,IAAP,IACA,EAAE,CAAC,cAAH,KAAsB,IADtB,IAEA,EAAE,CAAC,cAAH,KAAsB,EAAE,CAAC,YAFzB,IAGA,EAAE,CAAC,cAAH,GAAoB,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAH7C,IAIN;AACO,MAAA,CAAS,CAAC,OAAV,KAAsB,EANzB,EAOE;AACA,YAAI,KAAK,YAAL,CAAkB,aAAtB,EAAqC;AAC3C;AACQ,eAAK,YAAL,CAAkB,WAAlB,GAAgC,KAAK,YAAL,CAAkB,eAAlB,EAAhC;;AACA,cAAI,EAAE,CAAC,iBAAH,IAAwB,KAAK,YAAL,CAAkB,MAAlB,GAA2B,KAAK,YAAL,CAAkB,WAA7C,KAA6D,EAAE,CAAC,KAA5F,EAAmG;AAC3G;AACU,YAAA,EAAE,CAAC,KAAH;AACA,YAAA,EAAE,CAAC,iBAAH,CAAqB,QAArB,EAA+B,MAA/B;AACD,WAJD,MAIO;AACf;AACU,gBAAI,EAAE,CAAC,cAAH,GAAoB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAAtD,EAA8D;AACxE;AACY,cAAA,EAAE,CAAC,iBAAH,CAAqB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAAnD,EAA2D,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAAzF;AACD;AACF;AACF;AACF;;AACD,UAAM,SAAS,GACb,CAAC,EAAE,CAAC,KAAJ,IAAa,EAAE,CAAC,KAAH,KAAa,KAAK,YAAL,CAAkB,MAA5C,GACI,KAAK,YAAL,CAAkB,MAAlB,GAA2B,KAAK,YAAL,CAAkB,WADjD,GAEI,EAAE,CAAC,KAHT;AAIJ;;AAEI,UAAI,EAAE,CAAC,KAAH,KAAa,SAAjB,EAA4B;AAC1B,QAAA,EAAE,CAAC,KAAH,GAAW,SAAX;AACD;AACL;;;AAEI,UAAI,CAAE,EAAE,CAAC,cAAH,IAAiC,EAAE,CAAC,YAAtC,KAAkE,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAA/F,EAAuG;AACrG,QAAA,EAAE,CAAC,cAAH,GAAoB,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAA7C;AACA;AACD;AACL;;;AAEI,UAAK,EAAE,CAAC,YAAH,GAA6B,KAAK,qBAAL,EAAlC,EAAgE;AAC9D,QAAA,EAAE,CAAC,YAAH,GAAkB,KAAK,qBAAL,EAAlB;AACD;AACF,K,CACH;;;;WAGS,mBAAU,CAAV,EAAgC;AAAI,UAAA,EAAA;;AACzC,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACD;;AACD,WAAK,KAAL,GAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAX,GAAkB,CAAC,CAAC,GAAjC;AACA,UAAM,EAAE,GAAqB,CAAC,CAAC,MAA/B;AACA,WAAK,WAAL,GAAmB,EAAE,CAAC,KAAtB;;AAEA,WAAK,QAAL;;AAEA,UAAI,CAAC,CAAC,OAAF,KAAc,EAAlB,EAAsB;AACpB,QAAA,CAAC,CAAC,cAAF;AACD;;AACD,UAAI,CAAC,CAAC,OAAF,KAAc,EAAd,IAAoB,CAAC,CAAC,OAAF,KAAc,CAAlC,IAAuC,CAAC,CAAC,OAAF,KAAc,EAAzD,EAA6D;AAC3D,YAAI,CAAC,CAAC,OAAF,KAAc,CAAd,IAAmB,EAAE,CAAC,KAAH,CAAS,MAAT,KAAoB,CAA3C,EAA8C;AAC5C,UAAA,EAAE,CAAC,cAAH,GAAoB,EAAE,CAAC,YAAvB;AACD;;AACD,YAAI,CAAC,CAAC,OAAF,KAAc,CAAd,IAAoB,EAAE,CAAC,cAAH,KAAiC,CAAzD,EAA4D;AAClE;AACQ,eAAK,iBAAL,GAAyB,CAAA,CAAA,EAAA,GAAA,KAAK,iBAAL,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAE,MAAxB,IACrB,KAAK,iBADgB,GAErB,KAAK,OAAL,CAAa,iBAFjB;;AAGA,cAAI,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB,IAA2B,EAAE,CAAC,cAAH,IAAgC,KAAK,MAAL,CAAY,MAA3E,EAAmF;AACjF,YAAA,EAAE,CAAC,iBAAH,CAAqB,KAAK,MAAL,CAAY,MAAjC,EAAyC,KAAK,MAAL,CAAY,MAArD;AACD,WAFD,MAEO;AACL,gBAAI,KAAK,WAAL,CAAiB,MAAjB,KAA6B,EAAE,CAAC,cAAhC,IAA8D,EAAE,CAAC,cAAH,KAAiC,CAAnG,EAAsG;AACpG,qBACE,KAAK,iBAAL,CAAuB,QAAvB,CAAgC,KAAK,WAAL,CAAkB,EAAE,CAAC,cAAH,GAA+B,CAAjD,EAAoD,QAApD,EAAhC,MACE,KAAK,MAAL,CAAY,MAAZ,IAAsB,CAAtB,IAA4B,EAAE,CAAC,cAAH,GAA+B,KAAK,MAAL,CAAY,MAAxE,IACC,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAFzB,CADF,EAIE;AACA,gBAAA,EAAE,CAAC,iBAAH,CAAsB,EAAE,CAAC,cAAH,GAA+B,CAArD,EAAyD,EAAE,CAAC,cAAH,GAA+B,CAAxF;AACD;AACF;;AACD,iBAAK,wBAAL,CAA8B,CAAC,CAAC,OAAhC,EAAyC,EAAzC;AACD;AACF;;AACD,aAAK,wBAAL,CAA8B,CAAC,CAAC,OAAhC,EAAyC,EAAzC;;AACA,YACE,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAAzB,IACC,EAAE,CAAC,cAAH,IAAgC,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAD1D,IAEC,EAAE,CAAC,YAAH,IAA8B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAH1D,EAIE;AACA,UAAA,CAAC,CAAC,cAAF;AACD;;AACD,YAAM,WAAW,GAAkB,EAAE,CAAC,cAAtC,CAhC2D,CAiCjE;;AACM,YACE,CAAC,CAAC,OAAF,KAAc,CAAd,IACA,CAAC,EAAE,CAAC,QADJ,IAEA,WAAW,KAAK,CAFhB,IAGA,EAAE,CAAC,YAAH,KAAoB,EAAE,CAAC,KAAH,CAAS,MAH7B,IAIA,EAAE,CAAC,KAAH,CAAS,MAAT,KAAoB,CALtB,EAME;AACA,eAAK,SAAL,GAAiB,KAAK,YAAL,CAAkB,MAAlB,GAA2B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAApD,GAA6D,CAA9E;;AACA,eAAK,YAAL,CAAkB,SAAlB,CAA4B,KAAK,YAAL,CAAkB,MAA9C,EAAsD,KAAK,YAAL,CAAkB,cAAxE,EAAwF,KAAK,SAA7F;AACD;AACF;;AACD,UACE,CAAC,CAAC,KAAK,MAAP,IACA,KAAK,MAAL,CAAY,MAAZ,GAAqB,CADrB,IAEA,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAAtC,GAAgD,EAAE,CAAC,cAHrD,EAIE;AACA,QAAA,EAAE,CAAC,iBAAH,CAAqB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAA3D,EAAmE,KAAK,WAAL,CAAiB,MAApF;AACD,OAND,MAMO,IACJ,CAAC,CAAC,OAAF,KAAc,EAAd,IAAoB,CAAC,CAAC,OAAF,KAAc,IAAnC,IAAuC;AACtC,MAAA,CAAC,CAAC,OAAF,KAAc,EAAd,IAAoB,CAAC,CAAC,OAAF,KAAc,IAF9B,CAEmC;AAFnC,QAGL;AACA,UAAA,EAAE,CAAC,iBAAH,CAAqB,CAArB,EAAwB,KAAK,qBAAL,EAAxB;AACA,UAAA,CAAC,CAAC,cAAF;AACD;;AACD,WAAK,YAAL,CAAkB,QAAlB,GAA6B,EAAE,CAAC,cAAhC;AACA,WAAK,YAAL,CAAkB,MAAlB,GAA2B,EAAE,CAAC,YAA9B;AACD;AACH;;;;WAEe,oBAAW,UAAX,EAAsF;AAAI,aAAA,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AACrG,oBAAI,OAAO,UAAP,KAAsB,QAAtB,IAAkC,UAAU,KAAK,IAAjD,IAAyD,WAAW,UAAxE,EAAoF;AAClF,sBAAI,aAAa,UAAjB,EAA6B;AAC3B,yBAAK,gBAAL,CAAsB,OAAO,CAAC,UAAU,CAAC,OAAZ,CAA7B;AACD;;AACD,kBAAA,UAAU,GAAG,UAAU,CAAC,KAAxB;AACD;;AAED,oBAAI,UAAU,KAAK,SAAnB,EAA8B;AAC5B,kBAAA,UAAU,GAAG,EAAb;AACD;;AACD,oBAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,kBAAA,UAAU,GAAG,MAAM,CAAC,UAAD,CAAnB;AACA,kBAAA,UAAU,GAAG,KAAK,aAAL,KAAuB,GAAvB,GAA6B,UAAU,CAAC,OAAX,CAAmB,GAAnB,EAAwB,KAAK,aAA7B,CAA7B,GAA2E,UAAxF;AACA,uBAAK,YAAL,CAAkB,aAAlB,GAAkC,IAAlC;AACD;;AACD,oBACG,UAAU,IAAI,KAAK,YAAL,CAAkB,cAAjC,IACC,KAAK,YAAL,CAAkB,cAAlB,KAAqC,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,YAAL,CAAkB,aAAnF,CAFH,EAGE;AACN;AACM,uBAAK,YAAL,CAAkB,YAAlB,GAAiC,IAAjC;AACA,uBAAK,YAAL,CAAkB,mBAAlB,GAAwC,CACtC,OADsC,EAEtC,KAAK,YAAL,CAAkB,SAAlB,CAA4B,UAA5B,EAAwC,KAAK,YAAL,CAAkB,cAA1D,CAFsC,CAAxC,CAHA,CAON;;AACM,uBAAK,YAAL,CAAkB,YAAlB,GAAiC,KAAjC;AACD,iBAZD,MAYO;AACL,uBAAK,YAAL,CAAkB,mBAAlB,GAAwC,CAAC,OAAD,EAAU,UAAV,CAAxC;AACD;;AACD,qBAAK,WAAL,GAAmB,UAAnB;;AA/BqG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAAA;AAgCtG;;;WAEM,0BAAiB,EAAjB,EAAwB;AAC7B,WAAK,QAAL,GAAgB,EAAhB;AACA,WAAK,YAAL,CAAkB,QAAlB,GAA6B,KAAK,QAAlC;AACD;;;WAEM,2BAAkB,EAAlB,EAAyB;AAC9B,WAAK,OAAL,GAAe,EAAf;AACD;;;WAEM,kCAAyB,OAAzB,EAA0C,EAA1C,EAA8D;AACnE,UAAI,OAAO,KAAK,EAAZ,IAAkB,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAA3C,EAA8C;AAC5C,YAAI,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAAtC,IAAiD,EAAE,CAAC,cAAxD,EAAmF;AACjF,UAAA,EAAE,CAAC,iBAAH,CAAqB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAA3D,EAAmE,KAAK,WAAL,CAAiB,MAApF;AACD;AACF;;AACD,UAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB,YAAI,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAArB,IAA0B,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAAtC,GAAgD,EAAE,CAAC,cAAjF,EAA4G;AAC1G,UAAA,EAAE,CAAC,iBAAH,CAAqB,KAAK,WAAL,CAAiB,MAAjB,GAA0B,KAAK,MAAL,CAAY,MAA3D,EAAmE,KAAK,WAAL,CAAiB,MAApF;AACD;;AACD,YAAI,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAvB,IAA4B,KAAK,WAAL,CAAiB,MAAjB,KAA6B,EAAE,CAAC,cAAhE,EAA2F;AACzF,UAAA,EAAE,CAAC,iBAAH,CAAsB,EAAE,CAAC,cAAH,GAA+B,CAArD,EAAyD,EAAE,CAAC,cAAH,GAA+B,CAAxF;AACD;AACF;AACF;AACH;;;;WAES,0BAAiB,UAAjB,EAAoC;AACzC,WAAK,YAAL,CAAkB,mBAAlB,GAAwC,CAAC,UAAD,EAAa,UAAb,CAAxC;AACD;;;WAEO,+BAAsB,OAAtB,EAAqC;AAAA;;AAC3C,aACG,OAAO,CAAC,KAAR,CAAc,UAAd,KACC,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,MAAlB,CAAyB,UAAC,KAAD,EAAgB,OAAhB,EAAiC,KAAjC,EAA8C;AACrE,QAAA,OAAI,CAAC,MAAL,GAAc,OAAO,KAAK,GAAZ,GAAkB,KAAlB,GAA0B,OAAI,CAAC,MAA7C;;AAEA,YAAI,OAAO,KAAK,GAAhB,EAAqB;AACnB,iBAAO,OAAI,CAAC,YAAL,CAAkB,gBAAlB,CAAmC,OAAnC,IAA8C,KAAK,GAAG,OAAtD,GAAgE,KAAvE;AACD;;AACD,QAAA,OAAI,CAAC,IAAL,GAAY,KAAZ;AACA,YAAM,YAAY,GAAW,MAAM,CAAC,OAAO,CAAC,KAAR,CAAc,OAAI,CAAC,MAAL,GAAc,CAA5B,EAA+B,OAAI,CAAC,IAApC,CAAD,CAAnC;AACA,YAAM,WAAW,GAAW,IAAI,KAAJ,CAAU,YAAY,GAAG,CAAzB,EAA4B,IAA5B,CAAiC,OAAO,CAAC,OAAI,CAAC,MAAL,GAAc,CAAf,CAAxC,CAA5B;AACA,eAAO,KAAK,GAAG,WAAf;AACD,OAVD,EAUG,EAVH,CADF,IAYA,OAbF;AAeD,K,CACH;;;;WAEU,sBAAU;AAChB,WAAK,YAAL,CAAkB,cAAlB,GAAmC,KAAK,qBAAL,CAA2B,KAAK,UAAL,IAAmB,EAA9C,CAAnC;AACA,WAAK,YAAL,CAAkB,mBAAlB,GAAwC,CACtC,OADsC,EAEtC,KAAK,YAAL,CAAkB,SAAlB,CAA4B,KAAK,WAAjC,EAA8C,KAAK,YAAL,CAAkB,cAAhE,CAFsC,CAAxC;AAID;;;WAEO,uBAAc,KAAd,EAA2B;AACjC,UAAM,UAAU,GAAW,KAAK,UAAL,CAAgB,KAAhB,CAAsB,EAAtB,EAA0B,MAA1B,CAAiC,UAAC,CAAD;AAAA,eAAe,CAAC,KAAK,GAArB;AAAA,OAAjC,EAA2D,MAAtF;;AACA,UAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,CAAC,MAAN,KAAiB,CAAvC,EAA0C;AACxC,eAAO,IAAP,CADwC,CAC5B;AACb;;AAED,UAAK,CAAC,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAN,KAA6B,CAA7B,IAAkC,KAAK,CAAC,MAAN,GAAe,UAAlD,IAAiE,KAAK,CAAC,MAAN,IAAgB,UAAU,GAAG,CAAlG,EAAqG;AACnG,eAAO,KAAK,sBAAL,CAA4B,KAA5B,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;;WAEO,iCAAqB;AAC3B,aACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAA9B,IAAwC,KAAK,YAAL,CAAkB,WAAlB,CAA8B,MAA9B,GAAuC,KAAK,YAAL,CAAkB,MAAlB,CAAyB,MAD1G;AAGD;;;WAEO,gCAAuB,WAAvB,EAA0C;AAChD,aAAO;AACL,QAAA,IAAI,EAAE;AACJ,UAAA,YAAY,EAAE,KAAK,UADf;AAEJ,UAAA,WAAW,EAAX;AAFI;AADD,OAAP;AAMD;;;WAEO,oBAAQ;AAAA;;AACd,UAAI,KAAK,oBAAL,CAA0B,MAA1B,GAAmC,CAAvC,EAA0C;AACxC,aAAK,oBAAL,CAA0B,IAA1B,CAA+B,UAAC,IAAD,EAAK;AAClC,cAAM,IAAI,GAAG,OAAI,CAAC,YAAL,CAAkB,UAAlB,CAA6B,OAAI,CAAC,WAAlC,EAA+C,MAA/C,IAAyD,OAAI,CAAC,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,MAAzG;;AACA,cAAI,OAAI,CAAC,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,YAAA,OAAI,CAAC,UAAL,GAAkB,IAAlB;AACA,YAAA,OAAI,CAAC,cAAL,GAAsB,IAAtB;AACA,YAAA,OAAI,CAAC,YAAL,CAAkB,cAAlB,GAAmC,IAAnC;AACA,mBAAO,IAAP;AACD,WALD,MAKO;AACL,YAAA,OAAI,CAAC,UAAL,GAAkB,OAAI,CAAC,oBAAL,CAA0B,OAAI,CAAC,oBAAL,CAA0B,MAA1B,GAAmC,CAA7D,CAAlB;AACA,YAAA,OAAI,CAAC,cAAL,GAAsB,OAAI,CAAC,oBAAL,CAA0B,OAAI,CAAC,oBAAL,CAA0B,MAA1B,GAAmC,CAA7D,CAAtB;AACA,YAAA,OAAI,CAAC,YAAL,CAAkB,cAAlB,GAAmC,OAAI,CAAC,oBAAL,CAA0B,OAAI,CAAC,oBAAL,CAA0B,MAA1B,GAAmC,CAA7D,CAAnC;AACD;AACF,SAZD;AAaD;AACF;;;;;;8BAhiBF,qB,CAAS,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,aAAA,EACC,MAAA,CAAA,iBAAA,CAAA,QAAA,CADD,EAC8B,MAAA,CAAA,iBAAA,CAC5B,WAD4B,CAD9B,EAEE,MACT,CAAA,iBADS,CACT,MADS,CAFF,CAAD;AAIG,C;;AAAE,aAAA,CAAA,IAAA,GAAiB,MAAA,CAAA,iBAAA,CAC1B;AAAA,EAAA,IAAA,EAAW,aAAX;AAAwB,EAAA,SAAM,EAAA,CAAA,CAAA,OAAA,EAAc,MAAd,EAAc,EAAd,CAAA,EAAc,CAAA,UAAA,EAC5C,MAD4C,EACjC,EADiC,CAAd,CAA9B;AACW,EAAA,YAAA,EAAA,SACZ,0BADY,CAEb,EAFa,EAEb,GAFa,EAEb;AAAA,QACE,EAAA,GAAA,CADF,EACW;AAAa,MAAA,MAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SACtB,sCADsB,GACsB;AAAA,eAAA,GAAA,CAAA,OAAA,EAAA;AAC5C,OAFsB,EAEjB,OAFiB,EAEX,SAAA,sCAAA,CAEb,MAFa,EAEF;AAAA,eAAA,GAAA,CAAA,OAAA,CACZ,MADY,CAAA;AAEd,OAN2B,EAM3B,MAN2B,EAM3B,SAAA,qCAAA,GAAA;AAAA,eAAA,GAAA,CAAA,MAAA,EAAA;AAAA,OAN2B,EAM3B,OAN2B,EAM3B,SAAA,sCAAA,CAAA,MAAA,EAAA;AAAA,eAAA,GAAA,CAAA,OAAA,CAAA,MAAA,CAAA;AAAA,OAN2B,EAM3B,SAN2B,EAM3B,SAAA,wCAAA,CAAA,MAAA,EAAA;AAAA,eAAA,GAAA,CAAA,SAAA,CAAA,MAAA,CAAA;AAAA,OAN2B;;GAJtB;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;2BAWD,oB;AAXC,CAD0B,CAAjB;;AAYT,aAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAuC;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EA6BxC,MA7BwC;AA6BlC,MAAA,IAAA,EAAA,CAAC,QAAD;AA7BkC,KAAA;AAAA,GAAvC,EA6BuB;AAAA,IAAA,IAAA,EAjDpB;AAiDoB,GA7BvB,EApBkB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAmDnB,MAnDmB;AAmDb,MAAA,IAAA,EAAA,CAAC,MAAD;AAnDa,KAAA;AAAA,GAoBlB,CAAA;AAAA,CAAA;;AA+BuB,aAAA,CAAA,cAAA,GAAA;AAGtB,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAjCJ,KAiCI;AAjCC,IAAA,IAAA,EAAA,CAAC,MAAD;AAiCD,GAAA,CAHsB;AA9BP,EAAA,iBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACnB;AADmB,GAAA,CA8BO;AA7BhB,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CA6BgB;AA5BhB,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CA4BgB;AA3BhB,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CA2BgB;AA1BhB,EAAA,iBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CA0BgB;AAzBhB,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAyBgB;AAxBhB,EAAA,qBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAwBgB;AAvBhB,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAuBgB;AAtBhB,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAsBgB;AArBhB,EAAA,oBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAqBgB;AApBhB,EAAA,mBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAoBgB;AAnBhB,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAmBgB;AAlBhB,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAkBgB;AAjBhB,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAiBgB;AAhBhB,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAgBgB;AAfhB,EAAA,oBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAegB;AAdhB,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACV;AADU,GAAA,CAcgB;AAbhB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EA4LV,YA5LU;AA4LE,IAAA,IAAA,EAAA,CAAC,OAAD;AA5LF,GAAA,CAagB;AAgLxB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAIF,YAJE;AAIU,IAAA,IAAA,EAAA,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAJV,GAAA,CAhLwB;AAqLxB,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAyCF,YAzCE;AAyCU,IAAA,IAAA,EAAA,CAAC,MAAD;AAzCV,GAAA,CArLwB;AA+NxB,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAOF,YAPE;AAOU,IAAA,IAAA,EAAA,CAAC,OAAD,EAAU,CAAC,QAAD,CAAV;AAPV,GAAA,CA/NwB;AAuOxB,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAsDF,YAtDE;AAsDU,IAAA,IAAA,EAAA,CAAC,SAAD,EAAY,CAAC,QAAD,CAAZ;AAtDV,GAAA;AAvOwB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8RvB,C;;ICrVO,Q;AACX,oBAA2B,YAA3B,EAA2D;AAAA;;AAAhC,SAAA,YAAA,GAAA,YAAA;AAAoC;;;;WAExD,mBACL,KADK,EAEL,IAFK,EAGkC;AAAA,UAAvC,iBAAuC,uEAAJ,IAAI;;AAEvC,UAAI,CAAC,KAAD,IAAU,OAAO,KAAP,KAAiB,QAA/B,EAAyC;AACvC,eAAO,EAAP;AACD;;AACD,UAAI,iBAAJ,EAAuB;AACrB,aAAK,YAAL,CAAkB,iBAAlB,GAAsC,iBAAtC;AACD;;AACD,UAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAO,KAAK,YAAL,CAAkB,SAAlB,WAA+B,KAA/B,GAAwC,IAAxC,CAAP;AACD;;AACD,aAAO,KAAK,YAAL,CAAkB,oBAAlB,WAA0C,KAA1C,GAAmD,IAAnD,CAAP;AACD;;;;;;yBAtBF,gB,CAAI,C,EAAA;AAAA,SAAC,KAAA,CAAA,IAAA,QAAA,EACE,MAAM,CAAA,iBAAN,CACN,kBADM,CADF,CAAD;AAGJ,C;;;;;QACI;;;AAAC,QAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAAkC;AAAA,IAAA,IAAA,EAP/B;AAO+B,GAAlC,CAAA;AAAA,CAAA;;;;;;;;;;;;;;AAP0B,C;;ICSnB,a;;;;;;;WACJ,iBAAe,WAAf,EAAkE;AACvE,aAAO;AACL,QAAA,QAAQ,EAAE,aADL;AAEL,QAAA,SAAS,EAAE,CACT;AACE,UAAA,OAAO,EAAE,UADX;AAEE,UAAA,QAAQ,EAAE;AAFZ,SADS,EAKT;AACE,UAAA,OAAO,EAAE,cADX;AAEE,UAAA,QAAQ,EAAE;AAFZ,SALS,EAST;AACE,UAAA,OAAO,EAAE,MADX;AAEE,UAAA,UAAU,EAAE,cAFd;AAGE,UAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,UAAjB;AAHR,SATS,EAcT,kBAdS;AAFN,OAAP;AAmBD;;;WACM,oBAAe;AACpB,aAAO;AACL,QAAA,QAAQ,EAAE;AADL,OAAP;AAGD;;;;;;4BA9BF,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,aAAO,CAAE,IAAT,GAAU,MAAA,CAAa,gBAAb,CAAwB;AAAA,EAAA,OAAA,EAAA,SAClC,qBADkC,CACJ,CADI,EACJ;AAAA,WAAS,KAAA,CAAA,IAAA,aAAA,GAAT;AAC/B;AAFmC,CAAxB,CAAV;;;;;;;;;;;;;;;;;AAGG,C;AA6BL;AACA;AACA;;;AACA,SAAgB,cAAhB,CACE,UADF,EAEE,WAFF,EAEoD;AAElD,SAAO,WAAW,YAAY,QAAvB,GAA+B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,UAAR,CAAA,EAAuB,WAAW,EAAlC,CAA/B,GAAmE,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAU,UAAV,CAAA,EAAyB,WAAzB,CAA1E;AACF;;AC7CA,IAAM,cAAc,GAClB,OAAO,UAAP,KAAsB,WAAtB,GACI,UADJ,GAEI,OAAO,MAAP,KAAkB,WAAlB,GACA,MADA,GAEA,OAAO,MAAP,KAAkB,WAAlB,GACA,MADA,GAEA,OAAO,IAAP,KAAgB,WAAhB,GACA,IADA,GAEA,EATN;;AAWA,CAAC,YAAA;AACC,MAAI,CAAC,cAAc,CAAC,aAApB,EAAmC;AACjC,IAAA,cAAc,CAAC,aAAf,GAA+B,UAAU,UAAV,EAA2B,KAA3B,EAAqC,CAAI,CAAxE;AACD;AACF,CAJD;ACdA;AACA;AACA;;;AAEA,SAAA,cAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,cAAA,EAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,iBAAA","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  suffix: string;\n  prefix: string;\n  thousandSeparator: string;\n  decimalMarker: '.' | ',';\n  clearIfNotMatch: boolean;\n  showTemplate: boolean;\n  showMaskTyped: boolean;\n  placeHolderCharacter: string;\n  shownMaskExpression: string;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  hiddenInput: boolean | undefined;\n  validation: boolean;\n  separatorLimit: string;\n  allowNegativeNumbers: boolean;\n  leadZeroDateTime: boolean;\n  patterns: {\n    [character: string]: {\n      pattern: RegExp;\n      optional?: boolean;\n      symbol?: string;\n    };\n  };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true,\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*',\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]'),\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]'),\n    },\n    d: {\n      pattern: new RegExp('\\\\d'),\n    },\n    m: {\n      pattern: new RegExp('\\\\d'),\n    },\n    M: {\n      pattern: new RegExp('\\\\d'),\n    },\n    H: {\n      pattern: new RegExp('\\\\d'),\n    },\n    h: {\n      pattern: new RegExp('\\\\d'),\n    },\n    s: {\n      pattern: new RegExp('\\\\d'),\n    },\n  },\n};\n\nexport const timeMasks: string[] = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n\nexport const withoutValidation: string[] = [\n  'percent',\n  'Hh',\n  's0',\n  'm0',\n  'separator',\n  'd0/M0/0000',\n  'd0/M0',\n  'd0',\n  'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public hiddenInput: IConfig['hiddenInput'];\n  public showTemplate!: IConfig['showTemplate'];\n  public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public actualValue: string = '';\n  public shownMaskExpression: string = '';\n  public maskSpecialCharacters!: IConfig['specialCharacters'];\n  public maskAvailablePatterns!: IConfig['patterns'];\n  public prefix!: IConfig['prefix'];\n  public suffix!: IConfig['suffix'];\n  public thousandSeparator!: IConfig['thousandSeparator'];\n  public decimalMarker!: IConfig['decimalMarker'];\n  public customPattern!: IConfig['patterns'];\n  public ipError?: boolean;\n  public cpfCnpjError?: boolean;\n  public showMaskTyped!: IConfig['showMaskTyped'];\n  public placeHolderCharacter!: IConfig['placeHolderCharacter'];\n  public validation: IConfig['validation'];\n  public separatorLimit: IConfig['separatorLimit'];\n  public allowNegativeNumbers: IConfig['allowNegativeNumbers'];\n  public leadZeroDateTime: IConfig['leadZeroDateTime'];\n\n  private _shift!: Set<number>;\n\n  public constructor(@Inject(config) protected _config: IConfig) {\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    justPasted: boolean = false,\n    backspaced: boolean = false,\n    cb: Function = () => {}\n  ): string {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue?.length > 0) {\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n    const inputArray: string[] = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n      maskExpression = '099.099.099.099';\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i].match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n      if (arr.length > 11) {\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        inputValue = this._stripToDecimal(inputValue);\n        const precision: number = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (\n        inputValue.match('[wа-яА-Я]') ||\n        inputValue.match('[ЁёА-я]') ||\n        inputValue.match('[a-z]|[A-Z]') ||\n        inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n        inputValue.match('[^A-Za-z0-9,]')\n      ) {\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      inputValue =\n        inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n          ? inputValue.slice(1, inputValue.length)\n          : inputValue;\n\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n      const thousandSeperatorCharEscaped: string = this._charToRegExpExpression(this.thousandSeparator);\n      const decimalMarkerEscaped: string = this._charToRegExpExpression(this.decimalMarker);\n      const invalidChars: string = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n        .replace(thousandSeperatorCharEscaped, '')\n        .replace(decimalMarkerEscaped, '');\n\n      const invalidCharRegexp: RegExp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision: number = this.getPrecision(maskExpression);\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep: string = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n\n      const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep: number = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (\n        (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n        (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n      ) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n        // tslint:disable-next-line\n        let i: number = 0, inputSymbol: string = inputArray[0];\n        i < inputArray.length;\n        i++, inputSymbol = inputArray[i]\n      ) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (\n          maskExpression[cursor + 1] === '*' &&\n          multi &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (\n          maskExpression[cursor + 1] === '?' &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            if (\n              (Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n              Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n              inputValue[cursor + 1] === '/'\n            ) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays: boolean =\n              cursor === 0 &&\n              (Number(inputSymbol) > 2 ||\n                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput: boolean =\n              inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              ((inputValue[cursor - 2] === '/' &&\n                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                inputValue[cursor] !== '/') ||\n                inputValue[cursor] === '/' ||\n                (inputValue[cursor - 3] === '/' &&\n                  Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                  inputValue[cursor - 1] !== '/') ||\n                inputValue[cursor - 1] === '/');\n            // 10<day<31 && month<12 for input\n            const day2monthInput: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] === '/' &&\n              (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              !inputValue.slice(cursor - 2, cursor).includes('/') &&\n              Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] !== '/' &&\n              Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (\n              (Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n              withoutDays ||\n              day1monthInput ||\n              day2monthInput ||\n              day1monthPaste ||\n              day2monthPaste\n            ) {\n              cursor += 1;\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n              i--;\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n          i--;\n        } else if (\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\n        ) {\n          if (\n            !!inputArray[cursor] &&\n            maskExpression !== '099.099.099.099' &&\n            maskExpression !== '000.000.000-00' &&\n            maskExpression !== '00.000.000/0000-00'\n          ) {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (\n          this.maskExpression[cursor + 1] === '*' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.maskExpression[cursor + 1] === '?' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.showMaskTyped &&\n          this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n          inputSymbol !== this.placeHolderCharacter\n        ) {\n          stepBack = true;\n        }\n      }\n    }\n    if (\n      result.length + 1 === maskExpression.length &&\n      this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n    ) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition: number = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift: number = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let onlySpecial = false;\n    if (backspaced) {\n      onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n    }\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n\n  public _findSpecialChar(inputSymbol: string): undefined | string {\n    return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n  }\n\n  protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return (\n      this.maskAvailablePatterns[maskSymbol] &&\n      this.maskAvailablePatterns[maskSymbol].pattern &&\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n    );\n  }\n\n  private _formatWithSeparators = (\n    str: string,\n    thousandSeparatorChar: string,\n    decimalChar: string,\n    precision: number\n  ) => {\n    const x: string[] = str.split(decimalChar);\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n    let res: string = x[0];\n    const separatorLimit: string = this.separatorLimit.replace(/\\s/g, '');\n    if (separatorLimit && +separatorLimit) {\n      if (res[0] === '-') {\n        res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n      } else {\n        res = res.slice(0, separatorLimit.length);\n      }\n    }\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\n\n    while (thousandSeparatorChar && rgx.test(res)) {\n      res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n    }\n\n    if (precision === undefined) {\n      return res + decimals;\n    } else if (precision === 0) {\n      return res;\n    }\n    return res + decimals.substr(0, precision + 1);\n  };\n\n  private percentage = (str: string): boolean => {\n    return Number(str) >= 0 && Number(str) <= 100;\n  };\n\n  private getPrecision = (maskExpression: string): number => {\n    const x: string[] = maskExpression.split('.');\n    if (x.length > 1) {\n      return Number(x[x.length - 1]);\n    }\n\n    return Infinity;\n  };\n\n  private checkAndRemoveSuffix = (inputValue: string): string => {\n    for (let i = this.suffix?.length - 1; i >= 0; i--) {\n      const substr = this.suffix.substr(i, this.suffix?.length);\n      if (\n        inputValue.includes(substr) &&\n        (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, this.suffix?.length)))\n      ) {\n        return inputValue.replace(substr, '');\n      }\n    }\n    return inputValue;\n  };\n\n  private checkInputPrecision = (\n    inputValue: string,\n    precision: number,\n    decimalMarker: IConfig['decimalMarker']\n  ): string => {\n    if (precision < Infinity) {\n      const precisionRegEx: RegExp = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n\n      const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n      if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n        const diff = precisionMatch[0].length - 1 - precision;\n        inputValue = inputValue.substring(0, inputValue.length - diff);\n      }\n      if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n    }\n    return inputValue;\n  };\n\n  private _stripToDecimal(str: string): string {\n    return str\n      .split('')\n      .filter((i: string, idx: number) => {\n        return (\n          i.match('^-?\\\\d') ||\n          i.match('\\\\s') ||\n          i === '.' ||\n          i === ',' ||\n          (i === '-' && idx === 0 && this.allowNegativeNumbers)\n        );\n      })\n      .join('');\n  }\n\n  private _charToRegExpExpression(char: string): string {\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n    return char;\n  }\n\n  private _shiftStep(maskExpression: string, cursor: number, inputLength: number) {\n    const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { config, IConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public placeHolderCharacter: string = '_';\n  public maskIsShown: string = '';\n  public selStart: number | null = null;\n  public selEnd: number | null = null;\n\n  /**\n   * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n   * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n   */\n  public writingValue: boolean = false;\n\n  public onChange = (_: any) => {};\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n  }\n\n  // tslint:disable-next-line:cyclomatic-complexity\n  public applyMask(\n    inputValue: string,\n    maskExpression: string,\n    position: number = 0,\n    justPasted = false,\n    backspaced = false,\n    cb: Function = () => {}\n  ): string {\n    if (!maskExpression) {\n      return inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined) {\n      let actualResult: string[] = this.actualValue.split('');\n      // tslint:disable no-unused-expression\n      inputValue !== '' && actualResult.length\n        ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n          ? inputValue.length > actualResult.length\n            ? actualResult.splice(this.selStart, 0, getSymbol)\n            : inputValue.length < actualResult.length\n            ? actualResult.length - inputValue.length === 1\n              ? actualResult.splice(this.selStart - 1, 1)\n              : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n            : null\n          : null\n        : (actualResult = []);\n      // tslint:enable no-unused-expression\n      newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result: string = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result);\n\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== this.decimalMarker);\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen: number = result.length;\n    const prefNmask: string = this.prefix + this.maskIsShown;\n\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n    return result + prefNmask.slice(resLen);\n  }\n\n  // get the number of characters that were shifted\n  private _numberSkipedSymbols(value: string): number {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n    return countSkipedSymbol;\n  }\n\n  public applyValueChanges(\n    position: number = 0,\n    justPasted: boolean,\n    backspaced: boolean,\n    cb: Function = () => {}\n  ): void {\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n    if (formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public hideInput(inputValue: string, maskExpression: string): string {\n    return inputValue\n      .split('')\n      .map((curr: string, index: number) => {\n        if (\n          this.maskAvailablePatterns &&\n          this.maskAvailablePatterns[maskExpression[index]] &&\n          this.maskAvailablePatterns[maskExpression[index]].symbol\n        ) {\n          return this.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n        return curr;\n      })\n      .join('');\n  }\n\n  // this function is not necessary, it checks result against maskExpression\n  public getActualValue(res: string): string {\n    const compare: string[] = res\n      .split('')\n      .filter(\n        (symbol: string, i: number) =>\n          this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n          (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n      );\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n\n  public shiftTypedSymbols(inputValue: string): string {\n    let symbolToReplace = '';\n    const newInputValue: string[] =\n      (inputValue &&\n        inputValue.split('').map((currSymbol: string, index: number) => {\n          if (\n            this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n            inputValue[index + 1] !== this.maskExpression[index + 1]\n          ) {\n            symbolToReplace = currSymbol;\n            return inputValue[index + 1];\n          }\n          if (symbolToReplace.length) {\n            const replaceSymbol: string = symbolToReplace;\n            symbolToReplace = '';\n            return replaceSymbol;\n          }\n          return currSymbol;\n        })) ||\n      [];\n    return newInputValue.join('');\n  }\n\n  public showMaskInInput(inputVal?: string): string {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n\n  public clearIfNotMatchFn(): void {\n    const formElement = this._elementRef.nativeElement;\n    if (\n      this.clearIfNotMatch &&\n      this.prefix.length + this.maskExpression.length + this.suffix.length !==\n        formElement.value.replace(/_/g, '').length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n\n  public checkSpecialCharAmount(mask: string): number {\n    const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  public removeMask(inputValue: string): string {\n    return this._removeMask(\n      this._removeSuffix(this._removePrefix(inputValue)),\n      this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter)\n    );\n  }\n\n  private _checkForIp(inputVal: string): string {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n\n  private _checkForCpfCnpj(inputVal: string): string {\n    const cpf =\n      `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj =\n      `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  private formControlResult(inputValue: string): void {\n    if (this.writingValue) {\n      return;\n    }\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(\n        this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters))\n      );\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n\n  private _toNumber(value: string | number | undefined | null) {\n    if (!this.isNumberValue) {\n      return value;\n    }\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  private _removeSuffix(value: string): string {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  private _retrieveSeparatorValue(result: string): string {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  private _checkSymbols(result: string): string | number | undefined | null {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision: number | null = this._retrieveSeparatorPrecision(this.maskExpression);\n    let separatorValue: string = this._retrieveSeparatorValue(result);\n    if (this.decimalMarker !== '.') {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  }\n\n  // TODO should think about helpers or separting decimal precision to own property\n  private _retrieveSeparatorPrecision(maskExpretion: string): number | null {\n    const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\n","import {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { config, IConfig, timeMasks, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\n@Directive({\n  selector: 'input[mask], textarea[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    MaskService,\n  ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges, Validator {\n  @Input('mask') public maskExpression: string = '';\n  @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n  @Input() public patterns: IConfig['patterns'] = {};\n  @Input() public prefix: IConfig['prefix'] = '';\n  @Input() public suffix: IConfig['suffix'] = '';\n  @Input() public thousandSeparator: IConfig['thousandSeparator'] = ' ';\n  @Input() public decimalMarker: IConfig['decimalMarker'] = '.';\n  @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n  @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n  @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n  @Input() public placeHolderCharacter: IConfig['placeHolderCharacter'] | null = null;\n  @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n  @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n  @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n  @Input() public validation: IConfig['validation'] | null = null;\n  @Input() public separatorLimit: IConfig['separatorLimit'] | null = null;\n  @Input() public allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null = null;\n  @Input() public leadZeroDateTime: IConfig['leadZeroDateTime'] | null = null;\n  private _maskValue: string = '';\n  private _inputValue!: string;\n  private _position: number | null = null;\n  private _start!: number;\n  private _end!: number;\n  private _code!: string;\n  private _maskExpressionArray: string[] = [];\n  private _justPasted: boolean = false;\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService,\n    @Inject(config) protected _config: IConfig\n  ) {}\n\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime,\n    } = changes;\n    if (maskExpression) {\n      this._maskValue = maskExpression.currentValue || '';\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a: string, b: string) => {\n          return a.length - b.length;\n        });\n        this._maskValue = this._maskExpressionArray[0];\n        this.maskExpression = this._maskExpressionArray[0];\n        this._maskService.maskExpression = this._maskExpressionArray[0];\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(\n          (c: string) => c !== '-'\n        );\n      }\n    }\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n    this._applyMask();\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  public validate({ value }: FormControl): ValidationErrors | null {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (\n          this._maskService.maskAvailablePatterns[key].optional &&\n          this._maskService.maskAvailablePatterns[key].optional === true\n        ) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt: string = this._maskValue\n              .split('')\n              .filter((i: string) => i === key)\n              .join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (\n        this._maskValue.indexOf('{') === 1 &&\n        value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4\n      ) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (\n        (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n        (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n        this._maskValue.indexOf('{') === 1\n      ) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length: number = this._maskService.dropSpecialCharacters\n          ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n          : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    return null;\n  }\n  @HostListener('paste')\n  public onPaste() {\n    this._justPasted = true;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: CustomKeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number =\n      el.selectionStart === 1\n        ? (el.selectionStart as number) + this._maskService.prefix.length\n        : (el.selectionStart as number);\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(\n      position,\n      this._justPasted,\n      this._code === 'Backspace',\n      (shift: number, _backspaceShift: boolean) => {\n        this._justPasted = false;\n        caretShift = shift;\n        backspaceShift = _backspaceShift;\n      }\n    );\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply: number = this._position\n      ? this._inputValue.length + position + caretShift\n      : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    const posStart = 0;\n    const posEnd = 0;\n    if (\n      el !== null &&\n      el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    ) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n    const nextValue: string | null =\n      !el.value || el.value === this._maskService.prefix\n        ? this._maskService.prefix + this._maskService.maskIsShown\n        : el.value;\n\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n\n    /** select only inserted text */\n    if ((el.selectionEnd as number) > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  @HostListener('keydown', ['$event'])\n  public onKeyDown(e: CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && (el.selectionStart as number) !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters?.length\n          ? this.specialCharacters\n          : this._config.specialCharacters;\n        if (this.prefix.length > 1 && (el.selectionStart as number) <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, this.prefix.length);\n        } else {\n          if (this._inputValue.length !== (el.selectionStart as number) && (el.selectionStart as number) !== 1) {\n            while (\n              this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString()) &&\n              ((this.prefix.length >= 1 && (el.selectionStart as number) > this.prefix.length) ||\n                this.prefix.length === 0)\n            ) {\n              el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n            }\n          }\n          this.suffixCheckOnPressDelete(e.keyCode, el);\n        }\n      }\n      this.suffixCheckOnPressDelete(e.keyCode, el);\n      if (\n        this._maskService.prefix.length &&\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\n        (el.selectionEnd as number) <= this._maskService.prefix.length\n      ) {\n        e.preventDefault();\n      }\n      const cursorStart: number | null = el.selectionStart;\n      // this.onFocus(e);\n      if (\n        e.keyCode === 8 &&\n        !el.readOnly &&\n        cursorStart === 0 &&\n        el.selectionEnd === el.value.length &&\n        el.value.length !== 0\n      ) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (\n      !!this.suffix &&\n      this.suffix.length > 1 &&\n      this._inputValue.length - this.suffix.length < (el.selectionStart as number)\n    ) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (\n      (e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n      (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string | number | { value: string | number; disable?: boolean }): Promise<void> {\n    if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n      if ('disable' in inputValue) {\n        this.setDisabledState(Boolean(inputValue.disable));\n      }\n      inputValue = inputValue.value;\n    }\n\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n      this._maskService.isNumberValue = true;\n    }\n    if (\n      (inputValue && this._maskService.maskExpression) ||\n      (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n    ) {\n      // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n      this._maskService.writingValue = true;\n      this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n      ];\n      // Let the service know we've finished writing value\n      this._maskService.writingValue = false;\n    } else {\n      this._maskService.formElementProperty = ['value', inputValue];\n    }\n    this._inputValue = inputValue;\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  public suffixCheckOnPressDelete(keyCode: number, el: HTMLInputElement): void {\n    if (keyCode === 46 && this.suffix.length > 0) {\n      if (this._inputValue.length - this.suffix.length <= (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n    }\n    if (keyCode === 8) {\n      if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n      if (this.suffix.length === 1 && this._inputValue.length === (el.selectionStart as number)) {\n        el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n      }\n    }\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  private _repeatPatternSymbols(maskExp: string): string {\n    return (\n      (maskExp.match(/{[0-9]+}/) &&\n        maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n          this._start = currval === '{' ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n          const replaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n          return accum + replaceWith;\n        }, '')) ||\n      maskExp\n    );\n  }\n\n  // tslint:disable-next-line:no-any\n  private _applyMask(): any {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n    ];\n  }\n\n  private _validateTime(value: string): ValidationErrors | null {\n    const rowMaskLen: number = this._maskValue.split('').filter((s: string) => s !== ':').length;\n    if (value === null || value.length === 0) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  private _getActualInputLength() {\n    return (\n      this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length\n    );\n  }\n\n  private _createValidationError(actualValue: string): ValidationErrors {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue,\n      },\n    };\n  }\n\n  private _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some((mask) => {\n        const test = this._maskService.removeMask(this._inputValue).length <= this._maskService.removeMask(mask).length;\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n  public constructor(private _maskService: MaskApplierService) {}\n\n  public transform(\n    value: string | number,\n    mask: string | [string, IConfig['patterns']],\n    thousandSeparator: string | null = null\n  ): string {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n  public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue,\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig,\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG],\n        },\n        MaskApplierService,\n      ],\n    };\n  }\n  public static forChild(): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n  initConfig: optionsConfig,\n  configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n  return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n","// tslint:disable: no-any typedef\ndeclare var global: any;\n\nconst commonjsGlobal =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : typeof self !== 'undefined'\n    ? self\n    : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType: any, _init: any) {};\n  }\n})();\n\nexport type CustomKeyboardEvent = KeyboardEvent;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}