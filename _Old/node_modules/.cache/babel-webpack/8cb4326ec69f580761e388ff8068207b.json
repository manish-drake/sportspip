{"ast":null,"code":"import _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param {?} element The element to check for visibility\n * @return {?} true if element is hidden\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction elementIsHidden(element) {\n  return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/utils/buttons.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param {?} button\n * @return {?}\n */\n\n\nfunction makeButton(button) {\n  var classes = button.classes,\n      disabled = button.disabled,\n      label = button.label,\n      secondary = button.secondary,\n      type = button.type,\n      text = button.text;\n  /** @type {?} */\n\n  var builtInButtonTypes = ['back', 'cancel', 'next'];\n\n  if (!type) {\n    return button;\n  }\n\n  if (builtInButtonTypes.indexOf(type) === -1) {\n    throw new Error(\"'type' property must be one of 'back', 'cancel', or 'next'\");\n  }\n\n  return {\n    action: this[type].bind(this),\n    classes: classes,\n    disabled: disabled,\n    label: label,\n    secondary: secondary,\n    text: text\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/shepherd.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ShepherdService = /*#__PURE__*/function () {\n  function ShepherdService() {\n    _classCallCheck(this, ShepherdService);\n\n    this.confirmCancel = false;\n    this.confirmCancelMessage = null;\n    this.defaultStepOptions = {};\n    this.errorTitle = null;\n    this.isActive = false;\n    this.messageForUser = null;\n    this.modal = false;\n    this.requiredElements = [];\n    this.steps = [];\n    this.tourName = undefined;\n    this.tourObject = null;\n  }\n  /**\n   * Get the tour object and call back\n   * @return {?}\n   */\n\n\n  _createClass(ShepherdService, [{\n    key: \"back\",\n    value: function back() {\n      this.tourObject.back();\n    }\n    /**\n     * Cancel the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.tourObject.cancel();\n    }\n    /**\n     * Complete the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.tourObject.complete();\n    }\n    /**\n     * Hides the current step\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.tourObject.hide();\n    }\n    /**\n     * Advance the tour to the next step\n     * @return {?}\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.tourObject.next();\n    }\n    /**\n     * Show a specific step, by passing its id\n     * @param {?} id The id of the step you want to show\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show(id) {\n      this.tourObject.show(id);\n    }\n    /**\n     * Start the tour\n     * @return {?}\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.isActive = true;\n      this.tourObject.start();\n    }\n    /**\n     * This function is called when a tour is completed or cancelled to initiate cleanup.\n     * @param {?} completeOrCancel 'complete' or 'cancel'\n     * @return {?}\n     */\n\n  }, {\n    key: \"onTourFinish\",\n    value: function onTourFinish(completeOrCancel) {\n      this.isActive = false;\n    }\n    /**\n     * Take a set of steps and create a tour object based on the current configuration\n     * @param {?} steps An array of steps\n     * @return {?}\n     */\n\n  }, {\n    key: \"addSteps\",\n    value: function addSteps(steps) {\n      var _this = this;\n\n      this._initialize();\n      /** @type {?} */\n\n\n      var tour = this.tourObject; // Return nothing if there are no steps\n\n      if (!steps || !Array.isArray(steps) || steps.length === 0) {\n        return;\n      }\n\n      if (!this.requiredElementsPresent()) {\n        tour.addStep({\n          buttons: [{\n            text: 'Exit',\n            action: tour.cancel\n          }],\n          id: 'error',\n          title: this.errorTitle,\n          text: [this.messageForUser]\n        });\n        return;\n      }\n\n      steps.forEach(\n      /**\n      * @param {?} step\n      * @return {?}\n      */\n      function (step) {\n        if (step.buttons) {\n          step.buttons = step.buttons.map(makeButton.bind(_this), _this);\n        }\n\n        tour.addStep(step);\n      });\n    }\n    /**\n     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"requiredElementsPresent\",\n    value: function requiredElementsPresent() {\n      var _this2 = this;\n\n      /** @type {?} */\n      var allElementsPresent = true;\n      /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n\n      this.requiredElements.forEach(\n      /**\n      * @param {?} element\n      * @return {?}\n      */\n      function (element) {\n        /** @type {?} */\n        var selectedElement = document.querySelector(element.selector);\n\n        if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n          allElementsPresent = false;\n          _this2.errorTitle = element.title;\n          _this2.messageForUser = element.message;\n        }\n      });\n      return allElementsPresent;\n    }\n    /**\n     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      /** @type {?} */\n      var tourObject = new Shepherd.Tour({\n        confirmCancel: this.confirmCancel,\n        confirmCancelMessage: this.confirmCancelMessage,\n        defaultStepOptions: this.defaultStepOptions,\n        tourName: this.tourName,\n        useModalOverlay: this.modal\n      });\n      tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n      tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n      this.tourObject = tourObject;\n    }\n  }]);\n\n  return ShepherdService;\n}();\n\nShepherdService.ɵfac = function ShepherdService_Factory(t) {\n  return new (t || ShepherdService)();\n};\n/** @nocollapse */\n\n\nShepherdService.ctorParameters = function () {\n  return [];\n};\n/** @nocollapse */\n\n\nShepherdService.ɵprov = ɵɵdefineInjectable({\n  factory: function ShepherdService_Factory() {\n    return new ShepherdService();\n  },\n  token: ShepherdService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShepherdService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  ShepherdService.prototype.confirmCancel;\n  /** @type {?} */\n\n  ShepherdService.prototype.confirmCancelMessage;\n  /** @type {?} */\n\n  ShepherdService.prototype.defaultStepOptions;\n  /** @type {?} */\n\n  ShepherdService.prototype.errorTitle;\n  /** @type {?} */\n\n  ShepherdService.prototype.isActive;\n  /** @type {?} */\n\n  ShepherdService.prototype.messageForUser;\n  /** @type {?} */\n\n  ShepherdService.prototype.modal;\n  /** @type {?} */\n\n  ShepherdService.prototype.requiredElements;\n  /** @type {?} */\n\n  ShepherdService.prototype.steps;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourName;\n  /** @type {?} */\n\n  ShepherdService.prototype.tourObject;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-shepherd.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ShepherdService };","map":{"version":3,"sources":["../projects/shepherd/src/lib/utils/dom.ts","../projects/shepherd/src/lib/utils/buttons.ts","../../projects/shepherd/src/lib/shepherd.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param element The element to check for visibility\n * @returns true if element is hidden\n */\nexport function elementIsHidden(element: HTMLElement): boolean {\n  return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n","/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param button.type The type of button cancel, back, or next\n * @param button.classes Classes to apply to the button\n * @param button.text The text for the button\n * @param button.action The action to call\n */\nexport function makeButton(button) {\n  const { classes, disabled, label, secondary, type, text } = button;\n  const builtInButtonTypes = ['back', 'cancel', 'next'];\n\n  if (!type) {\n    return button;\n  }\n\n  if (builtInButtonTypes.indexOf(type) === -1) {\n    throw new Error(`'type' property must be one of 'back', 'cancel', or 'next'`);\n  }\n\n  return {\n    action: this[type].bind(this),\n    classes,\n    disabled,\n    label,\n    secondary,\n    text\n  };\n}\n","import { Injectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\nimport { elementIsHidden } from './utils/dom';\nimport { makeButton } from './utils/buttons';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShepherdService {\n  confirmCancel = false;\n  confirmCancelMessage: string = null;\n  defaultStepOptions: object = {};\n  errorTitle = null;\n  isActive = false;\n  messageForUser: string = null;\n  modal = false;\n  requiredElements = [];\n  steps = [];\n  tourName = undefined;\n  tourObject: Shepherd.Tour = null;\n\n  constructor() {\n  }\n\n  /**\n   * Get the tour object and call back\n   */\n  back() {\n    this.tourObject.back();\n  }\n\n  /**\n   * Cancel the tour\n   */\n  cancel() {\n    this.tourObject.cancel();\n  }\n\n  /**\n   * Complete the tour\n   */\n  complete() {\n    this.tourObject.complete();\n  }\n\n  /**\n   * Hides the current step\n   */\n  hide() {\n    this.tourObject.hide();\n  }\n\n  /**\n   * Advance the tour to the next step\n   */\n  next() {\n    this.tourObject.next();\n  }\n\n  /**\n   * Show a specific step, by passing its id\n   * @param id The id of the step you want to show\n   */\n  show(id) {\n    this.tourObject.show(id);\n  }\n\n  /**\n   * Start the tour\n   */\n  start() {\n    this.isActive = true;\n    this.tourObject.start();\n  }\n\n  /**\n   * This function is called when a tour is completed or cancelled to initiate cleanup.\n   * @param completeOrCancel 'complete' or 'cancel'\n   */\n  onTourFinish(completeOrCancel: string) {\n    this.isActive = false;\n  }\n\n  /**\n   * Take a set of steps and create a tour object based on the current configuration\n   * @param steps An array of steps\n   */\n  addSteps(steps: Array<any>) {\n    this._initialize();\n    const tour = this.tourObject;\n\n    // Return nothing if there are no steps\n    if (!steps || !Array.isArray(steps) || steps.length === 0) {\n      return;\n    }\n\n    if (!this.requiredElementsPresent()) {\n      tour.addStep({\n        buttons: [{\n          text: 'Exit',\n          action: tour.cancel\n        }],\n        id: 'error',\n        title: this.errorTitle,\n        text: [this.messageForUser]\n      });\n      return;\n    }\n\n    steps.forEach((step) => {\n      if (step.buttons) {\n        step.buttons = step.buttons.map(makeButton.bind(this), this);\n      }\n\n      tour.addStep(step);\n    });\n  }\n\n  /**\n   * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n   * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n   */\n  private requiredElementsPresent() {\n    let allElementsPresent = true;\n\n    /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n    this.requiredElements.forEach((element) => {\n      const selectedElement = document.querySelector(element.selector);\n\n      if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n        allElementsPresent = false;\n        this.errorTitle = element.title;\n        this.messageForUser = element.message;\n      }\n    });\n\n    return allElementsPresent;\n  }\n\n  /**\n   * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n   */\n  private _initialize() {\n    const tourObject = new Shepherd.Tour({\n      confirmCancel: this.confirmCancel,\n      confirmCancelMessage: this.confirmCancelMessage,\n      defaultStepOptions: this.defaultStepOptions,\n      tourName: this.tourName,\n      useModalOverlay: this.modal\n    });\n\n    tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n    tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n\n    this.tourObject = tourObject;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}