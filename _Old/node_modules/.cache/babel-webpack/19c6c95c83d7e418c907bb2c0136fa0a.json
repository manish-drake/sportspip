{"ast":null,"code":"import _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _slicedToArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as dragulaExpt from 'dragula';\nimport dragulaExpt__default from 'dragula';\nimport { Injectable, Optional, Directive, Input, Output, ElementRef, EventEmitter, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nvar Group =\n/**\n * @param {?} name\n * @param {?} drake\n * @param {?} options\n */\nfunction Group(name, drake, options) {\n  _classCallCheck(this, Group);\n\n  this.name = name;\n  this.drake = drake;\n  this.options = options;\n  this.initEvents = false;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/** @enum {string} */\n\n\nvar EventTypes = {\n  Cancel: \"cancel\",\n  Cloned: \"cloned\",\n  Drag: \"drag\",\n  DragEnd: \"dragend\",\n  Drop: \"drop\",\n  Out: \"out\",\n  Over: \"over\",\n  Remove: \"remove\",\n  Shadow: \"shadow\",\n  DropModel: \"dropModel\",\n  RemoveModel: \"removeModel\"\n};\n/** @type {?} */\n\nvar AllEvents = Object.keys(EventTypes).map(function (k) {\n  return (\n    /** @type {?} */\n    EventTypes[\n    /** @type {?} */\n    k]\n  );\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/** @type {?} */\n\nvar dragula = dragulaExpt__default || dragulaExpt;\n\nvar DrakeFactory =\n/**\n * @param {?=} build\n */\nfunction DrakeFactory() {\n  var build = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dragula;\n\n  _classCallCheck(this, DrakeFactory);\n\n  this.build = build;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar filterEvent = function filterEvent(eventType, filterDragType, projector) {\n  return function (input) {\n    return input.pipe(filter(function (_ref) {\n      var event = _ref.event,\n          name = _ref.name;\n      return event === eventType && (filterDragType === undefined || name === filterDragType);\n    }), map(function (_ref2) {\n      var name = _ref2.name,\n          args = _ref2.args;\n      return projector(name, args);\n    }));\n  };\n};\n/** @type {?} */\n\n\nvar elContainerSourceProjector = function elContainerSourceProjector(name, _ref3) {\n  var _ref4 = _slicedToArray(_ref3, 3),\n      el = _ref4[0],\n      container = _ref4[1],\n      source = _ref4[2];\n\n  return {\n    name: name,\n    el: el,\n    container: container,\n    source: source\n  };\n};\n\nvar DragulaService = /*#__PURE__*/function () {\n  /**\n   * @param {?=} drakeFactory\n   */\n  function DragulaService() {\n    var _this = this;\n\n    var drakeFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, DragulaService);\n\n    this.drakeFactory = drakeFactory;\n    this.dispatch$ = new Subject();\n\n    this.drag = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.Drag, groupName, function (name, _ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            el = _ref6[0],\n            source = _ref6[1];\n\n        return {\n          name: name,\n          el: el,\n          source: source\n        };\n      }));\n    };\n\n    this.dragend = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.DragEnd, groupName, function (name, _ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            el = _ref8[0];\n\n        return {\n          name: name,\n          el: el\n        };\n      }));\n    };\n\n    this.drop = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.Drop, groupName, function (name, _ref9) {\n        var _ref10 = _slicedToArray(_ref9, 4),\n            el = _ref10[0],\n            target = _ref10[1],\n            source = _ref10[2],\n            sibling = _ref10[3];\n\n        return {\n          name: name,\n          el: el,\n          target: target,\n          source: source,\n          sibling: sibling\n        };\n      }));\n    };\n\n    this.elContainerSource = function (eventType) {\n      return function (groupName) {\n        return _this.dispatch$.pipe(filterEvent(eventType, groupName, elContainerSourceProjector));\n      };\n    };\n\n    this.cancel = this.elContainerSource(EventTypes.Cancel);\n    this.remove = this.elContainerSource(EventTypes.Remove);\n    this.shadow = this.elContainerSource(EventTypes.Shadow);\n    this.over = this.elContainerSource(EventTypes.Over);\n    this.out = this.elContainerSource(EventTypes.Out);\n\n    this.cloned = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.Cloned, groupName, function (name, _ref11) {\n        var _ref12 = _slicedToArray(_ref11, 3),\n            clone = _ref12[0],\n            original = _ref12[1],\n            cloneType = _ref12[2];\n\n        return {\n          name: name,\n          clone: clone,\n          original: original,\n          cloneType: cloneType\n        };\n      }));\n    };\n\n    this.dropModel = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.DropModel, groupName, function (name, _ref13) {\n        var _ref14 = _slicedToArray(_ref13, 9),\n            el = _ref14[0],\n            target = _ref14[1],\n            source = _ref14[2],\n            sibling = _ref14[3],\n            item = _ref14[4],\n            sourceModel = _ref14[5],\n            targetModel = _ref14[6],\n            sourceIndex = _ref14[7],\n            targetIndex = _ref14[8];\n\n        return {\n          name: name,\n          el: el,\n          target: target,\n          source: source,\n          sibling: sibling,\n          item: item,\n          sourceModel: sourceModel,\n          targetModel: targetModel,\n          sourceIndex: sourceIndex,\n          targetIndex: targetIndex\n        };\n      }));\n    };\n\n    this.removeModel = function (groupName) {\n      return _this.dispatch$.pipe(filterEvent(EventTypes.RemoveModel, groupName, function (name, _ref15) {\n        var _ref16 = _slicedToArray(_ref15, 6),\n            el = _ref16[0],\n            container = _ref16[1],\n            source = _ref16[2],\n            item = _ref16[3],\n            sourceModel = _ref16[4],\n            sourceIndex = _ref16[5];\n\n        return {\n          name: name,\n          el: el,\n          container: container,\n          source: source,\n          item: item,\n          sourceModel: sourceModel,\n          sourceIndex: sourceIndex\n        };\n      }));\n    };\n\n    this.groups = {};\n\n    if (this.drakeFactory === null) {\n      this.drakeFactory = new DrakeFactory();\n    }\n  }\n  /**\n   * Public mainly for testing purposes. Prefer `createGroup()`.\n   * @param {?} group\n   * @return {?}\n   */\n\n\n  _createClass(DragulaService, [{\n    key: \"add\",\n    value: function add(group) {\n      /** @type {?} */\n      var existingGroup = this.find(group.name);\n\n      if (existingGroup) {\n        throw new Error('Group named: \"' + group.name + '\" already exists.');\n      }\n\n      this.groups[group.name] = group;\n      this.handleModels(group);\n      this.setupEvents(group);\n      return group;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"find\",\n    value: function find(name) {\n      return this.groups[name];\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy(name) {\n      /** @type {?} */\n      var group = this.find(name);\n\n      if (!group) {\n        return;\n      }\n\n      group.drake && group.drake.destroy();\n      delete this.groups[name];\n    }\n    /**\n     * Creates a group with the specified name and options.\n     *\n     * Note: formerly known as `setOptions`\n     * @template T\n     * @param {?} name\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"createGroup\",\n    value: function createGroup(name, options) {\n      return this.add(new Group(name, this.drakeFactory.build([], options), options));\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"handleModels\",\n    value: function handleModels(_ref17) {\n      var _this2 = this;\n\n      var name = _ref17.name,\n          drake = _ref17.drake,\n          options = _ref17.options;\n\n      /** @type {?} */\n      var dragElm;\n      /** @type {?} */\n\n      var dragIndex;\n      /** @type {?} */\n\n      var dropIndex;\n      drake.on('remove', function (el, container, source) {\n        if (!drake.models) {\n          return;\n        }\n        /** @type {?} */\n\n\n        var sourceModel = drake.models[drake.containers.indexOf(source)];\n        sourceModel = sourceModel.slice(0);\n        /** @type {?} */\n\n        var item = sourceModel.splice(dragIndex, 1)[0]; // console.log('REMOVE');\n        // console.log(sourceModel);\n\n        _this2.dispatch$.next({\n          event: EventTypes.RemoveModel,\n          name: name,\n          args: [el, container, source, item, sourceModel, dragIndex]\n        });\n      });\n      drake.on('drag', function (el, source) {\n        if (!drake.models) {\n          return;\n        }\n\n        dragElm = el;\n        dragIndex = _this2.domIndexOf(el, source);\n      });\n      drake.on('drop', function (dropElm, target, source, sibling) {\n        if (!drake.models || !target) {\n          return;\n        }\n\n        dropIndex = _this2.domIndexOf(dropElm, target);\n        /** @type {?} */\n\n        var sourceModel = drake.models[drake.containers.indexOf(source)];\n        /** @type {?} */\n\n        var targetModel = drake.models[drake.containers.indexOf(target)];\n        /** @type {?} */\n\n        var item;\n\n        if (target === source) {\n          sourceModel = sourceModel.slice(0);\n          item = sourceModel.splice(dragIndex, 1)[0];\n          sourceModel.splice(dropIndex, 0, item); // this was true before we cloned and updated sourceModel,\n          // but targetModel still has the old value\n\n          targetModel = sourceModel;\n        } else {\n          /** @type {?} */\n          var isCopying = dragElm !== dropElm;\n          item = sourceModel[dragIndex];\n\n          if (isCopying) {\n            if (!options.copyItem) {\n              throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\");\n            }\n\n            item = options.copyItem(item);\n          }\n\n          if (!isCopying) {\n            sourceModel = sourceModel.slice(0);\n            sourceModel.splice(dragIndex, 1);\n          }\n\n          targetModel = targetModel.slice(0);\n          targetModel.splice(dropIndex, 0, item);\n\n          if (isCopying) {\n            try {\n              target.removeChild(dropElm);\n            } catch (e) {}\n          }\n        }\n\n        _this2.dispatch$.next({\n          event: EventTypes.DropModel,\n          name: name,\n          args: [dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex]\n        });\n      });\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents(group) {\n      var _this3 = this;\n\n      if (group.initEvents) {\n        return;\n      }\n\n      group.initEvents = true;\n      /** @type {?} */\n\n      var name = group.name;\n      /** @type {?} */\n\n      var emitter = function emitter(event) {\n        group.drake.on(event, function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this3.dispatch$.next({\n            event: event,\n            name: name,\n            args: args\n          });\n        });\n      };\n\n      AllEvents.forEach(emitter);\n    }\n    /**\n     * @param {?} child\n     * @param {?} parent\n     * @return {?}\n     */\n\n  }, {\n    key: \"domIndexOf\",\n    value: function domIndexOf(child, parent) {\n      return Array.prototype.indexOf.call(parent.children, child);\n    }\n  }]);\n\n  return DragulaService;\n}();\n\nDragulaService.Éµfac = function DragulaService_Factory(t) {\n  return new (t || DragulaService)(Éµngcc0.ÉµÉµinject(DrakeFactory, 8));\n};\n\nDragulaService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: DragulaService,\n  factory: DragulaService.Éµfac\n});\n/** @nocollapse */\n\nDragulaService.ctorParameters = function () {\n  return [{\n    type: DrakeFactory,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(DragulaService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DrakeFactory,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar DragulaDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} el\n   * @param {?} dragulaService\n   */\n  function DragulaDirective(el, dragulaService) {\n    _classCallCheck(this, DragulaDirective);\n\n    this.el = el;\n    this.dragulaService = dragulaService;\n    this.dragulaModelChange = new EventEmitter();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(DragulaDirective, [{\n    key: \"container\",\n    get: function get() {\n      return this.el && this.el.nativeElement;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes && changes.dragula) {\n        var _changes$dragula = changes.dragula,\n            prev = _changes$dragula.previousValue,\n            current = _changes$dragula.currentValue,\n            firstChange = _changes$dragula.firstChange;\n        /** @type {?} */\n\n        var hadPreviousValue = !!prev;\n        /** @type {?} */\n\n        var hasNewValue = !!current; // something -> null       =>  teardown only\n        // something -> something  =>  teardown, then setup\n        //      null -> something  =>  setup only\n        //\n        //      null -> null (precluded by fact of change being present)\n\n        if (hadPreviousValue) {\n          this.teardown(prev);\n        }\n\n        if (hasNewValue) {\n          this.setup();\n        }\n      } else if (changes && changes.dragulaModel) {\n        var _changes$dragulaModel = changes.dragulaModel,\n            _prev = _changes$dragulaModel.previousValue,\n            _current = _changes$dragulaModel.currentValue,\n            _firstChange = _changes$dragulaModel.firstChange;\n        var drake = this.group.drake;\n\n        if (this.dragula && drake) {\n          drake.models = drake.models || [];\n          /** @type {?} */\n\n          var prevIndex = drake.models.indexOf(_prev);\n\n          if (prevIndex !== -1) {\n            // delete the previous\n            drake.models.splice(prevIndex, 1); // maybe insert a new one at the same spot\n\n            if (!!_current) {\n              drake.models.splice(prevIndex, 0, _current);\n            }\n          } else if (!!_current) {\n            // no previous one to remove; just push this one.\n            drake.models.push(_current);\n          }\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var _this4 = this;\n\n      /** @type {?} */\n      var checkModel = function checkModel(group) {\n        if (_this4.dragulaModel) {\n          if (group.drake.models) {\n            group.drake.models.push(_this4.dragulaModel);\n          } else {\n            group.drake.models = [_this4.dragulaModel];\n          }\n        }\n      };\n      /** @type {?} */\n\n\n      var group = this.dragulaService.find(this.dragula);\n\n      if (!group) {\n        /** @type {?} */\n        var options = {};\n        group = this.dragulaService.createGroup(this.dragula, options);\n      } // ensure model and container element are pushed\n\n\n      checkModel(group);\n      group.drake.containers.push(this.container);\n      this.subscribe(this.dragula);\n      this.group = group;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(name) {\n      var _this5 = this;\n\n      this.subs = new Subscription();\n      this.subs.add(this.dragulaService.dropModel(name).subscribe(function (_ref18) {\n        var source = _ref18.source,\n            target = _ref18.target,\n            sourceModel = _ref18.sourceModel,\n            targetModel = _ref18.targetModel;\n\n        if (source === _this5.el.nativeElement) {\n          _this5.dragulaModelChange.emit(sourceModel);\n        } else if (target === _this5.el.nativeElement) {\n          _this5.dragulaModelChange.emit(targetModel);\n        }\n      }));\n      this.subs.add(this.dragulaService.removeModel(name).subscribe(function (_ref19) {\n        var source = _ref19.source,\n            sourceModel = _ref19.sourceModel;\n\n        if (source === _this5.el.nativeElement) {\n          _this5.dragulaModelChange.emit(sourceModel);\n        }\n      }));\n    }\n    /**\n     * @param {?} groupName\n     * @return {?}\n     */\n\n  }, {\n    key: \"teardown\",\n    value: function teardown(groupName) {\n      if (this.subs) {\n        this.subs.unsubscribe();\n      }\n      /** @type {?} */\n\n\n      var group = this.dragulaService.find(groupName);\n\n      if (group) {\n        /** @type {?} */\n        var itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\n\n        if (itemToRemove !== -1) {\n          group.drake.containers.splice(itemToRemove, 1);\n        }\n\n        if (this.dragulaModel && group.drake && group.drake.models) {\n          /** @type {?} */\n          var modelIndex = group.drake.models.indexOf(this.dragulaModel);\n\n          if (modelIndex !== -1) {\n            group.drake.models.splice(modelIndex, 1);\n          }\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.teardown(this.dragula);\n    }\n  }]);\n\n  return DragulaDirective;\n}();\n\nDragulaDirective.Éµfac = function DragulaDirective_Factory(t) {\n  return new (t || DragulaDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(DragulaService));\n};\n\nDragulaDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: DragulaDirective,\n  selectors: [[\"\", \"dragula\", \"\"]],\n  inputs: {\n    dragula: \"dragula\",\n    dragulaModel: \"dragulaModel\"\n  },\n  outputs: {\n    dragulaModelChange: \"dragulaModelChange\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n/** @nocollapse */\n\nDragulaDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DragulaService\n  }];\n};\n\nDragulaDirective.propDecorators = {\n  dragula: [{\n    type: Input\n  }],\n  dragulaModel: [{\n    type: Input\n  }],\n  dragulaModelChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(DragulaDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[dragula]'\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }, {\n      type: DragulaService\n    }];\n  }, {\n    dragulaModelChange: [{\n      type: Output\n    }],\n    dragula: [{\n      type: Input\n    }],\n    dragulaModel: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar DragulaModule = /*#__PURE__*/function () {\n  function DragulaModule() {\n    _classCallCheck(this, DragulaModule);\n  }\n\n  _createClass(DragulaModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @return {?}\n     */\n    function forRoot() {\n      return {\n        ngModule: DragulaModule,\n        providers: [DragulaService]\n      };\n    }\n  }]);\n\n  return DragulaModule;\n}();\n\nDragulaModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: DragulaModule\n});\nDragulaModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function DragulaModule_Factory(t) {\n    return new (t || DragulaModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(DragulaModule, {\n    declarations: [DragulaDirective],\n    exports: [DragulaDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(DragulaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [DragulaDirective],\n      declarations: [DragulaDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MockDrakeFactory = new DrakeFactory(function (containers, options) {\n  return new MockDrake(containers, options);\n});\n/**\n * You can use MockDrake to simulate Drake events.\n *\n * The three methods that actually do anything are `on(event, listener)`,\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\n * events, and if you injected MockDrake properly with MockDrakeFactory or\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\n * drags and drops are happening.\n *\n * Caveats:\n *\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\n * 3. None of the other methods do anything.\n *    That's ok, because ng2-dragula doesn't use them.\n */\n\nvar MockDrake = /*#__PURE__*/function () {\n  /**\n   * @param {?=} containers A list of container elements.\n   * @param {?=} options These will NOT be used. At all.\n   * @param {?=} models Nonstandard, but useful for testing using `new MockDrake()` directly.\n   *               Note, default value is undefined, like a real Drake. Don't change that.\n   */\n  function MockDrake() {\n    var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var models = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, MockDrake);\n\n    this.containers = containers;\n    this.options = options;\n    this.models = models;\n    /* Doesn't represent anything meaningful. */\n\n    this.dragging = false;\n    this.emitter$ = new Subject();\n    this.subs = new Subscription();\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _createClass(MockDrake, [{\n    key: \"start\",\n    value: function start(item) {\n      this.dragging = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      this.dragging = false;\n    }\n    /**\n     * @param {?=} revert\n     * @return {?}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(revert) {\n      this.dragging = false;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.dragging = false;\n    }\n    /**\n     * @param {?} event\n     * @param {?} callback\n     * @return {?}\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      this.subs.add(this.emitter$.pipe(filter(function (_ref20) {\n        var eventType = _ref20.eventType;\n        return eventType === event;\n      })).subscribe(function (_ref21) {\n        var args = _ref21.args;\n        callback.apply(void 0, _toConsumableArray(args));\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.subs.unsubscribe();\n    }\n    /**\n     * This is the most useful method. You can use it to manually fire events that would normally\n     * be fired by a real drake.\n     *\n     * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\n     * DragulaService uses to implement [dragulaModel].\n     *\n     * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\n     *\n     * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\n     * @param {?} eventType\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      this.emitter$.next({\n        eventType: eventType,\n        args: args\n      });\n    }\n  }]);\n\n  return MockDrake;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nexport { DragulaDirective, DragulaService, DragulaModule, dragula, DrakeFactory, Group, EventTypes, MockDrake, MockDrakeFactory };","map":{"version":3,"sources":["ng2-dragula/Group.ts","ng2-dragula/EventTypes.ts","ng2-dragula/DrakeFactory.ts","ng2-dragula/components/dragula.service.ts","ng2-dragula/components/dragula.directive.ts","ng2-dragula/components/dragula.module.ts","ng2-dragula/MockDrake.ts"],"names":["(/** @type {?} */ (dragulaExpt)).default"],"mappings":"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","sourcesContent":["import { DrakeWithModels } from \"./DrakeWithModels\";\nimport { DragulaOptions } from \"./DragulaOptions\";\n\nexport class Group {\n  public initEvents: boolean = false;\n  constructor(\n    public name: string,\n    public drake: DrakeWithModels,\n    public options: DragulaOptions\n  ) {}\n}\n","export enum EventTypes {\n    Cancel = \"cancel\",\n    Cloned = \"cloned\",\n    Drag = \"drag\",\n    DragEnd = \"dragend\",\n    Drop = \"drop\",\n    Out = \"out\",\n    Over = \"over\",\n    Remove = \"remove\",\n    Shadow = \"shadow\",\n    DropModel = \"dropModel\",\n    RemoveModel = \"removeModel\",\n}\n\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as any] as EventTypes);\n\n","import { DragulaOptions } from './DragulaOptions';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport * as dragulaExpt from 'dragula';\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\n\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\n\nexport class DrakeFactory {\n  constructor (public build: DrakeBuilder = dragula) {}\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { Group } from '../Group';\nimport { DragulaOptions } from '../DragulaOptions';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { EventTypes, AllEvents } from '../EventTypes';\nimport { DrakeFactory } from '../DrakeFactory';\n\ntype FilterProjector<T extends { name: string; }> = (name: string, args: any[]) => T;\ntype Dispatch = { event: EventTypes; name: string; args: any[]; };\n\nconst filterEvent = <T extends { name: string; }>(\n  eventType: EventTypes,\n  filterDragType: string | undefined,\n  projector: FilterProjector<T>\n) => (input: Observable<Dispatch>): Observable<T> => {\n  return input.pipe(\n    filter(({ event, name }) => {\n      return event === eventType\n          && (filterDragType === undefined || name === filterDragType);\n    }),\n    map(({ name, args }) => projector(name, args))\n  );\n}\n\nconst elContainerSourceProjector =\n  (name: string, [el, container, source]: [Element, Element, Element]) =>\n    ({ name, el, container, source });\n\n@Injectable()\nexport class DragulaService {\n\n  /* https://github.com/bevacqua/dragula#drakeon-events */\n\n  private dispatch$ = new Subject<Dispatch>();\n\n  public drag = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drag,\n      groupName,\n      (name, [el, source]: [Element, Element]) => ({ name, el, source })\n    )\n  );\n\n  public dragend = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DragEnd,\n      groupName,\n      (name, [el]: [Element]) => ({ name, el })\n    )\n  );\n\n  public drop = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drop,\n      groupName,\n      (name, [\n        el, target, source, sibling\n      ]: [Element, Element, Element, Element]) => {\n        return { name, el, target, source, sibling };\n      })\n  );\n\n  private elContainerSource =\n    (eventType: EventTypes) =>\n    (groupName?: string) =>\n    this.dispatch$.pipe(\n      filterEvent(eventType, groupName, elContainerSourceProjector)\n    );\n\n  public cancel = this.elContainerSource(EventTypes.Cancel);\n  public remove = this.elContainerSource(EventTypes.Remove);\n  public shadow = this.elContainerSource(EventTypes.Shadow);\n  public over = this.elContainerSource(EventTypes.Over);\n  public out = this.elContainerSource(EventTypes.Out);\n\n  public cloned = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Cloned,\n      groupName,\n      (name, [\n        clone, original, cloneType\n      ]: [Element, Element, 'mirror' | 'copy']) => {\n        return { name, clone, original, cloneType }\n      })\n  );\n\n  public dropModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DropModel,\n      groupName,\n      (name, [\n        el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex\n      ]: [Element, Element, Element, Element, T, T[], T[], number, number]) => {\n        return { name, el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex }\n      })\n  );\n\n  public removeModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.RemoveModel,\n      groupName,\n      (name, [\n        el, container, source, item, sourceModel, sourceIndex\n      ]: [Element, Element, Element, T, T[], number]) => {\n        return { name, el, container, source, item, sourceModel, sourceIndex }\n      }\n    )\n  );\n\n  private groups: { [k: string]: Group } = {};\n\n  constructor (@Optional() private drakeFactory: DrakeFactory = null) {\n    if (this.drakeFactory === null) {\n      this.drakeFactory = new DrakeFactory();\n    }\n  }\n\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\n  public add(group: Group): Group {\n    let existingGroup = this.find(group.name);\n    if (existingGroup) {\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\n    }\n    this.groups[group.name] = group;\n    this.handleModels(group);\n    this.setupEvents(group);\n    return group;\n  }\n\n  public find(name: string): Group {\n    return this.groups[name];\n  }\n\n  public destroy(name: string): void {\n    let group = this.find(name);\n    if (!group) {\n      return;\n    }\n    group.drake && group.drake.destroy();\n    delete this.groups[name];\n  }\n\n  /**\n   * Creates a group with the specified name and options.\n   *\n   * Note: formerly known as `setOptions`\n   */\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\n    return this.add(new Group(\n      name,\n      this.drakeFactory.build([], options),\n      options\n    ));\n  }\n\n  private handleModels({ name, drake, options }: Group): void {\n    let dragElm: any;\n    let dragIndex: number;\n    let dropIndex: number;\n    drake.on('remove', (el: any, container: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      sourceModel = sourceModel.slice(0); // clone it\n      const item = sourceModel.splice(dragIndex, 1)[0];\n      // console.log('REMOVE');\n      // console.log(sourceModel);\n      this.dispatch$.next({\n        event: EventTypes.RemoveModel,\n        name,\n        args: [ el, container, source, item, sourceModel, dragIndex ]\n      });\n    });\n    drake.on('drag', (el: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      dragElm = el;\n      dragIndex = this.domIndexOf(el, source);\n    });\n    drake.on('drop', (dropElm: any, target: Element, source: Element, sibling?: Element) => {\n      if (!drake.models || !target) {\n        return;\n      }\n      dropIndex = this.domIndexOf(dropElm, target);\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      let targetModel = drake.models[drake.containers.indexOf(target)];\n      // console.log('DROP');\n      // console.log(sourceModel);\n      let item: any;\n      if (target === source) {\n        sourceModel = sourceModel.slice(0)\n        item = sourceModel.splice(dragIndex, 1)[0];\n        sourceModel.splice(dropIndex, 0, item);\n        // this was true before we cloned and updated sourceModel,\n        // but targetModel still has the old value\n        targetModel = sourceModel;\n      } else {\n        let isCopying = dragElm !== dropElm;\n        item = sourceModel[dragIndex];\n        if (isCopying) {\n          if (!options.copyItem) {\n            throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\")\n          }\n          item = options.copyItem(item);\n        }\n\n        if (!isCopying) {\n          sourceModel = sourceModel.slice(0)\n          sourceModel.splice(dragIndex, 1);\n        }\n        targetModel = targetModel.slice(0)\n        targetModel.splice(dropIndex, 0, item);\n        if (isCopying) {\n          try {\n            target.removeChild(dropElm);\n          } catch (e) {}\n        }\n      }\n      this.dispatch$.next({\n        event: EventTypes.DropModel,\n        name,\n        args: [ dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex ]\n      });\n    });\n  }\n\n  private setupEvents(group: Group): void {\n    if (group.initEvents) {\n      return;\n    }\n    group.initEvents = true;\n    const name = group.name;\n    let that: any = this;\n    let emitter = (event: EventTypes) => {\n      group.drake.on(event, (...args: any[]) => {\n        this.dispatch$.next({ event, name, args });\n      });\n    };\n    AllEvents.forEach(emitter);\n  }\n\n  private domIndexOf(child: any, parent: any): any {\n    return Array.prototype.indexOf.call(parent.children, child);\n  }\n}\n","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\nimport { DragulaService } from './dragula.service';\nimport { DrakeWithModels } from '../DrakeWithModels';\nimport { Subscription } from 'rxjs';\nimport { Group } from '../Group';\n\n@Directive({selector: '[dragula]'})\nexport class DragulaDirective implements OnChanges, OnDestroy {\n  @Input() public dragula: string;\n  @Input() public dragulaModel: any[];\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\n\n  private subs: Subscription;\n\n  private get container(): HTMLElement {\n    return this.el && this.el.nativeElement;\n  }\n  private group: Group;\n\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\n  }\n\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\n    if (changes && changes.dragula) {\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\n      let hadPreviousValue = !!prev;\n      let hasNewValue = !!current;\n      // something -> null       =>  teardown only\n      // something -> something  =>  teardown, then setup\n      //      null -> something  =>  setup only\n      //\n      //      null -> null (precluded by fact of change being present)\n      if (hadPreviousValue) {\n        this.teardown(prev);\n      }\n      if (hasNewValue) {\n        this.setup();\n      }\n    } else if (changes && changes.dragulaModel) {\n      // this code only runs when you're not changing the group name\n      // because if you're changing the group name, you'll be doing setup or teardown\n      // it also only runs if there is a group name to attach to.\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\n      const { drake } = this.group;\n      if (this.dragula && drake) {\n        drake.models = drake.models || [];\n        let prevIndex = drake.models.indexOf(prev);\n        if (prevIndex !== -1) {\n          // delete the previous\n          drake.models.splice(prevIndex, 1);\n          // maybe insert a new one at the same spot\n          if (!!current) {\n            drake.models.splice(prevIndex, 0, current);\n          }\n        } else if (!!current) {\n          // no previous one to remove; just push this one.\n          drake.models.push(current);\n        }\n      }\n    }\n  }\n\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\n  // and it would otherwise run twice\n  public setup(): void {\n    let checkModel = (group: Group) => {\n      if (this.dragulaModel) {\n        if (group.drake.models) {\n          group.drake.models.push(this.dragulaModel);\n        } else {\n          group.drake.models = [this.dragulaModel];\n        }\n      }\n    };\n\n    // find or create a group\n    let group = this.dragulaService.find(this.dragula);\n    if (!group) {\n      let options = {};\n      group = this.dragulaService.createGroup(this.dragula, options);\n    }\n\n    // ensure model and container element are pushed\n    checkModel(group);\n    group.drake.containers.push(this.container);\n    this.subscribe(this.dragula);\n\n    this.group = group;\n  }\n\n  public subscribe(name: string) {\n    this.subs = new Subscription();\n    this.subs.add(\n      this.dragulaService\n      .dropModel(name)\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        } else if (target === this.el.nativeElement) {\n          this.dragulaModelChange.emit(targetModel);\n        }\n      })\n    );\n    this.subs.add(\n      this.dragulaService\n      .removeModel(name)\n      .subscribe(({ source, sourceModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        }\n      })\n    );\n  }\n\n  public teardown(groupName: string): void {\n    if (this.subs) {\n      this.subs.unsubscribe();\n    }\n    const group = this.dragulaService.find(groupName);\n    if (group) {\n      const itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\n      if (itemToRemove !== -1) {\n        group.drake.containers.splice(itemToRemove, 1);\n      }\n      if (this.dragulaModel && group.drake && group.drake.models) {\n        let modelIndex = group.drake.models.indexOf(this.dragulaModel);\n        if (modelIndex !== -1) {\n          group.drake.models.splice(modelIndex, 1);\n        }\n      }\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.teardown(this.dragula);\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DragulaDirective } from './dragula.directive';\nimport { DragulaService } from './dragula.service';\n\n@NgModule({\n  exports: [DragulaDirective],\n  declarations: [DragulaDirective],\n})\nexport class DragulaModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragulaModule,\n      providers: [DragulaService]\n    }\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport { filter } from 'rxjs/operators';\nimport { EventTypes } from './EventTypes';\nimport { DragulaOptions } from './DragulaOptions';\nimport { DrakeFactory } from './DrakeFactory';\n\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\n  return new MockDrake(containers, options);\n});\n\n/** You can use MockDrake to simulate Drake events.\n *\n * The three methods that actually do anything are `on(event, listener)`,\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\n * events, and if you injected MockDrake properly with MockDrakeFactory or\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\n * drags and drops are happening.\n *\n * Caveats:\n *\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\n * 3. None of the other methods do anything.\n *    That's ok, because ng2-dragula doesn't use them.\n */\nexport class MockDrake implements DrakeWithModels {\n  /**\n   * @param containers A list of container elements.\n   * @param options These will NOT be used. At all.\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\n   *               Note, default value is undefined, like a real Drake. Don't change that.\n   */\n  constructor(\n    public containers: Element[] = [],\n    public options: DragulaOptions = {},\n    public models?: any[][]\n  ) {}\n\n  /* Doesn't represent anything meaningful. */\n  dragging: boolean = false;\n\n  /* Does nothing useful. */\n  start(item: Element): any {\n    this.dragging = true;\n  }\n  /* Does nothing useful. */\n  end(): any {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  cancel(revert: boolean): any;\n  cancel(): any;\n  cancel(revert?: any) {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  remove(): any {\n    this.dragging = false;\n  }\n\n  // Basic but fully functional event emitter shim\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\n\n  private subs = new Subscription();\n\n  on(event: string, callback: Function): any {\n    this.subs.add(this.emitter$\n      .pipe(\n        filter(({ eventType }) => eventType === event)\n      )\n      .subscribe(({ args }) => {\n        callback(...args);\n      }));\n  }\n\n  destroy(): any {\n    this.subs.unsubscribe();\n  }\n\n  /**\n   * This is the most useful method. You can use it to manually fire events that would normally\n   * be fired by a real drake.\n   *\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\n   * DragulaService uses to implement [dragulaModel].\n   *\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\n   *\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\n   */\n  emit(eventType: EventTypes, ...args: any[]) {\n    this.emitter$.next({ eventType, args })\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}