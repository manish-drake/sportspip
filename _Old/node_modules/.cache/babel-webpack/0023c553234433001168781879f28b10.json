{"ast":null,"code":"import _slicedToArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:/git/sportspip/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param, __awaiter } from 'tslib';\nimport { InjectionToken, Inject, Injectable, EventEmitter, Input, Output, Component, ChangeDetectionStrategy, ViewContainerRef, ComponentFactoryResolver, HostListener, Directive, ɵɵdefineInjectable, Injector, ApplicationRef, TemplateRef, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction SwalPortalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');\nvar fireOnInitToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');\nvar dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\nvar SweetAlert2LoaderService = /*#__PURE__*/function () {\n  // Using any because Angular metadata generator does not understand a pure TS type here\n  function SweetAlert2LoaderService(swalProvider) {\n    _classCallCheck(this, SweetAlert2LoaderService);\n\n    this.swalProvider = swalProvider;\n  }\n\n  _createClass(SweetAlert2LoaderService, [{\n    key: \"swal\",\n    get: function get() {\n      if (!this.swalPromiseCache) {\n        this.preloadSweetAlertLibrary();\n      }\n\n      return this.swalPromiseCache;\n    }\n  }, {\n    key: \"preloadSweetAlertLibrary\",\n    value: function preloadSweetAlertLibrary() {\n      if (this.swalPromiseCache) return;\n      var libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n      this.swalPromiseCache = libPromise.then(function (value) {\n        return isDefaultExport(value) ? value : value.default;\n      });\n\n      function isLoader(value) {\n        return typeof value === 'function' && value.version === undefined;\n      }\n\n      function isDefaultExport(value) {\n        return typeof value === 'function';\n      }\n    }\n  }]);\n\n  return SweetAlert2LoaderService;\n}();\n\nSweetAlert2LoaderService.ɵfac = function SweetAlert2LoaderService_Factory(t) {\n  return new (t || SweetAlert2LoaderService)(ɵngcc0.ɵɵinject(swalProviderToken));\n};\n\nSweetAlert2LoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SweetAlert2LoaderService,\n  factory: function factory(t) {\n    return SweetAlert2LoaderService.ɵfac(t);\n  }\n});\n\nSweetAlert2LoaderService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [swalProviderToken]\n    }]\n  }];\n};\n\nSweetAlert2LoaderService = __decorate([__param(0, Inject(swalProviderToken))], SweetAlert2LoaderService);\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\n\nvar SwalComponent = /*#__PURE__*/function () {\n  function SwalComponent(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {\n    _classCallCheck(this, SwalComponent);\n\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.moduleLevelFireOnInit = moduleLevelFireOnInit;\n    this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n\n    this.beforeOpen = new EventEmitter();\n    /**\n     * Emits an event when the modal is shown.\n     */\n\n    this.open = new EventEmitter();\n    /**\n     * Emits an event when the modal DOM is rendered.\n     */\n\n    this.render = new EventEmitter();\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n\n    this.close = new EventEmitter();\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n\n    this.afterClose = new EventEmitter();\n    /**\n     * Emits an event after the modal had been closed.\n     * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n     * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n     * another popup.\n     */\n\n    this.destroy = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n\n    this.touchedProps = new Set();\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n\n    this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n\n    this.isCurrentlyShown = false;\n  }\n  /**\n   * An object of SweetAlert2 native options, useful if:\n   *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n   *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n   *\n   * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n   *     previous properties you want to erase again.\n   *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n   *\n   * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n   */\n\n\n  _createClass(SwalComponent, [{\n    key: \"swalOptions\",\n    get:\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    function get() {\n      var _this = this;\n\n      //=> We will compute the options object based on the option keys that are known to have changed.\n      //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n      //   avoiding side effects.\n      return _toConsumableArray(this.touchedProps).reduce(function (obj, key) {\n        return Object.assign(Object.assign({}, obj), _defineProperty({}, key, _this[key]));\n      }, {});\n    },\n    set: function set(options) {\n      //=> Update properties\n      Object.assign(this, options); //=> Mark changed properties as touched\n\n      var touchedKeys = Object.keys(options);\n      touchedKeys.forEach(this.markTouched);\n    }\n  }, {\n    key: \"swalVisible\",\n    get: function get() {\n      return this.isCurrentlyShown;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    ,\n    set: function set(visible) {\n      visible ? this.fire() : this.dismiss();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      //=> Preload SweetAlert2 library in case this component is activated.\n      this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n      fireOnInit && this.fire();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n      //   send it with the next fire() or update() calls.\n      Object.keys(changes) //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n      .filter(function (key) {\n        return !key.startsWith('swal');\n      }).forEach(this.markTouched); //=> Eventually trigger re-render if the modal is open.\n\n      void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n      var dismissOnDestroy = this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n      dismissOnDestroy && this.dismiss();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var swal, userOptions, options, result, composeHook;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                composeHook = function _composeHook(userHook, libHook) {\n                  return function () {\n                    return libHook.apply(void 0, arguments), userHook === null || userHook === void 0 ? void 0 : userHook.apply(void 0, arguments);\n                  };\n                };\n\n                _context.next = 3;\n                return this.sweetAlert2Loader.swal;\n\n              case 3:\n                swal = _context.sent;\n                userOptions = this.swalOptions; //=> Build the SweetAlert2 options\n\n                options = Object.assign(Object.assign({}, userOptions), {\n                  //=> Handle modal lifecycle events\n                  onBeforeOpen: composeHook(userOptions.onBeforeOpen, function (modalElement) {\n                    _this2.beforeOpen.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onOpen: composeHook(userOptions.onOpen, function (modalElement) {\n                    _this2.isCurrentlyShown = true;\n\n                    _this2.open.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onRender: composeHook(userOptions.onRender, function (modalElement) {\n                    _this2.render.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onClose: composeHook(userOptions.onClose, function (modalElement) {\n                    _this2.isCurrentlyShown = false;\n\n                    _this2.close.emit({\n                      modalElement: modalElement\n                    });\n                  }),\n                  onAfterClose: composeHook(userOptions.onAfterClose, function () {\n                    _this2.afterClose.emit();\n                  }),\n                  onDestroy: composeHook(userOptions.onDestroy, function () {\n                    _this2.destroy.emit();\n                  })\n                }); //=> Show the Swal! And wait for confirmation or dimissal.\n\n                _context.next = 8;\n                return swal.fire(options);\n\n              case 8:\n                result = _context.sent;\n\n                //=> Emit on (confirm) or (cancel)\n                if ('value' in result) {\n                  this.confirm.emit(result.value);\n                } else {\n                  this.cancel.emit(result.dismiss);\n                }\n\n                return _context.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(result) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var swal;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isCurrentlyShown) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.next = 4;\n                return this.sweetAlert2Loader.swal;\n\n              case 4:\n                swal = _context2.sent;\n                swal.close(result);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var swal, allOptions, updatableOptions;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (options) {\n                  this.swalOptions = options;\n                }\n\n                if (this.isCurrentlyShown) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.next = 5;\n                return this.sweetAlert2Loader.swal;\n\n              case 5:\n                swal = _context3.sent;\n                allOptions = this.swalOptions;\n                updatableOptions = Object.keys(allOptions).filter(swal.isUpdatableParameter).reduce(function (obj, key) {\n                  return Object.assign(Object.assign({}, obj), _defineProperty({}, key, allOptions[key]));\n                }, {});\n                swal.update(updatableOptions);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return SwalComponent;\n}();\n\nSwalComponent.ɵfac = function SwalComponent_Factory(t) {\n  return new (t || SwalComponent)(ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(fireOnInitToken), ɵngcc0.ɵɵdirectiveInject(dismissOnDestroyToken));\n};\n\nSwalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwalComponent,\n  selectors: [[\"swal\"]],\n  inputs: {\n    swalOptions: \"swalOptions\",\n    swalVisible: \"swalVisible\",\n    title: \"title\",\n    titleText: \"titleText\",\n    text: \"text\",\n    html: \"html\",\n    footer: \"footer\",\n    icon: \"icon\",\n    iconHtml: \"iconHtml\",\n    backdrop: \"backdrop\",\n    toast: \"toast\",\n    target: \"target\",\n    input: \"input\",\n    width: \"width\",\n    padding: \"padding\",\n    background: \"background\",\n    position: \"position\",\n    grow: \"grow\",\n    showClass: \"showClass\",\n    hideClass: \"hideClass\",\n    customClass: \"customClass\",\n    timer: \"timer\",\n    timerProgressBar: \"timerProgressBar\",\n    animation: \"animation\",\n    heightAuto: \"heightAuto\",\n    allowOutsideClick: \"allowOutsideClick\",\n    allowEscapeKey: \"allowEscapeKey\",\n    allowEnterKey: \"allowEnterKey\",\n    stopKeydownPropagation: \"stopKeydownPropagation\",\n    keydownListenerCapture: \"keydownListenerCapture\",\n    showConfirmButton: \"showConfirmButton\",\n    showCancelButton: \"showCancelButton\",\n    confirmButtonText: \"confirmButtonText\",\n    cancelButtonText: \"cancelButtonText\",\n    confirmButtonColor: \"confirmButtonColor\",\n    cancelButtonColor: \"cancelButtonColor\",\n    confirmButtonAriaLabel: \"confirmButtonAriaLabel\",\n    cancelButtonAriaLabel: \"cancelButtonAriaLabel\",\n    buttonsStyling: \"buttonsStyling\",\n    reverseButtons: \"reverseButtons\",\n    focusConfirm: \"focusConfirm\",\n    focusCancel: \"focusCancel\",\n    showCloseButton: \"showCloseButton\",\n    closeButtonHtml: \"closeButtonHtml\",\n    closeButtonAriaLabel: \"closeButtonAriaLabel\",\n    showLoaderOnConfirm: \"showLoaderOnConfirm\",\n    preConfirm: \"preConfirm\",\n    imageUrl: \"imageUrl\",\n    imageWidth: \"imageWidth\",\n    imageHeight: \"imageHeight\",\n    imageAlt: \"imageAlt\",\n    inputPlaceholder: \"inputPlaceholder\",\n    inputValue: \"inputValue\",\n    inputOptions: \"inputOptions\",\n    inputAutoTrim: \"inputAutoTrim\",\n    inputAttributes: \"inputAttributes\",\n    inputValidator: \"inputValidator\",\n    validationMessage: \"validationMessage\",\n    progressSteps: \"progressSteps\",\n    currentProgressStep: \"currentProgressStep\",\n    progressStepsDistance: \"progressStepsDistance\",\n    scrollbarPadding: \"scrollbarPadding\",\n    swalFireOnInit: \"swalFireOnInit\",\n    swalDismissOnDestroy: \"swalDismissOnDestroy\"\n  },\n  outputs: {\n    beforeOpen: \"beforeOpen\",\n    open: \"open\",\n    render: \"render\",\n    close: \"close\",\n    afterClose: \"afterClose\",\n    destroy: \"destroy\",\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function SwalComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nSwalComponent.ctorParameters = function () {\n  return [{\n    type: SweetAlert2LoaderService\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [fireOnInitToken]\n    }]\n  }, {\n    type: Boolean,\n    decorators: [{\n      type: Inject,\n      args: [dismissOnDestroyToken]\n    }]\n  }];\n};\n\n__decorate([Input()], SwalComponent.prototype, \"title\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"titleText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"text\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"html\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"footer\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"icon\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"iconHtml\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"backdrop\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"toast\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"target\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"input\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"width\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"padding\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"background\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"position\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"grow\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"hideClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"customClass\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"timer\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"timerProgressBar\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"animation\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"heightAuto\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowOutsideClick\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowEscapeKey\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"allowEnterKey\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"stopKeydownPropagation\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"keydownListenerCapture\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showConfirmButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showCancelButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonText\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonColor\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonColor\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"confirmButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"cancelButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"buttonsStyling\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"reverseButtons\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"focusConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"focusCancel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showCloseButton\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"closeButtonHtml\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"closeButtonAriaLabel\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"showLoaderOnConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"preConfirm\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageUrl\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageWidth\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageHeight\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"imageAlt\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputPlaceholder\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputValue\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputOptions\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputAutoTrim\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputAttributes\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"inputValidator\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"validationMessage\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"progressSteps\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"currentProgressStep\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"progressStepsDistance\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"scrollbarPadding\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalOptions\", null);\n\n__decorate([Input()], SwalComponent.prototype, \"swalFireOnInit\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalDismissOnDestroy\", void 0);\n\n__decorate([Input()], SwalComponent.prototype, \"swalVisible\", null);\n\n__decorate([Output()], SwalComponent.prototype, \"beforeOpen\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"open\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"render\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"close\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"afterClose\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"destroy\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"confirm\", void 0);\n\n__decorate([Output()], SwalComponent.prototype, \"cancel\", void 0);\n\nSwalComponent = __decorate([__param(1, Inject(fireOnInitToken)), __param(2, Inject(dismissOnDestroyToken))], SwalComponent);\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n\nvar SwalDirective = /*#__PURE__*/function () {\n  function SwalDirective(viewContainerRef, resolver) {\n    _classCallCheck(this, SwalDirective);\n\n    this.viewContainerRef = viewContainerRef;\n    this.resolver = resolver;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n\n    this.confirm = new EventEmitter();\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n\n    this.cancel = new EventEmitter();\n  }\n  /**\n   * SweetAlert2 options or a SwalComponent instance.\n   * See the class doc block for more informations.\n   */\n\n\n  _createClass(SwalDirective, [{\n    key: \"swal\",\n    set: function set(options) {\n      if (options instanceof SwalComponent) {\n        this.swalInstance = options;\n      } else if (isArrayOptions(options)) {\n        this.swalOptions = {};\n\n        var _options = _slicedToArray(options, 3);\n\n        this.swalOptions.title = _options[0];\n        this.swalOptions.text = _options[1];\n        this.swalOptions.icon = _options[2];\n      } else {\n        this.swalOptions = options;\n      }\n\n      function isArrayOptions(value) {\n        return Array.isArray(options);\n      }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.swalInstance) {\n        var factory = this.resolver.resolveComponentFactory(SwalComponent);\n        this.swalRef = this.viewContainerRef.createComponent(factory);\n        this.swalInstance = this.swalRef.instance;\n      }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.swalRef) {\n        this.swalRef.destroy();\n      }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      if (!this.swalInstance) return;\n\n      if (this.swalOptions) {\n        this.swalInstance.swalOptions = this.swalOptions;\n      }\n\n      var swalClosed = new Subject();\n      this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(function (v) {\n        return _this3.confirm.emit(v);\n      });\n      this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(function (v) {\n        return _this3.cancel.emit(v);\n      });\n      this.swalInstance.fire().then(function () {\n        return swalClosed.next();\n      });\n    }\n  }]);\n\n  return SwalDirective;\n}();\n\nSwalDirective.ɵfac = function SwalDirective_Factory(t) {\n  return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver));\n};\n\nSwalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SwalDirective,\n  selectors: [[\"\", \"swal\", \"\"]],\n  hostBindings: function SwalDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function SwalDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    swal: \"swal\"\n  },\n  outputs: {\n    confirm: \"confirm\",\n    cancel: \"cancel\"\n  }\n});\n\nSwalDirective.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: ComponentFactoryResolver\n  }];\n};\n\n__decorate([Input()], SwalDirective.prototype, \"swal\", null);\n\n__decorate([Output()], SwalDirective.prototype, \"confirm\", void 0);\n\n__decorate([Output()], SwalDirective.prototype, \"cancel\", void 0);\n\n__decorate([HostListener('click', ['$event'])], SwalDirective.prototype, \"onClick\", null);\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n\n\nvar SwalPortalTargets = function SwalPortalTargets() {\n  _classCallCheck(this, SwalPortalTargets);\n\n  /**\n   * Targets the modal close button block contents.\n   */\n  this.closeButton = {\n    element: function element(swal) {\n      return swal.getCloseButton();\n    },\n    options: {\n      showCloseButton: true\n    }\n  };\n  /**\n   * Targets the modal title block contents.\n   */\n\n  this.title = {\n    element: function element(swal) {\n      return swal.getTitle();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      title: ' '\n    }\n  };\n  /**\n   * Targets the modal text block contents (that is another block inside the first content block, so you can still\n   * use other modal features like Swal inputs, that are situated inside that parent content block).\n   */\n\n  this.content = {\n    element: function element(swal) {\n      return swal.getHtmlContainer();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      text: ' '\n    }\n  };\n  /**\n   * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n   * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n   *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n   *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n   *     performance of everyone, for a relatively rare use case.\n   */\n\n  this.actions = {\n    element: function element(swal) {\n      return swal.getActions();\n    },\n    // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the confirm button contents, replacing the text inside it (not the button itself)\n   */\n\n  this.confirmButton = {\n    element: function element(swal) {\n      return swal.getConfirmButton();\n    },\n    options: {\n      showConfirmButton: true\n    }\n  };\n  /**\n   * Targets the cancel button contents, replacing the text inside it (not the button itself)\n   */\n\n  this.cancelButton = {\n    element: function element(swal) {\n      return swal.getCancelButton();\n    },\n    options: {\n      showCancelButton: true\n    }\n  };\n  /**\n   * Targets the modal footer contents.\n   */\n\n  this.footer = {\n    element: function element(swal) {\n      return swal.getFooter();\n    },\n    // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n    options: {\n      footer: ' '\n    }\n  };\n};\n\nSwalPortalTargets.ɵfac = function SwalPortalTargets_Factory(t) {\n  return new (t || SwalPortalTargets)();\n};\n\nSwalPortalTargets.ɵprov = ɵɵdefineInjectable({\n  factory: function SwalPortalTargets_Factory() {\n    return new SwalPortalTargets();\n  },\n  token: SwalPortalTargets,\n  providedIn: \"root\"\n});\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n\nvar SwalPortalComponent = function SwalPortalComponent() {\n  _classCallCheck(this, SwalPortalComponent);\n\n  this.template = null;\n};\n\nSwalPortalComponent.ɵfac = function SwalPortalComponent_Factory(t) {\n  return new (t || SwalPortalComponent)();\n};\n\nSwalPortalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SwalPortalComponent,\n  selectors: [[\"swal-portal\"]],\n  inputs: {\n    template: \"template\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngTemplateOutlet\"]],\n  template: function SwalPortalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, SwalPortalComponent_ng_container_0_Template, 1, 0, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template);\n    }\n  },\n  directives: [ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([Input()], SwalPortalComponent.prototype, \"template\", void 0);\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n\n\nvar SwalPortalDirective = /*#__PURE__*/function () {\n  function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n    _classCallCheck(this, SwalPortalDirective);\n\n    this.resolver = resolver;\n    this.injector = injector;\n    this.app = app;\n    this.templateRef = templateRef;\n    this.sweetAlert2Loader = sweetAlert2Loader;\n    this.swalTargets = swalTargets;\n    this.swalComponent = swalComponent;\n    this.destroyed = new Subject();\n  }\n  /**\n   * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n   * that will receive the consumer's template.\n   */\n\n\n  _createClass(SwalPortalDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n      this.target = this.target || this.swalTargets.content; //=> Apply the options provided by the target definition\n\n      void this.swalComponent.update(this.target.options); //=> Subscribe to a few hooks frm the parent SwalComponent.\n\n      this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n      this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n      this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.next();\n    }\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n\n  }, {\n    key: \"renderHook\",\n    value: function renderHook() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var swal, targetEl;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //=> Ensure the portal component is created\n                if (!this.portalComponentRef) {\n                  this.portalComponentRef = this.createPortalComponent();\n                } //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n                // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n                // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n                // the portal component is fully synchronous, causing no blinks in the modal contents.\n\n\n                _context4.next = 3;\n                return this.sweetAlert2Loader.swal;\n\n              case 3:\n                swal = _context4.sent;\n                //=> Find target element\n                targetEl = this.target.element(swal);\n\n                if (targetEl) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                //=> Replace target's contents with our component\n                // https://jsperf.com/innerhtml-vs-removechild/15\n                while (targetEl.firstChild) {\n                  targetEl.removeChild(targetEl.firstChild);\n                }\n\n                targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n\n  }, {\n    key: \"beforeOpenHook\",\n    value: function beforeOpenHook() {\n      if (!this.portalComponentRef) return; //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n\n      this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n\n  }, {\n    key: \"destroyHook\",\n    value: function destroyHook() {\n      if (!this.portalComponentRef) return; //=> Detach the portal component from the app and destroy it\n\n      this.app.detachView(this.portalComponentRef.hostView);\n      this.portalComponentRef.destroy();\n      this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n\n  }, {\n    key: \"createPortalComponent\",\n    value: function createPortalComponent() {\n      //=> Create the SwalPortalComponent that will hold our content\n      var factory = this.resolver.resolveComponentFactory(SwalPortalComponent); // Yes, we do not use the third argument that would directly use the target as the component's view\n      // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n      // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n      // able to restore it at any moment, ie. after the modal has been re-rendered.\n\n      var componentRef = factory.create(this.injector, []); //=> Apply the consumer's template on the component\n\n      componentRef.instance.template = this.templateRef;\n      return componentRef;\n    }\n  }]);\n\n  return SwalPortalDirective;\n}();\n\nSwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) {\n  return new (t || SwalPortalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(SwalPortalTargets), ɵngcc0.ɵɵdirectiveInject(SwalComponent, 1));\n};\n\nSwalPortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: SwalPortalDirective,\n  selectors: [[\"\", \"swalPortal\", \"\"]],\n  inputs: {\n    target: [\"swalPortal\", \"target\"]\n  }\n});\n\nSwalPortalDirective.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: Injector\n  }, {\n    type: ApplicationRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: SweetAlert2LoaderService\n  }, {\n    type: SwalPortalTargets\n  }, {\n    type: SwalComponent,\n    decorators: [{\n      type: Host\n    }]\n  }];\n};\n\n__decorate([Input('swalPortal')], SwalPortalDirective.prototype, \"target\", void 0);\n\nSwalPortalDirective = __decorate([__param(6, Host())], SwalPortalDirective);\nvar SweetAlert2Module_1;\n\nfunction provideDefaultSwal() {\n  return import('sweetalert2');\n}\n\nvar SweetAlert2Module = SweetAlert2Module_1 = /*#__PURE__*/function () {\n  function SweetAlert2Module() {\n    _classCallCheck(this, SweetAlert2Module);\n  }\n\n  _createClass(SweetAlert2Module, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: SweetAlert2Module_1,\n        providers: [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal || provideDefaultSwal\n        }, {\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit || false\n        }, {\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy || true\n        }]\n      };\n    }\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: SweetAlert2Module_1,\n        providers: [].concat(_toConsumableArray(options.provideSwal ? [SweetAlert2LoaderService, {\n          provide: swalProviderToken,\n          useValue: options.provideSwal\n        }] : []), _toConsumableArray(options.fireOnInit !== undefined ? [{\n          provide: fireOnInitToken,\n          useValue: options.fireOnInit\n        }] : []), _toConsumableArray(options.dismissOnDestroy !== undefined ? [{\n          provide: dismissOnDestroyToken,\n          useValue: options.dismissOnDestroy\n        }] : []))\n      };\n    }\n  }]);\n\n  return SweetAlert2Module;\n}();\n\nSweetAlert2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SweetAlert2Module\n});\nSweetAlert2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SweetAlert2Module_Factory(t) {\n    return new (t || SweetAlert2Module)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2LoaderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [swalProviderToken]\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line:component-selector\n      selector: 'swal',\n      template: '',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: SweetAlert2LoaderService\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [fireOnInitToken]\n      }]\n    }, {\n      type: Boolean,\n      decorators: [{\n        type: Inject,\n        args: [dismissOnDestroyToken]\n      }]\n    }];\n  }, {\n    beforeOpen: [{\n      type: Output\n    }],\n    open: [{\n      type: Output\n    }],\n    render: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    afterClose: [{\n      type: Output\n    }],\n    destroy: [{\n      type: Output\n    }],\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    swalOptions: [{\n      type: Input\n    }],\n    swalVisible: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    titleText: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    html: [{\n      type: Input\n    }],\n    footer: [{\n      type: Input\n    }],\n    icon: [{\n      type: Input\n    }],\n    iconHtml: [{\n      type: Input\n    }],\n    backdrop: [{\n      type: Input\n    }],\n    toast: [{\n      type: Input\n    }],\n    target: [{\n      type: Input\n    }],\n    input: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    padding: [{\n      type: Input\n    }],\n    background: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    grow: [{\n      type: Input\n    }],\n    showClass: [{\n      type: Input\n    }],\n    hideClass: [{\n      type: Input\n    }],\n    customClass: [{\n      type: Input\n    }],\n    timer: [{\n      type: Input\n    }],\n    timerProgressBar: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    heightAuto: [{\n      type: Input\n    }],\n    allowOutsideClick: [{\n      type: Input\n    }],\n    allowEscapeKey: [{\n      type: Input\n    }],\n    allowEnterKey: [{\n      type: Input\n    }],\n    stopKeydownPropagation: [{\n      type: Input\n    }],\n    keydownListenerCapture: [{\n      type: Input\n    }],\n    showConfirmButton: [{\n      type: Input\n    }],\n    showCancelButton: [{\n      type: Input\n    }],\n    confirmButtonText: [{\n      type: Input\n    }],\n    cancelButtonText: [{\n      type: Input\n    }],\n    confirmButtonColor: [{\n      type: Input\n    }],\n    cancelButtonColor: [{\n      type: Input\n    }],\n    confirmButtonAriaLabel: [{\n      type: Input\n    }],\n    cancelButtonAriaLabel: [{\n      type: Input\n    }],\n    buttonsStyling: [{\n      type: Input\n    }],\n    reverseButtons: [{\n      type: Input\n    }],\n    focusConfirm: [{\n      type: Input\n    }],\n    focusCancel: [{\n      type: Input\n    }],\n    showCloseButton: [{\n      type: Input\n    }],\n    closeButtonHtml: [{\n      type: Input\n    }],\n    closeButtonAriaLabel: [{\n      type: Input\n    }],\n    showLoaderOnConfirm: [{\n      type: Input\n    }],\n    preConfirm: [{\n      type: Input\n    }],\n    imageUrl: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageAlt: [{\n      type: Input\n    }],\n    inputPlaceholder: [{\n      type: Input\n    }],\n    inputValue: [{\n      type: Input\n    }],\n    inputOptions: [{\n      type: Input\n    }],\n    inputAutoTrim: [{\n      type: Input\n    }],\n    inputAttributes: [{\n      type: Input\n    }],\n    inputValidator: [{\n      type: Input\n    }],\n    validationMessage: [{\n      type: Input\n    }],\n    progressSteps: [{\n      type: Input\n    }],\n    currentProgressStep: [{\n      type: Input\n    }],\n    progressStepsDistance: [{\n      type: Input\n    }],\n    scrollbarPadding: [{\n      type: Input\n    }],\n    swalFireOnInit: [{\n      type: Input\n    }],\n    swalDismissOnDestroy: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swal]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }];\n  }, {\n    confirm: [{\n      type: Output\n    }],\n    cancel: [{\n      type: Output\n    }],\n    swal: [{\n      type: Input\n    }],\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalTargets, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'swal-portal',\n      template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [];\n  }, {\n    template: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SwalPortalDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[swalPortal]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: SweetAlert2LoaderService\n    }, {\n      type: SwalPortalTargets\n    }, {\n      type: SwalComponent,\n      decorators: [{\n        type: Host\n      }]\n    }];\n  }, {\n    target: [{\n      type: Input,\n      args: ['swalPortal']\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, {\n    declarations: function declarations() {\n      return [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [SwalComponent, SwalPortalDirective, SwalDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{\n    type: NgModule,\n    args: [{\n      declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n      imports: [CommonModule],\n      exports: [SwalComponent, SwalPortalDirective, SwalDirective],\n      entryComponents: [SwalComponent, SwalPortalComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SwalComponent, SwalDirective, SwalPortalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module, provideDefaultSwal as ɵa, swalProviderToken as ɵb, fireOnInitToken as ɵc, dismissOnDestroyToken as ɵd, SwalPortalComponent as ɵe };","map":{"version":3,"sources":["@sweetalert2/ngx-sweetalert2/lib/di.ts","@sweetalert2/ngx-sweetalert2/lib/sweetalert2-loader.service.ts","@sweetalert2/ngx-sweetalert2/lib/swal.component.ts","@sweetalert2/ngx-sweetalert2/lib/swal.directive.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal-targets.service.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal.component.ts","@sweetalert2/ngx-sweetalert2/lib/swal-portal.directive.ts","@sweetalert2/ngx-sweetalert2/lib/sweetalert2.module.ts","@sweetalert2/ngx-sweetalert2/sweetalert2-ngx-sweetalert2.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport Swal from 'sweetalert2';\n\nexport const swalProviderToken = new InjectionToken<typeof Swal>('@sweetalert2/ngx-sweetalert2#swalProvider');\n\nexport const fireOnInitToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#fireOnInit');\n\nexport const dismissOnDestroyToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n","import { Inject, Injectable } from '@angular/core';\nimport SwalDefault, * as Swal from 'sweetalert2';\nimport { swalProviderToken } from './di';\n\nexport type SwalModule = typeof SwalDefault | typeof Swal;\n\nexport type SwalProvider = SwalModuleLoader | SwalModule;\n\nexport type SwalModuleLoader = () => Promise<SwalModule>;\n\n@Injectable()\nexport class SweetAlert2LoaderService {\n    private readonly swalProvider: SwalProvider;\n\n    private swalPromiseCache?: Promise<typeof SwalDefault>;\n\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    public constructor(@Inject(swalProviderToken) swalProvider: any) {\n        this.swalProvider = swalProvider;\n    }\n\n    public get swal(): Promise<typeof SwalDefault> {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n\n        return this.swalPromiseCache!;\n    }\n\n    public preloadSweetAlertLibrary(): void {\n        if (this.swalPromiseCache) return;\n\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n        function isLoader(value: SwalProvider): value is SwalModuleLoader {\n            return typeof value === 'function' && (value as any).version === undefined;\n        }\n\n        function isDefaultExport(value: SwalModule): value is typeof SwalDefault {\n            return typeof value === 'function';\n        }\n    }\n}\n","import {\n    AfterViewInit, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit,\n    Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions, SweetAlertResult, SweetAlertUpdatableParameters } from 'sweetalert2';\nimport { dismissOnDestroyToken, fireOnInitToken } from './di';\nimport * as events from './swal-events';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public icon: SweetAlertOptions['icon'];\n    @Input() public iconHtml: SweetAlertOptions['iconHtml'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public showClass: SweetAlertOptions['showClass'];\n    @Input() public hideClass: SweetAlertOptions['hideClass'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public timerProgressBar: SweetAlertOptions['timerProgressBar'];\n    /** @deprecated Use showClass and hideClass instead */\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public heightAuto: SweetAlertOptions['heightAuto'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public stopKeydownPropagation: SweetAlertOptions['stopKeydownPropagation'];\n    @Input() public keydownListenerCapture: SweetAlertOptions['keydownListenerCapture'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonHtml: SweetAlertOptions['closeButtonHtml'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public validationMessage: SweetAlertOptions['validationMessage'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n    @Input() public scrollbarPadding: SweetAlertOptions['scrollbarPadding'];\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input()\n    public set swalOptions(options: SweetAlertOptions) {\n        //=> Update properties\n        Object.assign(this, options);\n\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options) as Array<keyof SweetAlertOptions>;\n        touchedKeys.forEach(this.markTouched);\n    }\n\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    public get swalOptions(): SweetAlertOptions {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce<SweetAlertOptions>(\n            (obj, key) => ({ ...obj, [key]: this[key as keyof this] }),\n            {});\n    }\n\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    @Input()\n    public swalFireOnInit?: boolean;\n\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    @Input()\n    public swalDismissOnDestroy?: boolean;\n\n    @Input()\n    public set swalVisible(visible: boolean) {\n        visible ? this.fire() : this.dismiss();\n    }\n\n    public get swalVisible(): boolean {\n        return this.isCurrentlyShown;\n    }\n\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output()\n    public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an event when the modal is shown.\n     */\n    @Output()\n    public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits an event when the modal DOM is rendered.\n     */\n    @Output()\n    public readonly render = new EventEmitter<events.RenderEvent>();\n\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly afterClose = new EventEmitter<void>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n     * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n     * another popup.\n     */\n    @Output()\n    public readonly destroy = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    private isCurrentlyShown = false;\n\n    public constructor(\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        @Inject(fireOnInitToken) private readonly moduleLevelFireOnInit: boolean,\n        @Inject(dismissOnDestroyToken) private readonly moduleLevelDismissOnDestroy: boolean) {\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    public ngOnInit(): void {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    public ngAfterViewInit(): void {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n\n        fireOnInit && this.fire();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key): key is keyof SweetAlertOptions => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    public ngOnDestroy(): void {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n\n        dismissOnDestroy && this.dismiss();\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public async fire(): Promise<SweetAlertResult> {\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const userOptions = this.swalOptions;\n\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: composeHook(userOptions.onBeforeOpen, (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            }),\n            onOpen: composeHook(userOptions.onOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            }),\n            onRender: composeHook(userOptions.onRender, (modalElement) => {\n                this.render.emit({ modalElement });\n            }),\n            onClose: composeHook(userOptions.onClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }),\n            onAfterClose: composeHook(userOptions.onAfterClose, () => {\n                this.afterClose.emit();\n            }),\n            onDestroy: composeHook(userOptions.onDestroy, () => {\n                this.destroy.emit();\n            })\n        };\n\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n\n        //=> Emit on (confirm) or (cancel)\n        if ('value' in result) {\n            this.confirm.emit(result.value);\n        } else {\n            this.cancel.emit(result.dismiss);\n        }\n\n        return result;\n\n        function composeHook<T extends (...args: any[]) => void>(\n            userHook: T | undefined,\n            libHook: T): (...args: Parameters<T>) => void {\n\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n    public async dismiss(result?: SweetAlertResult): Promise<void> {\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    public async update(options?: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): Promise<void> {\n        if (options) {\n            this.swalOptions = options;\n        }\n\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const allOptions = this.swalOptions;\n\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce<Pick<SweetAlertOptions, SweetAlertUpdatableParameters>>(\n                (obj, key) => ({ ...obj, [key]: allOptions[key] }),\n                {});\n\n        swal.update(updatableOptions);\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        } else {\n            this.swalOptions = options;\n        }\n\n        function isArrayOptions(value: any): value is SweetAlertArrayOptions {\n            return Array.isArray(options);\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef?: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance?: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions?: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (!this.swalInstance) return;\n\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n\n        const swalClosed = new Subject();\n\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\n","import { Injectable } from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\n\nexport interface SwalPortalTarget {\n    options?: SweetAlertOptions;\n    element(swal: typeof Swal): HTMLElement | null;\n}\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n@Injectable({ providedIn: 'root' })\nexport class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    public readonly closeButton: SwalPortalTarget = {\n        element: swal => swal.getCloseButton(),\n        options: { showCloseButton: true }\n    };\n\n    /**\n     * Targets the modal title block contents.\n     */\n    public readonly title: SwalPortalTarget = {\n        element: swal => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: ' ' }\n    };\n\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    public readonly content: SwalPortalTarget = {\n        element: swal => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: ' ' }\n    };\n\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    public readonly actions: SwalPortalTarget = {\n        element: swal => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly confirmButton: SwalPortalTarget = {\n        element: swal => swal.getConfirmButton(),\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly cancelButton: SwalPortalTarget = {\n        element: swal => swal.getCancelButton(),\n        options: { showCancelButton: true }\n    };\n\n    /**\n     * Targets the modal footer contents.\n     */\n    public readonly footer: SwalPortalTarget = {\n        element: swal => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: ' ' }\n    };\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n@Component({\n    selector: 'swal-portal',\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPortalComponent {\n    @Input() public template: TemplateRef<any> | null = null;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalComponent } from './swal.component';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPortal]'\n})\nexport class SwalPortalDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input('swalPortal') public target?: SwalPortalTarget;\n\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    private portalComponentRef?: ComponentRef<SwalPortalComponent>;\n\n    private readonly destroyed = new Subject<void>();\n\n    public constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        private readonly swalTargets: SwalPortalTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n        this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    public ngOnDestroy(): void {\n        this.destroyed.next();\n    }\n\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    private async renderHook(): Promise<void> {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n\n        //=> Find target element\n        const targetEl = this.target!.element(swal);\n        if (!targetEl) return;\n\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    private beforeOpenHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    private destroyHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    private createPortalComponent(): ComponentRef<SwalPortalComponent> {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n\n        return componentRef;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalPortalDirective } from './swal-portal.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nimport { SwalProvider, SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\nexport interface Sweetalert2ModuleConfig {\n    provideSwal?: SwalProvider;\n    fireOnInit?: boolean;\n    dismissOnDestroy?: boolean;\n}\n\nexport function provideDefaultSwal() {\n    return import('sweetalert2');\n}\n\n@NgModule({\n    declarations: [\n        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPortalDirective, SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPortalComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n\n    public static forChild(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {dismissOnDestroyToken as ɵd,fireOnInitToken as ɵc,swalProviderToken as ɵb} from './lib/di';\nexport {SwalPortalComponent as ɵe} from './lib/swal-portal.component';\nexport {provideDefaultSwal as ɵa} from './lib/sweetalert2.module';"]},"metadata":{},"sourceType":"module"}