{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './interfaces';\nimport * as ɵngcc2 from '@angular/common/http';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpHeaders, HttpParams, HttpResponse, HttpXhrBackend, XhrFactory } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { STATUS } from './http-status-codes';\nimport { InMemoryBackendConfig, InMemoryBackendConfigArgs, InMemoryDbService } from './interfaces';\nimport { BackendService } from './backend.service';\n/**\r\n * For Angular `HttpClient` simulate the behavior of a RESTy web api\r\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\r\n * Conforms mostly to behavior described here:\r\n * http://www.restapitutorial.com/lessons/httpmethods.html\r\n *\r\n * ### Usage\r\n *\r\n * Create an in-memory data store class that implements `InMemoryDbService`.\r\n * Call `config` static method with this service class and optional configuration object:\r\n * ```\r\n * // other imports\r\n * import { HttpClientModule } from '@angular/common/http';\r\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\r\n *\r\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\r\n * @NgModule({\r\n *  imports: [\r\n *    HttpModule,\r\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\r\n *    ...\r\n *  ],\r\n *  ...\r\n * })\r\n * export class AppModule { ... }\r\n * ```\r\n */\n\nvar HttpClientBackendService =\n/** @class */\nfunction (_super) {\n  __extends(HttpClientBackendService, _super);\n\n  function HttpClientBackendService(inMemDbService, config, xhrFactory) {\n    var _this = _super.call(this, inMemDbService, config) || this;\n\n    _this.xhrFactory = xhrFactory;\n    return _this;\n  }\n\n  HttpClientBackendService.prototype.handle = function (req) {\n    try {\n      return this.handleRequest(req);\n    } catch (error) {\n      var err = error.message || error;\n      var resOptions_1 = this.createErrorResponseOptions(req.url, STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n      return this.createResponse$(function () {\n        return resOptions_1;\n      });\n    }\n  }; ////  protected overrides /////\n\n\n  HttpClientBackendService.prototype.getJsonBody = function (req) {\n    return req.body;\n  };\n\n  HttpClientBackendService.prototype.getRequestMethod = function (req) {\n    return (req.method || 'get').toLowerCase();\n  };\n\n  HttpClientBackendService.prototype.createHeaders = function (headers) {\n    return new HttpHeaders(headers);\n  };\n\n  HttpClientBackendService.prototype.createQueryMap = function (search) {\n    var map = new Map();\n\n    if (search) {\n      var params_1 = new HttpParams({\n        fromString: search\n      });\n      params_1.keys().forEach(function (p) {\n        return map.set(p, params_1.getAll(p));\n      });\n    }\n\n    return map;\n  };\n\n  HttpClientBackendService.prototype.createResponse$fromResponseOptions$ = function (resOptions$) {\n    return resOptions$.pipe(map(function (opts) {\n      return new HttpResponse(opts);\n    }));\n  };\n\n  HttpClientBackendService.prototype.createPassThruBackend = function () {\n    try {\n      return new HttpXhrBackend(this.xhrFactory);\n    } catch (ex) {\n      ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\n      throw ex;\n    }\n  };\n\n  HttpClientBackendService = __decorate([__param(1, Inject(InMemoryBackendConfig)), __param(1, Optional()), __metadata(\"design:paramtypes\", [InMemoryDbService, InMemoryBackendConfigArgs, XhrFactory])], HttpClientBackendService);\n\n  HttpClientBackendService.ɵfac = function HttpClientBackendService_Factory(t) {\n    return new (t || HttpClientBackendService)(ɵngcc0.ɵɵinject(ɵngcc1.InMemoryDbService), ɵngcc0.ɵɵinject(InMemoryBackendConfig, 8), ɵngcc0.ɵɵinject(ɵngcc2.XhrFactory));\n  };\n\n  HttpClientBackendService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: HttpClientBackendService,\n    factory: function factory(t) {\n      return HttpClientBackendService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientBackendService, [{\n      type: Injectable\n    }], function () {\n      return [{\n        type: ɵngcc1.InMemoryDbService\n      }, {\n        type: ɵngcc1.InMemoryBackendConfigArgs,\n        decorators: [{\n          type: Inject,\n          args: [InMemoryBackendConfig]\n        }, {\n          type: Optional\n        }]\n      }, {\n        type: ɵngcc2.XhrFactory\n      }];\n    }, null);\n  })();\n\n  return HttpClientBackendService;\n}(BackendService);\n\nexport { HttpClientBackendService };","map":{"version":3,"sources":["http-client-backend.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpBackend,\n  HttpEvent,\n  HttpHeaders,\n  HttpParams,\n  HttpRequest,\n  HttpResponse, HttpResponseBase,\n  HttpXhrBackend,\n  XhrFactory\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { STATUS } from './http-status-codes';\n\nimport {\n  InMemoryBackendConfig,\n  InMemoryBackendConfigArgs,\n  InMemoryDbService,\n  ResponseOptions\n} from './interfaces';\n\nimport { BackendService } from './backend.service';\n\n/**\n * For Angular `HttpClient` simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService`.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n *\n * ### Usage\n *\n * Create an in-memory data store class that implements `InMemoryDbService`.\n * Call `config` static method with this service class and optional configuration object:\n * ```\n * // other imports\n * import { HttpClientModule } from '@angular/common/http';\n * import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\n *\n * import { InMemHeroService, inMemConfig } from '../api/in-memory-hero.service';\n * @NgModule({\n *  imports: [\n *    HttpModule,\n *    HttpClientInMemoryWebApiModule.forRoot(InMemHeroService, inMemConfig),\n *    ...\n *  ],\n *  ...\n * })\n * export class AppModule { ... }\n * ```\n */\n@Injectable()\nexport class HttpClientBackendService extends BackendService implements HttpBackend {\n\n  constructor(\n    inMemDbService: InMemoryDbService,\n    @Inject(InMemoryBackendConfig) @Optional() config: InMemoryBackendConfigArgs,\n    private xhrFactory: XhrFactory\n    ) {\n    super(inMemDbService, config);\n  }\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    try {\n      return this.handleRequest(req);\n\n    } catch (error) {\n      const err = error.message || error;\n      const resOptions = this.createErrorResponseOptions(req.url, STATUS.INTERNAL_SERVER_ERROR, `${err}`);\n      return this.createResponse$(() => resOptions);\n    }\n  }\n\n  ////  protected overrides /////\n\n  protected getJsonBody(req: HttpRequest<any>): any {\n    return req.body;\n  }\n\n  protected getRequestMethod(req: HttpRequest<any>): string {\n    return (req.method || 'get').toLowerCase();\n  }\n\n  protected createHeaders(headers: { [index: string]: string; }): HttpHeaders {\n    return new HttpHeaders(headers);\n  }\n\n  protected createQueryMap(search: string): Map<string, string[]> {\n    const map = new Map<string, string[]>();\n    if (search) {\n      const params = new HttpParams({fromString: search});\n      params.keys().forEach(p => map.set(p, params.getAll(p)));\n    }\n    return map;\n  }\n\n  protected createResponse$fromResponseOptions$(resOptions$: Observable<ResponseOptions>): Observable<HttpResponse<any>> {\n    return resOptions$.pipe(map((opts: HttpResponseBase) => new HttpResponse<any>(opts)));\n  }\n\n  protected createPassThruBackend() {\n    try {\n      return new HttpXhrBackend(this.xhrFactory);\n    } catch (ex) {\n      ex.message = 'Cannot create passThru404 backend; ' + (ex.message || '');\n      throw ex;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}