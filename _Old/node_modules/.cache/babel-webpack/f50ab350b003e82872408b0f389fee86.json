{"ast":null,"code":"import _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Directive, Input, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\n\nvar isJsons = function isJsons(array) {\n  return Array.isArray(array) && array.every(function (row) {\n    return typeof row === 'object' && !(row instanceof Array);\n  });\n};\n\nvar isArrays = function isArrays(array) {\n  return Array.isArray(array) && array.every(function (row) {\n    return Array.isArray(row);\n  });\n};\n\nfunction jsonsHeaders(array) {\n  return Array.from(new Set(array.map(function (item) {\n    return Object.keys(item);\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, [])));\n}\n\nfunction jsons2arrays(jsons, headers) {\n  headers = headers || jsonsHeaders(jsons); // allow headers to have custom labels, defaulting to having the header data key be the label\n\n  var headerLabels = headers;\n  var headerKeys = headers;\n\n  if (isJsons(headers)) {\n    headerLabels = headers.map(function (header) {\n      return header.label;\n    });\n    headerKeys = headers.map(function (header) {\n      return header.key;\n    });\n  }\n\n  var data = jsons.map(function (object) {\n    return headerKeys.map(function (header) {\n      return header in object ? object[header] : '';\n    });\n  });\n  return [headerLabels].concat(_toConsumableArray(data));\n}\n\nvar elementOrEmpty = function elementOrEmpty(element) {\n  return element || element === 0 ? element : '';\n};\n\nfunction joiner(data) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n  return data.map(function (row, index) {\n    return row.map(function (element) {\n      return '\"' + elementOrEmpty(element) + '\"';\n    }).join(delimiter);\n  }).join(\"\\n\");\n}\n\nfunction arrays2csv(data, headers, delimiter) {\n  return joiner(headers ? [headers].concat(_toConsumableArray(data)) : data, delimiter);\n}\n\nfunction jsons2csv(data, headers, delimiter) {\n  return joiner(jsons2arrays(data, headers), delimiter);\n}\n\nfunction string2csv(data, headers, delimiter) {\n  return headers ? \"\".concat(headers.join(delimiter), \"\\n\").concat(data) : data;\n}\n\nfunction toCSV(data, headers, delimiter) {\n  if (isJsons(data)) {\n    return jsons2csv(data, headers, delimiter);\n  }\n\n  if (isArrays(data)) {\n    return arrays2csv(data, headers, delimiter);\n  }\n\n  if (typeof data === 'string') {\n    return string2csv(data, headers, delimiter);\n  }\n\n  throw new TypeError(\"Data should be a \\\"String\\\", \\\"Array of arrays\\\" OR \\\"Array of objects\\\" \");\n}\n\nfunction blob(data) {\n  var uFEFF = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var headers = arguments.length > 2 ? arguments[2] : undefined;\n  var delimiter = arguments.length > 3 ? arguments[3] : undefined;\n  var csv = toCSV(data, headers, delimiter);\n  return new Blob([uFEFF ? \"\\uFEFF\" : '', csv], {\n    type: 'text/csv'\n  });\n}\n\nfunction buildURI(data) {\n  var uFEFF = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var headers = arguments.length > 2 ? arguments[2] : undefined;\n  var delimiter = arguments.length > 3 ? arguments[3] : undefined;\n  return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));\n}\n\nvar CsvDirective = /*#__PURE__*/function () {\n  function CsvDirective(sanitizer) {\n    _classCallCheck(this, CsvDirective);\n\n    this.sanitizer = sanitizer;\n    /** the body of the csv */\n\n    this.data = [];\n    /** Set the seperator between values */\n\n    this.delimiter = ',';\n    /** adds a Byte order mark to setup the csv as UTF-8  */\n\n    this.uFEFF = true;\n    /** filename */\n\n    this.download = 'data.csv';\n    this.target = this.isIEBrowser() ? '' : '_blank';\n  }\n  /** Set the filename of the csv. Default is `data.csv` */\n\n\n  _createClass(CsvDirective, [{\n    key: \"filename\",\n    set: function set(a) {\n      this.download = a;\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {\n      // IE handling\n      if (this.isIEBrowser()) {\n        var file = blob(this.data, this.uFEFF, this.headers, this.delimiter);\n        window.navigator.msSaveBlob(file, this.download);\n      }\n    }\n  }, {\n    key: \"isIEBrowser\",\n    value: function isIEBrowser() {\n      return !!window.navigator.msSaveOrOpenBlob;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));\n    }\n  }]);\n\n  return CsvDirective;\n}();\n\nCsvDirective.ɵfac = function CsvDirective_Factory(t) {\n  return new (t || CsvDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n};\n\nCsvDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CsvDirective,\n  selectors: [[\"\", \"csvLink\", \"\"]],\n  hostVars: 3,\n  hostBindings: function CsvDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CsvDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"download\", ctx.download)(\"target\", ctx.target)(\"href\", ctx.href, ɵngcc0.ɵɵsanitizeUrlOrResourceUrl);\n    }\n  },\n  inputs: {\n    data: \"data\",\n    delimiter: \"delimiter\",\n    uFEFF: \"uFEFF\",\n    target: \"target\",\n    filename: \"filename\",\n    headers: \"headers\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCsvDirective.ctorParameters = function () {\n  return [{\n    type: DomSanitizer\n  }];\n};\n\nCsvDirective.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  headers: [{\n    type: Input\n  }],\n  delimiter: [{\n    type: Input\n  }],\n  filename: [{\n    type: Input\n  }],\n  uFEFF: [{\n    type: Input\n  }],\n  href: [{\n    type: HostBinding\n  }],\n  download: [{\n    type: HostBinding\n  }],\n  target: [{\n    type: Input\n  }, {\n    type: HostBinding\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CsvDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[csvLink]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.DomSanitizer\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    delimiter: [{\n      type: Input\n    }],\n    uFEFF: [{\n      type: Input\n    }],\n    download: [{\n      type: HostBinding\n    }],\n    target: [{\n      type: Input\n    }, {\n      type: HostBinding\n    }],\n    filename: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    href: [{\n      type: HostBinding\n    }],\n    headers: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CsvModule = function CsvModule() {\n  _classCallCheck(this, CsvModule);\n};\n\nCsvModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CsvModule\n});\nCsvModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CsvModule_Factory(t) {\n    return new (t || CsvModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CsvModule, {\n    declarations: [CsvDirective],\n    exports: [CsvDirective]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CsvModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CsvDirective],\n      exports: [CsvDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CsvDirective, CsvModule, arrays2csv, blob, buildURI, elementOrEmpty, isArrays, isJsons, joiner, jsons2arrays, jsons2csv, jsonsHeaders, string2csv, toCSV };","map":{"version":3,"sources":["../../src/lib/util.ts","../../src/lib/csv.directive.ts","../../src/lib/csv.module.ts","../../src/lib/ctrl-ngx-csv.ts"],"names":[],"mappings":"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","sourcesContent":["export interface HeaderObj {\n  label: string;\n  key: string;\n}\n\nexport const isJsons = (array: any[]) =>\n  Array.isArray(array) &&\n  array.every(row => typeof row === 'object' && !(row instanceof Array));\n\nexport const isArrays = (array: any[]) =>\n  Array.isArray(array) && array.every(row => Array.isArray(row));\n\nexport function jsonsHeaders(array: object[]) {\n  return Array.from(\n    new Set(\n      array.map(item => Object.keys(item)).reduce((a, b) => [...a, ...b], []),\n    ),\n  );\n}\n\nexport function jsons2arrays(\n  jsons: { [key: string]: string }[],\n  headers?: string[] | HeaderObj[],\n) {\n  headers = headers || jsonsHeaders(jsons);\n\n  // allow headers to have custom labels, defaulting to having the header data key be the label\n  let headerLabels: string[] = headers as string[];\n  let headerKeys: string[] = headers as string[];\n  if (isJsons(headers)) {\n    headerLabels = (headers as HeaderObj[]).map(header => header.label);\n    headerKeys = (headers as HeaderObj[]).map(header => header.key);\n  }\n\n  const data = jsons.map(object =>\n    headerKeys.map(header => (header in object ? object[header] : '')),\n  );\n  return [headerLabels, ...data];\n}\n\nexport const elementOrEmpty = (element: any) =>\n  element || element === 0 ? element : '';\n\nexport function joiner(data: any, delimiter = ',') {\n  return data\n    .map((row: any, index: number) =>\n      row.map((element: any) => '\"' + elementOrEmpty(element) + '\"').join(delimiter),\n    )\n    .join(`\\n`);\n}\n\nexport function arrays2csv(\n  data: string[][],\n  headers?: string[] | HeaderObj[],\n  delimiter?: string,\n) {\n  return joiner(headers ? [headers, ...data] : data, delimiter);\n}\n\nexport function jsons2csv(\n  data: { [key: string]: string }[],\n  headers?: string[] | HeaderObj[],\n  delimiter?: string,\n) {\n  return joiner(jsons2arrays(data, headers), delimiter);\n}\n\nexport function string2csv(\n  data: string,\n  headers?: string[],\n  delimiter?: string,\n) {\n  return headers ? `${headers.join(delimiter)}\\n${data}` : data;\n}\n\nexport function toCSV(\n  data: string | string[][] | { [key: string]: string }[] | any[],\n  headers?: string[] | HeaderObj[],\n  delimiter?: string,\n) {\n  if (isJsons(data as any)) {\n    return jsons2csv(data as { [key: string]: string }[], headers, delimiter);\n  }\n  if (isArrays(data as any)) {\n    return arrays2csv(data as string[][], headers, delimiter);\n  }\n  if (typeof data === 'string') {\n    return string2csv(data, headers as string[], delimiter);\n  }\n  throw new TypeError(\n    `Data should be a \"String\", \"Array of arrays\" OR \"Array of objects\" `,\n  );\n}\n\nexport function blob(\n  data: string | string[][] | { [key: string]: string }[] | any[],\n  uFEFF = true,\n  headers?: string[] | HeaderObj[],\n  delimiter?: string,\n) {\n  const csv = toCSV(data, headers, delimiter);\n  return new Blob([uFEFF ? '\\uFEFF' : '', csv], { type: 'text/csv' });\n}\n\nexport function buildURI(\n  data: string | string[][] | { [key: string]: string }[] | any[],\n  uFEFF = true,\n  headers?: string[] | HeaderObj[],\n  delimiter?: string,\n) {\n  return URL.createObjectURL(blob(data, uFEFF, headers, delimiter));\n}\n","import { Directive, HostBinding, HostListener, Input, OnChanges } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\n\nimport { blob, buildURI, HeaderObj } from './util';\n\n@Directive({ selector: '[csvLink]' })\nexport class CsvDirective implements OnChanges {\n  /** the body of the csv */\n  @Input() data: string | string[][] | { [key: string]: string }[] | any[] = [];\n  /** Set the first line of the csv */\n  @Input() headers?: string[] | HeaderObj[];\n  /** Set the seperator between values */\n  @Input() delimiter = ',';\n  /** Set the filename of the csv. Default is `data.csv` */\n  @Input()\n  set filename(a: string) {\n    this.download = a;\n  }\n  /** adds a Byte order mark to setup the csv as UTF-8  */\n  @Input() uFEFF = true;\n  @HostBinding() href?: SafeResourceUrl;\n  /** filename */\n  @HostBinding() download = 'data.csv';\n  @Input() @HostBinding() target = this.isIEBrowser() ? '' : '_blank';\n  constructor(private sanitizer: DomSanitizer) {}\n\n  @HostListener('click') onClick() {\n    // IE handling\n    if (this.isIEBrowser()) {\n      const file = blob(this.data, this.uFEFF, this.headers, this.delimiter);\n      window.navigator.msSaveBlob(file, this.download);\n    }\n  }\n\n  isIEBrowser(): boolean {\n    return !!window.navigator.msSaveOrOpenBlob;\n  }\n\n  ngOnChanges() {\n    this.href = this.sanitizer.bypassSecurityTrustResourceUrl(\n      buildURI(this.data, this.uFEFF, this.headers, this.delimiter),\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CsvDirective } from './csv.directive';\n\n@NgModule({\n  declarations: [CsvDirective],\n  exports: [CsvDirective],\n})\nexport class CsvModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}