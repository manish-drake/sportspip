{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _keys;\n\nimport { Directive, TemplateRef, ViewContainerRef, Input, Injectable, ɵɵdefineInjectable, Component, ViewEncapsulation, ElementRef, NgZone, EventEmitter, ContentChild, ViewChild, Output, HostListener, Renderer2, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { autorun, reaction, computed as computed$1, observable as observable$1, action as action$1 } from 'mobx';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1, \"loading...\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction TreeViewportComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r0.getTotalHeight());\n  }\n}\n\nvar _c1 = function _c1() {\n  return {\n    dontDetach: true\n  };\n};\n\nvar _c2 = [\"*\"];\nvar _c3 = [\"loadingTemplate\"];\nvar _c4 = [\"treeNodeTemplate\"];\nvar _c5 = [\"treeNodeWrapperTemplate\"];\nvar _c6 = [\"treeNodeFullTemplate\"];\nvar _c7 = [\"viewport\"];\n\nvar _c8 = function _c8(a0, a1, a2, a3) {\n  return {\n    loadingTemplate: a0,\n    treeNodeTemplate: a1,\n    treeNodeWrapperTemplate: a2,\n    treeNodeFullTemplate: a3\n  };\n};\n\nfunction TreeComponent_tree_node_collection_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-collection\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nodes\", ctx_r1.treeModel.roots)(\"treeModel\", ctx_r1.treeModel)(\"templates\", ɵngcc0.ɵɵpureFunction4(3, _c8, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));\n  }\n}\n\nfunction TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-drop-slot\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"dropIndex\", 0)(\"node\", ctx_r2.treeModel.virtualRoot);\n  }\n}\n\nfunction TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-drop-slot\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"dropIndex\", ctx_r2.node.index)(\"node\", ctx_r2.node.parent);\n  }\n}\n\nfunction TreeNodeComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template, 1, 2, \"tree-node-drop-slot\", 3);\n    ɵngcc0.ɵɵelement(2, \"tree-node-wrapper\", 4);\n    ɵngcc0.ɵɵelement(3, \"tree-node-children\", 5);\n    ɵngcc0.ɵɵelement(4, \"tree-node-drop-slot\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMap(ctx_r1.node.getClass());\n    ɵngcc0.ɵɵclassProp(\"tree-node\", true)(\"tree-node-expanded\", ctx_r1.node.isExpanded && ctx_r1.node.hasChildren)(\"tree-node-collapsed\", ctx_r1.node.isCollapsed && ctx_r1.node.hasChildren)(\"tree-node-leaf\", ctx_r1.node.isLeaf)(\"tree-node-active\", ctx_r1.node.isActive)(\"tree-node-focused\", ctx_r1.node.isFocused);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.index === 0);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r1.node)(\"index\", ctx_r1.index)(\"templates\", ctx_r1.templates);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r1.node)(\"templates\", ctx_r1.templates);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"dropIndex\", ctx_r1.node.index + 1)(\"node\", ctx_r1.node.parent);\n  }\n}\n\nvar _c9 = function _c9(a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    index: a2,\n    templates: a3\n  };\n};\n\nfunction TreeNodeComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_Template, 5, 22, \"div\", 1);\n    ɵngcc0.ɵɵelementContainer(2, 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.templates.treeNodeFullTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.templates.treeNodeFullTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction4(3, _c9, ctx_r0.node, ctx_r0.node, ctx_r0.index, ctx_r0.templates));\n  }\n}\n\nfunction TreeNodeContent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.node.displayField);\n  }\n}\n\nvar _c10 = function _c10(a0, a1, a2) {\n  return {\n    $implicit: a0,\n    node: a1,\n    index: a2\n  };\n};\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeNodeExpanderComponent_ng_container_0_span_1_Template_span_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r3.node.mouseAction(\"expanderClick\", $event);\n    });\n    ɵngcc0.ɵɵelement(1, \"span\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassProp(\"toggle-children-wrapper-expanded\", ctx_r1.node.isExpanded)(\"toggle-children-wrapper-collapsed\", ctx_r1.node.isCollapsed);\n  }\n}\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 5);\n  }\n}\n\nfunction TreeNodeExpanderComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeExpanderComponent_ng_container_0_span_1_Template, 2, 4, \"span\", 1);\n    ɵngcc0.ɵɵtemplate(2, TreeNodeExpanderComponent_ng_container_0_span_2_Template, 1, 0, \"span\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.node.hasChildren);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.node.hasChildren);\n  }\n}\n\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-collection\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"nodes\", ctx_r2.node.children)(\"templates\", ctx_r2.templates)(\"treeModel\", ctx_r2.node.treeModel);\n  }\n}\n\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-loading-component\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵstyleProp(\"padding-left\", ctx_r3.node.getNodePadding());\n    ɵngcc0.ɵɵproperty(\"template\", ctx_r3.templates.loadingTemplate)(\"node\", ctx_r3.node);\n  }\n}\n\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template, 1, 3, \"tree-node-collection\", 2);\n    ɵngcc0.ɵɵtemplate(2, TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template, 1, 4, \"tree-loading-component\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassProp(\"tree-children\", true)(\"tree-children-no-padding\", ctx_r1.node.options.levelPadding);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.node.children);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r1.node.children);\n  }\n}\n\nfunction TreeNodeChildrenComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_Template, 3, 6, \"div\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"treeAnimateOpen\", ctx_r0.node.isExpanded)(\"treeAnimateOpenSpeed\", ctx_r0.node.options.animateSpeed)(\"treeAnimateOpenAcceleration\", ctx_r0.node.options.animateAcceleration)(\"treeAnimateOpenEnabled\", ctx_r0.node.options.animateExpand);\n  }\n}\n\nfunction TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node\", 2);\n  }\n\n  if (rf & 2) {\n    var node_r2 = ctx.$implicit;\n    var i_r3 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"node\", node_r2)(\"index\", i_r3)(\"templates\", ctx_r1.templates);\n  }\n}\n\nfunction TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, \"tree-node\", 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"margin-top\", ctx_r0.marginTop);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.viewportNodes)(\"ngForTrackBy\", ctx_r0.trackNode);\n  }\n}\n\nfunction TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"tree-node-checkbox\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r1.node);\n  }\n}\n\nfunction TreeNodeWrapperComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵtemplate(1, TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template, 1, 1, \"tree-node-checkbox\", 3);\n    ɵngcc0.ɵɵelement(2, \"tree-node-expander\", 4);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeNodeWrapperComponent_div_0_Template_div_click_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.node.mouseAction(\"click\", $event);\n    })(\"dblclick\", function TreeNodeWrapperComponent_div_0_Template_div_dblclick_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.node.mouseAction(\"dblClick\", $event);\n    })(\"mouseover\", function TreeNodeWrapperComponent_div_0_Template_div_mouseover_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.node.mouseAction(\"mouseOver\", $event);\n    })(\"mouseout\", function TreeNodeWrapperComponent_div_0_Template_div_mouseout_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.node.mouseAction(\"mouseOut\", $event);\n    })(\"contextmenu\", function TreeNodeWrapperComponent_div_0_Template_div_contextmenu_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.node.mouseAction(\"contextMenu\", $event);\n    })(\"treeDrop\", function TreeNodeWrapperComponent_div_0_Template_div_treeDrop_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.node.onDrop($event);\n    })(\"treeDropDragOver\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragOver_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.node.mouseAction(\"dragOver\", $event);\n    })(\"treeDropDragLeave\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragLeave_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.node.mouseAction(\"dragLeave\", $event);\n    })(\"treeDropDragEnter\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragEnter_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.node.mouseAction(\"dragEnter\", $event);\n    });\n    ɵngcc0.ɵɵelement(4, \"tree-node-content\", 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"padding-left\", ctx_r0.node.getNodePadding());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.node.options.useCheckbox);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r0.node);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"node-content-wrapper-active\", ctx_r0.node.isActive)(\"node-content-wrapper-focused\", ctx_r0.node.isFocused);\n    ɵngcc0.ɵɵproperty(\"treeAllowDrop\", ctx_r0.node.allowDrop)(\"allowDragoverStyling\", ctx_r0.node.allowDragoverStyling())(\"treeDrag\", ctx_r0.node)(\"treeDragEnabled\", ctx_r0.node.allowDrag());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"node\", ctx_r0.node)(\"index\", ctx_r0.index)(\"template\", ctx_r0.templates.treeNodeTemplate);\n  }\n}\n\nfunction TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.node.mouseAction(\"checkboxClick\", $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r0.node.isSelected)(\"indeterminate\", ctx_r0.node.isPartiallySelected);\n  }\n}\n\nvar TreeMobxAutorunDirective = /*#__PURE__*/function () {\n  function TreeMobxAutorunDirective(templateRef, viewContainer) {\n    _classCallCheck(this, TreeMobxAutorunDirective);\n\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.templateBindings = {};\n  }\n\n  _createClass(TreeMobxAutorunDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.view = this.viewContainer.createEmbeddedView(this.templateRef);\n\n      if (this.dispose) {\n        this.dispose();\n      }\n\n      if (this.shouldDetach()) {\n        this.view.detach();\n      }\n\n      this.autoDetect(this.view);\n    }\n  }, {\n    key: \"shouldDetach\",\n    value: function shouldDetach() {\n      return this.treeMobxAutorun && this.treeMobxAutorun.detach;\n    }\n  }, {\n    key: \"autoDetect\",\n    value: function autoDetect(view) {\n      this.dispose = autorun(function () {\n        return view.detectChanges();\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.dispose) {\n        this.dispose();\n      }\n    }\n  }]);\n\n  return TreeMobxAutorunDirective;\n}();\n\nTreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) {\n  return new (t || TreeMobxAutorunDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nTreeMobxAutorunDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TreeMobxAutorunDirective,\n  selectors: [[\"\", \"treeMobxAutorun\", \"\"]],\n  inputs: {\n    treeMobxAutorun: \"treeMobxAutorun\"\n  }\n});\n/** @nocollapse */\n\nTreeMobxAutorunDirective.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\nTreeMobxAutorunDirective.propDecorators = {\n  treeMobxAutorun: [{\n    type: Input\n  }]\n};\nvar KEYS = {\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  ENTER: 13,\n  SPACE: 32,\n  CONTEXT_MENU: 32\n};\n\nvar ɵ0 = function ɵ0(tree, node, $event) {\n  return node && node.toggleActivated();\n},\n    ɵ1 = function ɵ1(tree, node, $event) {\n  return node && node.toggleActivated(true);\n},\n    ɵ2 = function ɵ2(tree, node, $event) {\n  return node && node.toggleSelected();\n},\n    ɵ3 = function ɵ3(tree, node, $event) {\n  return node.setIsActive(true);\n},\n    ɵ4 = function ɵ4(tree, node, $event) {\n  return node.setIsActive(false);\n},\n    ɵ5 = function ɵ5(tree, node, $event) {\n  return node.setIsSelected(true);\n},\n    ɵ6 = function ɵ6(tree, node, $event) {\n  return node.setIsSelected(false);\n},\n    ɵ7 = function ɵ7(tree, node, $event) {\n  return node.focus();\n},\n    ɵ8 = function ɵ8(tree, node, $event) {\n  return node.hasChildren && node.toggleExpanded();\n},\n    ɵ9 = function ɵ9(tree, node, $event) {\n  return node.expand();\n},\n    ɵ10 = function ɵ10(tree, node, $event) {\n  return node.collapse();\n},\n    ɵ11 = function ɵ11(tree, node, $event) {\n  return tree.focusDrillDown();\n},\n    ɵ12 = function ɵ12(tree, node, $event) {\n  return tree.focusDrillUp();\n},\n    ɵ13 = function ɵ13(tree, node, $event) {\n  return tree.focusNextNode();\n},\n    ɵ14 = function ɵ14(tree, node, $event) {\n  return tree.focusPreviousNode();\n},\n    ɵ15 = function ɵ15(tree, node, $event, _ref) {\n  var from = _ref.from,\n      to = _ref.to;\n\n  // default action assumes from = node, to = {parent, index}\n  if ($event.ctrlKey) {\n    tree.copyNode(from, to);\n  } else {\n    tree.moveNode(from, to);\n  }\n};\n\nvar TREE_ACTIONS = {\n  TOGGLE_ACTIVE: ɵ0,\n  TOGGLE_ACTIVE_MULTI: ɵ1,\n  TOGGLE_SELECTED: ɵ2,\n  ACTIVATE: ɵ3,\n  DEACTIVATE: ɵ4,\n  SELECT: ɵ5,\n  DESELECT: ɵ6,\n  FOCUS: ɵ7,\n  TOGGLE_EXPANDED: ɵ8,\n  EXPAND: ɵ9,\n  COLLAPSE: ɵ10,\n  DRILL_DOWN: ɵ11,\n  DRILL_UP: ɵ12,\n  NEXT_NODE: ɵ13,\n  PREVIOUS_NODE: ɵ14,\n  MOVE_NODE: ɵ15\n};\nvar defaultActionMapping = {\n  mouse: {\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\n    dblClick: null,\n    contextMenu: null,\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\n    drop: TREE_ACTIONS.MOVE_NODE\n  },\n  keys: (_keys = {}, _defineProperty(_keys, KEYS.RIGHT, TREE_ACTIONS.DRILL_DOWN), _defineProperty(_keys, KEYS.LEFT, TREE_ACTIONS.DRILL_UP), _defineProperty(_keys, KEYS.DOWN, TREE_ACTIONS.NEXT_NODE), _defineProperty(_keys, KEYS.UP, TREE_ACTIONS.PREVIOUS_NODE), _defineProperty(_keys, KEYS.SPACE, TREE_ACTIONS.TOGGLE_ACTIVE), _defineProperty(_keys, KEYS.ENTER, TREE_ACTIONS.TOGGLE_ACTIVE), _keys)\n};\n\nvar TreeOptions = /*#__PURE__*/function () {\n  function TreeOptions() {\n    var _keys2;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, TreeOptions);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35;\n\n    this.options = options;\n    this.actionMapping = {\n      mouse: {\n        click: (_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.actionMapping) === null || _b === void 0 ? void 0 : _b.mouse) === null || _c === void 0 ? void 0 : _c.click) !== null && _d !== void 0 ? _d : defaultActionMapping.mouse.click,\n        dblClick: (_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.actionMapping) === null || _f === void 0 ? void 0 : _f.mouse) === null || _g === void 0 ? void 0 : _g.dblClick) !== null && _h !== void 0 ? _h : defaultActionMapping.mouse.dblClick,\n        contextMenu: (_m = (_l = (_k = (_j = this.options) === null || _j === void 0 ? void 0 : _j.actionMapping) === null || _k === void 0 ? void 0 : _k.mouse) === null || _l === void 0 ? void 0 : _l.contextMenu) !== null && _m !== void 0 ? _m : defaultActionMapping.mouse.contextMenu,\n        expanderClick: (_r = (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.actionMapping) === null || _p === void 0 ? void 0 : _p.mouse) === null || _q === void 0 ? void 0 : _q.expanderClick) !== null && _r !== void 0 ? _r : defaultActionMapping.mouse.expanderClick,\n        checkboxClick: (_v = (_u = (_t = (_s = this.options) === null || _s === void 0 ? void 0 : _s.actionMapping) === null || _t === void 0 ? void 0 : _t.mouse) === null || _u === void 0 ? void 0 : _u.checkboxClick) !== null && _v !== void 0 ? _v : defaultActionMapping.mouse.checkboxClick,\n        drop: (_z = (_y = (_x = (_w = this.options) === null || _w === void 0 ? void 0 : _w.actionMapping) === null || _x === void 0 ? void 0 : _x.mouse) === null || _y === void 0 ? void 0 : _y.drop) !== null && _z !== void 0 ? _z : defaultActionMapping.mouse.drop,\n        dragStart: (_3 = (_2 = (_1 = (_0 = this.options) === null || _0 === void 0 ? void 0 : _0.actionMapping) === null || _1 === void 0 ? void 0 : _1.mouse) === null || _2 === void 0 ? void 0 : _2.dragStart) !== null && _3 !== void 0 ? _3 : undefined,\n        drag: (_7 = (_6 = (_5 = (_4 = this.options) === null || _4 === void 0 ? void 0 : _4.actionMapping) === null || _5 === void 0 ? void 0 : _5.mouse) === null || _6 === void 0 ? void 0 : _6.drag) !== null && _7 !== void 0 ? _7 : undefined,\n        dragEnd: (_11 = (_10 = (_9 = (_8 = this.options) === null || _8 === void 0 ? void 0 : _8.actionMapping) === null || _9 === void 0 ? void 0 : _9.mouse) === null || _10 === void 0 ? void 0 : _10.dragEnd) !== null && _11 !== void 0 ? _11 : undefined,\n        dragOver: (_15 = (_14 = (_13 = (_12 = this.options) === null || _12 === void 0 ? void 0 : _12.actionMapping) === null || _13 === void 0 ? void 0 : _13.mouse) === null || _14 === void 0 ? void 0 : _14.dragOver) !== null && _15 !== void 0 ? _15 : undefined,\n        dragLeave: (_19 = (_18 = (_17 = (_16 = this.options) === null || _16 === void 0 ? void 0 : _16.actionMapping) === null || _17 === void 0 ? void 0 : _17.mouse) === null || _18 === void 0 ? void 0 : _18.dragLeave) !== null && _19 !== void 0 ? _19 : undefined,\n        dragEnter: (_23 = (_22 = (_21 = (_20 = this.options) === null || _20 === void 0 ? void 0 : _20.actionMapping) === null || _21 === void 0 ? void 0 : _21.mouse) === null || _22 === void 0 ? void 0 : _22.dragEnter) !== null && _23 !== void 0 ? _23 : undefined,\n        mouseOver: (_27 = (_26 = (_25 = (_24 = this.options) === null || _24 === void 0 ? void 0 : _24.actionMapping) === null || _25 === void 0 ? void 0 : _25.mouse) === null || _26 === void 0 ? void 0 : _26.mouseOver) !== null && _27 !== void 0 ? _27 : undefined,\n        mouseOut: (_31 = (_30 = (_29 = (_28 = this.options) === null || _28 === void 0 ? void 0 : _28.actionMapping) === null || _29 === void 0 ? void 0 : _29.mouse) === null || _30 === void 0 ? void 0 : _30.mouseOut) !== null && _31 !== void 0 ? _31 : undefined\n      },\n      keys: (_keys2 = {}, _defineProperty(_keys2, KEYS.RIGHT, TREE_ACTIONS.DRILL_DOWN), _defineProperty(_keys2, KEYS.LEFT, TREE_ACTIONS.DRILL_UP), _defineProperty(_keys2, KEYS.DOWN, TREE_ACTIONS.NEXT_NODE), _defineProperty(_keys2, KEYS.UP, TREE_ACTIONS.PREVIOUS_NODE), _defineProperty(_keys2, KEYS.SPACE, TREE_ACTIONS.TOGGLE_ACTIVE), _defineProperty(_keys2, KEYS.ENTER, TREE_ACTIONS.TOGGLE_ACTIVE), _keys2)\n    };\n\n    if ((_33 = (_32 = this.options) === null || _32 === void 0 ? void 0 : _32.actionMapping) === null || _33 === void 0 ? void 0 : _33.keys) {\n      this.actionMapping.keys = Object.assign(Object.assign({}, this.actionMapping.keys), this.options.actionMapping.keys);\n    }\n\n    if (options.rtl) {\n      this.actionMapping.keys[KEYS.RIGHT] = ((_34 = options.actionMapping) === null || _34 === void 0 ? void 0 : _34.keys[KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\n      this.actionMapping.keys[KEYS.LEFT] = ((_35 = options.actionMapping) === null || _35 === void 0 ? void 0 : _35.keys[KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\n    }\n  }\n\n  _createClass(TreeOptions, [{\n    key: \"hasChildrenField\",\n    get: function get() {\n      return this.options.hasChildrenField || 'hasChildren';\n    }\n  }, {\n    key: \"childrenField\",\n    get: function get() {\n      return this.options.childrenField || 'children';\n    }\n  }, {\n    key: \"displayField\",\n    get: function get() {\n      return this.options.displayField || 'name';\n    }\n  }, {\n    key: \"idField\",\n    get: function get() {\n      return this.options.idField || 'id';\n    }\n  }, {\n    key: \"isExpandedField\",\n    get: function get() {\n      return this.options.isExpandedField || 'isExpanded';\n    }\n  }, {\n    key: \"getChildren\",\n    get: function get() {\n      return this.options.getChildren;\n    }\n  }, {\n    key: \"levelPadding\",\n    get: function get() {\n      return this.options.levelPadding || 0;\n    }\n  }, {\n    key: \"useVirtualScroll\",\n    get: function get() {\n      return this.options.useVirtualScroll;\n    }\n  }, {\n    key: \"animateExpand\",\n    get: function get() {\n      return this.options.animateExpand;\n    }\n  }, {\n    key: \"animateSpeed\",\n    get: function get() {\n      return this.options.animateSpeed || 1;\n    }\n  }, {\n    key: \"animateAcceleration\",\n    get: function get() {\n      return this.options.animateAcceleration || 1.2;\n    }\n  }, {\n    key: \"scrollOnActivate\",\n    get: function get() {\n      return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate;\n    }\n  }, {\n    key: \"rtl\",\n    get: function get() {\n      return !!this.options.rtl;\n    }\n  }, {\n    key: \"rootId\",\n    get: function get() {\n      return this.options.rootId;\n    }\n  }, {\n    key: \"useCheckbox\",\n    get: function get() {\n      return this.options.useCheckbox;\n    }\n  }, {\n    key: \"useTriState\",\n    get: function get() {\n      return this.options.useTriState === undefined ? true : this.options.useTriState;\n    }\n  }, {\n    key: \"scrollContainer\",\n    get: function get() {\n      return this.options.scrollContainer;\n    }\n  }, {\n    key: \"allowDragoverStyling\",\n    get: function get() {\n      return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling;\n    }\n  }, {\n    key: \"getNodeClone\",\n    value: function getNodeClone(node) {\n      if (this.options.getNodeClone) {\n        return this.options.getNodeClone(node);\n      } // remove id from clone\n      // keeping ie11 compatibility\n\n\n      var nodeClone = Object.assign({}, node.data);\n\n      if (nodeClone.id) {\n        delete nodeClone.id;\n      }\n\n      return nodeClone;\n    }\n  }, {\n    key: \"allowDrop\",\n    value: function allowDrop(element, to, $event) {\n      if (this.options.allowDrop instanceof Function) {\n        return this.options.allowDrop(element, to, $event);\n      } else {\n        return this.options.allowDrop === undefined ? true : this.options.allowDrop;\n      }\n    }\n  }, {\n    key: \"allowDrag\",\n    value: function allowDrag(node) {\n      if (this.options.allowDrag instanceof Function) {\n        return this.options.allowDrag(node);\n      } else {\n        return this.options.allowDrag;\n      }\n    }\n  }, {\n    key: \"nodeClass\",\n    value: function nodeClass(node) {\n      return this.options.nodeClass ? this.options.nodeClass(node) : '';\n    }\n  }, {\n    key: \"nodeHeight\",\n    value: function nodeHeight(node) {\n      if (node.data.virtual) {\n        return 0;\n      }\n\n      var nodeHeight = this.options.nodeHeight || 22;\n\n      if (typeof nodeHeight === 'function') {\n        nodeHeight = nodeHeight(node);\n      } // account for drop slots:\n\n\n      return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;\n    }\n  }, {\n    key: \"dropSlotHeight\",\n    get: function get() {\n      return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\n    }\n  }]);\n\n  return TreeOptions;\n}();\n\nvar TREE_EVENTS = {\n  toggleExpanded: 'toggleExpanded',\n  activate: 'activate',\n  deactivate: 'deactivate',\n  nodeActivate: 'nodeActivate',\n  nodeDeactivate: 'nodeDeactivate',\n  select: 'select',\n  deselect: 'deselect',\n  focus: 'focus',\n  blur: 'blur',\n  initialized: 'initialized',\n  updateData: 'updateData',\n  moveNode: 'moveNode',\n  copyNode: 'copyNode',\n  event: 'event',\n  loadNodeChildren: 'loadNodeChildren',\n  changeFilter: 'changeFilter',\n  stateChange: 'stateChange'\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar TreeNode = /*#__PURE__*/function () {\n  function TreeNode(data, parent, treeModel, index) {\n    var _this = this;\n\n    _classCallCheck(this, TreeNode);\n\n    this.data = data;\n    this.parent = parent;\n    this.treeModel = treeModel;\n    this.position = 0;\n\n    this.allowDrop = function (element, $event) {\n      return _this.options.allowDrop(element, {\n        parent: _this,\n        index: 0\n      }, $event);\n    };\n\n    this.allowDragoverStyling = function () {\n      return _this.options.allowDragoverStyling;\n    };\n\n    if (this.id === undefined || this.id === null) {\n      this.id = uuid();\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\n\n\n    this.index = index;\n\n    if (this.getField('children')) {\n      this._initChildren();\n    }\n\n    this.autoLoadChildren();\n  }\n\n  _createClass(TreeNode, [{\n    key: \"isHidden\",\n    get: function get() {\n      return this.treeModel.isHidden(this);\n    }\n  }, {\n    key: \"isExpanded\",\n    get: function get() {\n      return this.treeModel.isExpanded(this);\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this.treeModel.isActive(this);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.treeModel.isNodeFocused(this);\n    }\n  }, {\n    key: \"isSelected\",\n    get: function get() {\n      if (this.isSelectable()) {\n        return this.treeModel.isSelected(this);\n      } else {\n        return this.children.some(function (node) {\n          return node.isSelected;\n        });\n      }\n    }\n  }, {\n    key: \"isAllSelected\",\n    get: function get() {\n      if (this.isSelectable()) {\n        return this.treeModel.isSelected(this);\n      } else {\n        return this.children.every(function (node) {\n          return node.isAllSelected;\n        });\n      }\n    }\n  }, {\n    key: \"isPartiallySelected\",\n    get: function get() {\n      return this.isSelected && !this.isAllSelected;\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this.parent ? this.parent.level + 1 : 0;\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this.parent ? [].concat(_toConsumableArray(this.parent.path), [this.id]) : [];\n    }\n  }, {\n    key: \"elementRef\",\n    get: function get() {\n      throw \"Element Ref is no longer supported since introducing virtual scroll\\n\\n      You may use a template to obtain a reference to the element\";\n    }\n  }, {\n    key: \"originalNode\",\n    get: function get() {\n      return this._originalNode;\n    }\n  }, {\n    key: \"hasChildren\",\n    get: // helper get functions:\n    function get() {\n      return !!(this.getField('hasChildren') || this.children && this.children.length > 0);\n    }\n  }, {\n    key: \"isCollapsed\",\n    get: function get() {\n      return !this.isExpanded;\n    }\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      return !this.hasChildren;\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.parent.data.virtual;\n    }\n  }, {\n    key: \"realParent\",\n    get: function get() {\n      return this.isRoot ? null : this.parent;\n    } // proxy functions:\n\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this.treeModel.options;\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(event) {\n      this.treeModel.fireEvent(event);\n    } // field accessors:\n\n  }, {\n    key: \"displayField\",\n    get: function get() {\n      return this.getField('display');\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.getField('id');\n    },\n    set: function set(value) {\n      this.setField('id', value);\n    }\n  }, {\n    key: \"getField\",\n    value: function getField(key) {\n      return this.data[this.options[\"\".concat(key, \"Field\")]];\n    }\n  }, {\n    key: \"setField\",\n    value: function setField(key, value) {\n      this.data[this.options[\"\".concat(key, \"Field\")]] = value;\n    } // traversing:\n\n  }, {\n    key: \"_findAdjacentSibling\",\n    value: function _findAdjacentSibling(steps) {\n      var skipHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var siblings = this._getParentsChildren(skipHidden);\n\n      var index = siblings.indexOf(this);\n      return siblings.length > index + steps ? siblings[index + steps] : null;\n    }\n  }, {\n    key: \"findNextSibling\",\n    value: function findNextSibling() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._findAdjacentSibling(+1, skipHidden);\n    }\n  }, {\n    key: \"findPreviousSibling\",\n    value: function findPreviousSibling() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._findAdjacentSibling(-1, skipHidden);\n    }\n  }, {\n    key: \"getVisibleChildren\",\n    value: function getVisibleChildren() {\n      return this.visibleChildren;\n    }\n  }, {\n    key: \"visibleChildren\",\n    get: function get() {\n      return (this.children || []).filter(function (node) {\n        return !node.isHidden;\n      });\n    }\n  }, {\n    key: \"getFirstChild\",\n    value: function getFirstChild() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var children = skipHidden ? this.visibleChildren : this.children;\n      return children != null && children.length ? children[0] : null;\n    }\n  }, {\n    key: \"getLastChild\",\n    value: function getLastChild() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var children = skipHidden ? this.visibleChildren : this.children;\n      return children != null && children.length ? children[children.length - 1] : null;\n    }\n  }, {\n    key: \"findNextNode\",\n    value: function findNextNode() {\n      var goInside = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var skipHidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return goInside && this.isExpanded && this.getFirstChild(skipHidden) || this.findNextSibling(skipHidden) || this.parent && this.parent.findNextNode(false, skipHidden);\n    }\n  }, {\n    key: \"findPreviousNode\",\n    value: function findPreviousNode() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var previousSibling = this.findPreviousSibling(skipHidden);\n\n      if (!previousSibling) {\n        return this.realParent;\n      }\n\n      return previousSibling._getLastOpenDescendant(skipHidden);\n    }\n  }, {\n    key: \"_getLastOpenDescendant\",\n    value: function _getLastOpenDescendant() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var lastChild = this.getLastChild(skipHidden);\n      return this.isCollapsed || !lastChild ? this : lastChild._getLastOpenDescendant(skipHidden);\n    }\n  }, {\n    key: \"_getParentsChildren\",\n    value: function _getParentsChildren() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var children = this.parent && (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\n      return children || [];\n    }\n  }, {\n    key: \"getIndexInParent\",\n    value: function getIndexInParent() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._getParentsChildren(skipHidden).indexOf(this);\n    }\n  }, {\n    key: \"isDescendantOf\",\n    value: function isDescendantOf(node) {\n      if (this === node) return true;else return this.parent && this.parent.isDescendantOf(node);\n    }\n  }, {\n    key: \"getNodePadding\",\n    value: function getNodePadding() {\n      return this.options.levelPadding * (this.level - 1) + 'px';\n    }\n  }, {\n    key: \"getClass\",\n    value: function getClass() {\n      return [this.options.nodeClass(this), \"tree-node-level-\".concat(this.level)].join(' ');\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop($event) {\n      this.mouseAction('drop', $event.event, {\n        from: $event.element,\n        to: {\n          parent: this,\n          index: 0,\n          dropOnNode: true\n        }\n      });\n    }\n  }, {\n    key: \"allowDrag\",\n    value: function allowDrag() {\n      return this.options.allowDrag(this);\n    } // helper methods:\n\n  }, {\n    key: \"loadNodeChildren\",\n    value: function loadNodeChildren() {\n      var _this2 = this;\n\n      if (!this.options.getChildren) {\n        return Promise.resolve(); // Not getChildren method - for using redux\n      }\n\n      return Promise.resolve(this.options.getChildren(this)).then(function (children) {\n        if (children) {\n          _this2.setField('children', children);\n\n          _this2._initChildren();\n\n          if (_this2.options.useTriState && _this2.treeModel.isSelected(_this2)) {\n            _this2.setIsSelected(true);\n          }\n\n          _this2.children.forEach(function (child) {\n            if (child.getField('isExpanded') && child.hasChildren) {\n              child.expand();\n            }\n          });\n        }\n      }).then(function () {\n        _this2.fireEvent({\n          eventName: TREE_EVENTS.loadNodeChildren,\n          node: _this2\n        });\n      });\n    }\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      if (!this.isExpanded) {\n        this.toggleExpanded();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      if (this.isExpanded) {\n        this.toggleExpanded();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"doForAll\",\n    value: function doForAll(fn) {\n      var _this3 = this;\n\n      Promise.resolve(fn(this)).then(function () {\n        if (_this3.children) {\n          _this3.children.forEach(function (child) {\n            return child.doForAll(fn);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      this.doForAll(function (node) {\n        return node.expand();\n      });\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.doForAll(function (node) {\n        return node.collapse();\n      });\n    }\n  }, {\n    key: \"ensureVisible\",\n    value: function ensureVisible() {\n      if (this.realParent) {\n        this.realParent.expand();\n        this.realParent.ensureVisible();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"toggleExpanded\",\n    value: function toggleExpanded() {\n      this.setIsExpanded(!this.isExpanded);\n      return this;\n    }\n  }, {\n    key: \"setIsExpanded\",\n    value: function setIsExpanded(value) {\n      if (this.hasChildren) {\n        this.treeModel.setExpandedNode(this, value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"autoLoadChildren\",\n    value: function autoLoadChildren() {\n      var _this4 = this;\n\n      this.handler = reaction(function () {\n        return _this4.isExpanded;\n      }, function (isExpanded) {\n        if (!_this4.children && _this4.hasChildren && isExpanded) {\n          _this4.loadNodeChildren();\n        }\n      }, {\n        fireImmediately: true\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.children) {\n        this.children.forEach(function (child) {\n          return child.dispose();\n        });\n      }\n\n      if (this.handler) {\n        this.handler();\n      }\n\n      this.parent = null;\n      this.children = null;\n    }\n  }, {\n    key: \"setIsActive\",\n    value: function setIsActive(value) {\n      var multi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.treeModel.setActiveNode(this, value, multi);\n\n      if (value) {\n        this.focus(this.options.scrollOnActivate);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isSelectable\",\n    value: function isSelectable() {\n      return this.isLeaf || !this.children || !this.options.useTriState;\n    }\n  }, {\n    key: \"setIsSelected\",\n    value: function setIsSelected(value) {\n      if (this.isSelectable()) {\n        this.treeModel.setSelectedNode(this, value);\n      } else {\n        this.visibleChildren.forEach(function (child) {\n          return child.setIsSelected(value);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      this.setIsSelected(!this.isSelected);\n      return this;\n    }\n  }, {\n    key: \"toggleActivated\",\n    value: function toggleActivated() {\n      var multi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.setIsActive(!this.isActive, multi);\n      return this;\n    }\n  }, {\n    key: \"setActiveAndVisible\",\n    value: function setActiveAndVisible() {\n      var multi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.setIsActive(true, multi).ensureVisible();\n      setTimeout(this.scrollIntoView.bind(this));\n      return this;\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.treeModel.virtualScroll.scrollIntoView(this, force);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var scroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var previousNode = this.treeModel.getFocusedNode();\n      this.treeModel.setFocusedNode(this);\n\n      if (scroll) {\n        this.scrollIntoView();\n      }\n\n      if (previousNode) {\n        this.fireEvent({\n          eventName: TREE_EVENTS.blur,\n          node: previousNode\n        });\n      }\n\n      this.fireEvent({\n        eventName: TREE_EVENTS.focus,\n        node: this\n      });\n      return this;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      var previousNode = this.treeModel.getFocusedNode();\n      this.treeModel.setFocusedNode(null);\n\n      if (previousNode) {\n        this.fireEvent({\n          eventName: TREE_EVENTS.blur,\n          node: this\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setIsHidden\",\n    value: function setIsHidden(value) {\n      this.treeModel.setIsHidden(this, value);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.setIsHidden(true);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.setIsHidden(false);\n    }\n  }, {\n    key: \"mouseAction\",\n    value: function mouseAction(actionName, $event) {\n      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      this.treeModel.setFocus(true);\n      var actionMapping = this.options.actionMapping.mouse;\n      var mouseAction = actionMapping[actionName];\n\n      if (mouseAction) {\n        mouseAction(this.treeModel, this, $event, data);\n      }\n    }\n  }, {\n    key: \"getSelfHeight\",\n    value: function getSelfHeight() {\n      return this.options.nodeHeight(this);\n    }\n  }, {\n    key: \"_initChildren\",\n    value: function _initChildren() {\n      var _this5 = this;\n\n      this.children = this.getField('children').map(function (c, index) {\n        return new TreeNode(c, _this5, _this5.treeModel, index);\n      });\n    }\n  }]);\n\n  return TreeNode;\n}();\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isHidden\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isExpanded\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isActive\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isFocused\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isSelected\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isAllSelected\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"isPartiallySelected\", null);\n\n__decorate([observable$1, __metadata(\"design:type\", Array)], TreeNode.prototype, \"children\", void 0);\n\n__decorate([observable$1, __metadata(\"design:type\", Number)], TreeNode.prototype, \"index\", void 0);\n\n__decorate([observable$1, __metadata(\"design:type\", Object)], TreeNode.prototype, \"position\", void 0);\n\n__decorate([observable$1, __metadata(\"design:type\", Number)], TreeNode.prototype, \"height\", void 0);\n\n__decorate([computed$1, __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"level\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"path\", null);\n\n__decorate([computed$1, __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [])], TreeNode.prototype, \"visibleChildren\", null);\n\n__decorate([action$1, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeNode.prototype, \"setIsSelected\", null);\n\n__decorate([action$1, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], TreeNode.prototype, \"_initChildren\", null);\n\nfunction uuid() {\n  return Math.floor(Math.random() * 10000000000000);\n}\n\nvar __decorate$1 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata$1 = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar TreeModel = /*#__PURE__*/function () {\n  function TreeModel() {\n    _classCallCheck(this, TreeModel);\n\n    this.options = new TreeOptions();\n    this.eventNames = Object.keys(TREE_EVENTS);\n    this.expandedNodeIds = {};\n    this.selectedLeafNodeIds = {};\n    this.activeNodeIds = {};\n    this.hiddenNodeIds = {};\n    this.focusedNodeId = null;\n    this.firstUpdate = true;\n    this.subscriptions = [];\n  } // events\n\n\n  _createClass(TreeModel, [{\n    key: \"fireEvent\",\n    value: function fireEvent(event) {\n      event.treeModel = this;\n      this.events[event.eventName].emit(event);\n      this.events.event.emit(event);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(eventName, fn) {\n      var subscription = this.events[eventName].subscribe(fn);\n      this.subscriptions.push(subscription);\n    } // getters\n\n  }, {\n    key: \"getFocusedNode\",\n    value: function getFocusedNode() {\n      return this.focusedNode;\n    }\n  }, {\n    key: \"getActiveNode\",\n    value: function getActiveNode() {\n      return this.activeNodes[0];\n    }\n  }, {\n    key: \"getActiveNodes\",\n    value: function getActiveNodes() {\n      return this.activeNodes;\n    }\n  }, {\n    key: \"getVisibleRoots\",\n    value: function getVisibleRoots() {\n      return this.virtualRoot.visibleChildren;\n    }\n  }, {\n    key: \"getFirstRoot\",\n    value: function getFirstRoot() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var root = skipHidden ? this.getVisibleRoots() : this.roots;\n      return root != null && root.length ? root[0] : null;\n    }\n  }, {\n    key: \"getLastRoot\",\n    value: function getLastRoot() {\n      var skipHidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var root = skipHidden ? this.getVisibleRoots() : this.roots;\n      return root != null && root.length ? root[root.length - 1] : null;\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return TreeModel.focusedTree === this;\n    }\n  }, {\n    key: \"isNodeFocused\",\n    value: function isNodeFocused(node) {\n      return this.focusedNode === node;\n    }\n  }, {\n    key: \"isEmptyTree\",\n    value: function isEmptyTree() {\n      return this.roots && this.roots.length === 0;\n    }\n  }, {\n    key: \"focusedNode\",\n    get: function get() {\n      return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\n    }\n  }, {\n    key: \"expandedNodes\",\n    get: function get() {\n      var _this6 = this;\n\n      var nodes = Object.keys(this.expandedNodeIds).filter(function (id) {\n        return _this6.expandedNodeIds[id];\n      }).map(function (id) {\n        return _this6.getNodeById(id);\n      });\n      return nodes.filter(Boolean);\n    }\n  }, {\n    key: \"activeNodes\",\n    get: function get() {\n      var _this7 = this;\n\n      var nodes = Object.keys(this.activeNodeIds).filter(function (id) {\n        return _this7.activeNodeIds[id];\n      }).map(function (id) {\n        return _this7.getNodeById(id);\n      });\n      return nodes.filter(Boolean);\n    }\n  }, {\n    key: \"hiddenNodes\",\n    get: function get() {\n      var _this8 = this;\n\n      var nodes = Object.keys(this.hiddenNodeIds).filter(function (id) {\n        return _this8.hiddenNodeIds[id];\n      }).map(function (id) {\n        return _this8.getNodeById(id);\n      });\n      return nodes.filter(Boolean);\n    }\n  }, {\n    key: \"selectedLeafNodes\",\n    get: function get() {\n      var _this9 = this;\n\n      var nodes = Object.keys(this.selectedLeafNodeIds).filter(function (id) {\n        return _this9.selectedLeafNodeIds[id];\n      }).map(function (id) {\n        return _this9.getNodeById(id);\n      });\n      return nodes.filter(Boolean);\n    } // locating nodes\n\n  }, {\n    key: \"getNodeByPath\",\n    value: function getNodeByPath(path) {\n      var startNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!path) return null;\n      startNode = startNode || this.virtualRoot;\n      if (path.length === 0) return startNode;\n      if (!startNode.children) return null;\n      var childId = path.shift();\n      var childNode = startNode.children.find(function (c) {\n        return c.id === childId;\n      });\n      if (!childNode) return null;\n      return this.getNodeByPath(path, childNode);\n    }\n  }, {\n    key: \"getNodeById\",\n    value: function getNodeById(id) {\n      var idStr = id.toString();\n      return this.getNodeBy(function (node) {\n        return node.id.toString() === idStr;\n      });\n    }\n  }, {\n    key: \"getNodeBy\",\n    value: function getNodeBy(predicate) {\n      var startNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      startNode = startNode || this.virtualRoot;\n      if (!startNode.children) return null;\n      var found = startNode.children.find(predicate);\n\n      if (found) {\n        // found in children\n        return found;\n      } else {\n        // look in children's children\n        var _iterator = _createForOfIteratorHelper(startNode.children),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n            var foundInChildren = this.getNodeBy(predicate, child);\n            if (foundInChildren) return foundInChildren;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"isExpanded\",\n    value: function isExpanded(node) {\n      return this.expandedNodeIds[node.id];\n    }\n  }, {\n    key: \"isHidden\",\n    value: function isHidden(node) {\n      return this.hiddenNodeIds[node.id];\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(node) {\n      return this.activeNodeIds[node.id];\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(node) {\n      return this.selectedLeafNodeIds[node.id];\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.dispose();\n      this.unsubscribeAll();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      // Dispose reactions of the replaced nodes\n      if (this.virtualRoot) {\n        this.virtualRoot.dispose();\n      }\n    }\n  }, {\n    key: \"unsubscribeAll\",\n    value: function unsubscribeAll() {\n      this.subscriptions.forEach(function (subscription) {\n        return subscription.unsubscribe();\n      });\n      this.subscriptions = [];\n    } // actions\n\n  }, {\n    key: \"setData\",\n    value: function setData(_ref2) {\n      var nodes = _ref2.nodes,\n          _ref2$options = _ref2.options,\n          options = _ref2$options === void 0 ? null : _ref2$options,\n          _ref2$events = _ref2.events,\n          events = _ref2$events === void 0 ? null : _ref2$events;\n\n      if (options) {\n        this.options = new TreeOptions(options);\n      }\n\n      if (events) {\n        this.events = events;\n      }\n\n      if (nodes) {\n        this.nodes = nodes;\n      }\n\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      // Rebuild tree:\n      var virtualRootConfig = _defineProperty({\n        id: this.options.rootId,\n        virtual: true\n      }, this.options.childrenField, this.nodes);\n\n      this.dispose();\n      this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\n      this.roots = this.virtualRoot.children; // Fire event:\n\n      if (this.firstUpdate) {\n        if (this.roots) {\n          this.firstUpdate = false;\n\n          this._calculateExpandedNodes();\n        }\n      } else {\n        this.fireEvent({\n          eventName: TREE_EVENTS.updateData\n        });\n      }\n    }\n  }, {\n    key: \"setFocusedNode\",\n    value: function setFocusedNode(node) {\n      this.focusedNodeId = node ? node.id : null;\n    }\n  }, {\n    key: \"setFocus\",\n    value: function setFocus(value) {\n      TreeModel.focusedTree = value ? this : null;\n    }\n  }, {\n    key: \"doForAll\",\n    value: function doForAll(fn) {\n      this.roots.forEach(function (root) {\n        return root.doForAll(fn);\n      });\n    }\n  }, {\n    key: \"focusNextNode\",\n    value: function focusNextNode() {\n      var previousNode = this.getFocusedNode();\n      var nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\n      if (nextNode) nextNode.focus();\n    }\n  }, {\n    key: \"focusPreviousNode\",\n    value: function focusPreviousNode() {\n      var previousNode = this.getFocusedNode();\n      var nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\n      if (nextNode) nextNode.focus();\n    }\n  }, {\n    key: \"focusDrillDown\",\n    value: function focusDrillDown() {\n      var previousNode = this.getFocusedNode();\n\n      if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\n        previousNode.toggleExpanded();\n      } else {\n        var nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\n        if (nextNode) nextNode.focus();\n      }\n    }\n  }, {\n    key: \"focusDrillUp\",\n    value: function focusDrillUp() {\n      var previousNode = this.getFocusedNode();\n      if (!previousNode) return;\n\n      if (previousNode.isExpanded) {\n        previousNode.toggleExpanded();\n      } else {\n        var nextNode = previousNode.realParent;\n        if (nextNode) nextNode.focus();\n      }\n    }\n  }, {\n    key: \"setActiveNode\",\n    value: function setActiveNode(node, value) {\n      var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (multi) {\n        this._setActiveNodeMulti(node, value);\n      } else {\n        this._setActiveNodeSingle(node, value);\n      }\n\n      if (value) {\n        node.focus(this.options.scrollOnActivate);\n        this.fireEvent({\n          eventName: TREE_EVENTS.activate,\n          node: node\n        });\n        this.fireEvent({\n          eventName: TREE_EVENTS.nodeActivate,\n          node: node\n        }); // For IE11\n      } else {\n        this.fireEvent({\n          eventName: TREE_EVENTS.deactivate,\n          node: node\n        });\n        this.fireEvent({\n          eventName: TREE_EVENTS.nodeDeactivate,\n          node: node\n        }); // For IE11\n      }\n    }\n  }, {\n    key: \"setSelectedNode\",\n    value: function setSelectedNode(node, value) {\n      this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, _defineProperty({}, node.id, value));\n\n      if (value) {\n        node.focus();\n        this.fireEvent({\n          eventName: TREE_EVENTS.select,\n          node: node\n        });\n      } else {\n        this.fireEvent({\n          eventName: TREE_EVENTS.deselect,\n          node: node\n        });\n      }\n    }\n  }, {\n    key: \"setExpandedNode\",\n    value: function setExpandedNode(node, value) {\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, _defineProperty({}, node.id, value));\n      this.fireEvent({\n        eventName: TREE_EVENTS.toggleExpanded,\n        node: node,\n        isExpanded: value\n      });\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      this.roots.forEach(function (root) {\n        return root.expandAll();\n      });\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      this.roots.forEach(function (root) {\n        return root.collapseAll();\n      });\n    }\n  }, {\n    key: \"setIsHidden\",\n    value: function setIsHidden(node, value) {\n      this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, _defineProperty({}, node.id, value));\n    }\n  }, {\n    key: \"setHiddenNodeIds\",\n    value: function setHiddenNodeIds(nodeIds) {\n      this.hiddenNodeIds = nodeIds.reduce(function (hiddenNodeIds, id) {\n        return Object.assign(hiddenNodeIds, _defineProperty({}, id, true));\n      }, {});\n    }\n  }, {\n    key: \"performKeyAction\",\n    value: function performKeyAction(node, $event) {\n      var keyAction = this.options.actionMapping.keys[$event.keyCode];\n\n      if (keyAction) {\n        $event.preventDefault();\n        keyAction(this, node, $event);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"filterNodes\",\n    value: function filterNodes(filter) {\n      var _this10 = this;\n\n      var autoShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var filterFn;\n\n      if (!filter) {\n        return this.clearFilter();\n      } // support function and string filter\n\n\n      if (filter && typeof filter.valueOf() === 'string') {\n        filterFn = function filterFn(node) {\n          return node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n        };\n      } else if (filter && typeof filter === 'function') {\n        filterFn = filter;\n      } else {\n        console.error('Don\\'t know what to do with filter', filter);\n        console.error('Should be either a string or function');\n        return;\n      }\n\n      var ids = {};\n      this.roots.forEach(function (node) {\n        return _this10._filterNode(ids, node, filterFn, autoShow);\n      });\n      this.hiddenNodeIds = ids;\n      this.fireEvent({\n        eventName: TREE_EVENTS.changeFilter\n      });\n    }\n  }, {\n    key: \"clearFilter\",\n    value: function clearFilter() {\n      this.hiddenNodeIds = {};\n      this.fireEvent({\n        eventName: TREE_EVENTS.changeFilter\n      });\n    }\n  }, {\n    key: \"moveNode\",\n    value: function moveNode(node, to) {\n      var fromIndex = node.getIndexInParent();\n      var fromParent = node.parent;\n      if (!this.canMoveNode(node, to, fromIndex)) return;\n      var fromChildren = fromParent.getField('children'); // If node doesn't have children - create children array\n\n      if (!to.parent.getField('children')) {\n        to.parent.setField('children', []);\n      }\n\n      var toChildren = to.parent.getField('children');\n      var originalNode = fromChildren.splice(fromIndex, 1)[0]; // Compensate for index if already removed from parent:\n\n      var toIndex = fromParent === to.parent && to.index > fromIndex ? to.index - 1 : to.index;\n      toChildren.splice(toIndex, 0, originalNode);\n      fromParent.treeModel.update();\n\n      if (to.parent.treeModel !== fromParent.treeModel) {\n        to.parent.treeModel.update();\n      }\n\n      this.fireEvent({\n        eventName: TREE_EVENTS.moveNode,\n        node: originalNode,\n        to: {\n          parent: to.parent.data,\n          index: toIndex\n        },\n        from: {\n          parent: fromParent.data,\n          index: fromIndex\n        }\n      });\n    }\n  }, {\n    key: \"copyNode\",\n    value: function copyNode(node, to) {\n      var fromIndex = node.getIndexInParent();\n      if (!this.canMoveNode(node, to, fromIndex)) return; // If node doesn't have children - create children array\n\n      if (!to.parent.getField('children')) {\n        to.parent.setField('children', []);\n      }\n\n      var toChildren = to.parent.getField('children');\n      var nodeCopy = this.options.getNodeClone(node);\n      toChildren.splice(to.index, 0, nodeCopy);\n      node.treeModel.update();\n\n      if (to.parent.treeModel !== node.treeModel) {\n        to.parent.treeModel.update();\n      }\n\n      this.fireEvent({\n        eventName: TREE_EVENTS.copyNode,\n        node: nodeCopy,\n        to: {\n          parent: to.parent.data,\n          index: to.index\n        }\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return {\n        expandedNodeIds: this.expandedNodeIds,\n        selectedLeafNodeIds: this.selectedLeafNodeIds,\n        activeNodeIds: this.activeNodeIds,\n        hiddenNodeIds: this.hiddenNodeIds,\n        focusedNodeId: this.focusedNodeId\n      };\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      if (!state) return;\n      Object.assign(this, {\n        expandedNodeIds: state.expandedNodeIds || {},\n        selectedLeafNodeIds: state.selectedLeafNodeIds || {},\n        activeNodeIds: state.activeNodeIds || {},\n        hiddenNodeIds: state.hiddenNodeIds || {},\n        focusedNodeId: state.focusedNodeId\n      });\n    }\n  }, {\n    key: \"subscribeToState\",\n    value: function subscribeToState(fn) {\n      var _this11 = this;\n\n      autorun(function () {\n        return fn(_this11.getState());\n      });\n    }\n  }, {\n    key: \"canMoveNode\",\n    value: function canMoveNode(node, to) {\n      var fromIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var fromNodeIndex = fromIndex || node.getIndexInParent(); // same node:\n\n      if (node.parent === to.parent && fromIndex === to.index) {\n        return false;\n      }\n\n      return !to.parent.isDescendantOf(node);\n    }\n  }, {\n    key: \"calculateExpandedNodes\",\n    value: function calculateExpandedNodes() {\n      this._calculateExpandedNodes();\n    } // private methods\n\n  }, {\n    key: \"_filterNode\",\n    value: function _filterNode(ids, node, filterFn, autoShow) {\n      var _this12 = this;\n\n      // if node passes function then it's visible\n      var isVisible = filterFn(node);\n\n      if (node.children) {\n        // if one of node's children passes filter then this node is also visible\n        node.children.forEach(function (child) {\n          if (_this12._filterNode(ids, child, filterFn, autoShow)) {\n            isVisible = true;\n          }\n        });\n      } // mark node as hidden\n\n\n      if (!isVisible) {\n        ids[node.id] = true;\n      } // auto expand parents to make sure the filtered nodes are visible\n\n\n      if (autoShow && isVisible) {\n        node.ensureVisible();\n      }\n\n      return isVisible;\n    }\n  }, {\n    key: \"_calculateExpandedNodes\",\n    value: function _calculateExpandedNodes() {\n      var _this13 = this;\n\n      var startNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      startNode = startNode || this.virtualRoot;\n\n      if (startNode.data[this.options.isExpandedField]) {\n        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, _defineProperty({}, startNode.id, true));\n      }\n\n      if (startNode.children) {\n        startNode.children.forEach(function (child) {\n          return _this13._calculateExpandedNodes(child);\n        });\n      }\n    }\n  }, {\n    key: \"_setActiveNodeSingle\",\n    value: function _setActiveNodeSingle(node, value) {\n      var _this14 = this;\n\n      // Deactivate all other nodes:\n      this.activeNodes.filter(function (activeNode) {\n        return activeNode !== node;\n      }).forEach(function (activeNode) {\n        _this14.fireEvent({\n          eventName: TREE_EVENTS.deactivate,\n          node: activeNode\n        });\n\n        _this14.fireEvent({\n          eventName: TREE_EVENTS.nodeDeactivate,\n          node: activeNode\n        }); // For IE11\n\n      });\n\n      if (value) {\n        this.activeNodeIds = _defineProperty({}, node.id, true);\n      } else {\n        this.activeNodeIds = {};\n      }\n    }\n  }, {\n    key: \"_setActiveNodeMulti\",\n    value: function _setActiveNodeMulti(node, value) {\n      this.activeNodeIds = Object.assign({}, this.activeNodeIds, _defineProperty({}, node.id, value));\n    }\n  }]);\n\n  return TreeModel;\n}();\n\nTreeModel.ɵfac = function TreeModel_Factory(t) {\n  return new (t || TreeModel)();\n};\n\nTreeModel.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeModel,\n  factory: TreeModel.ɵfac\n});\nTreeModel.focusedTree = null;\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Array)], TreeModel.prototype, \"roots\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Object)], TreeModel.prototype, \"expandedNodeIds\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Object)], TreeModel.prototype, \"selectedLeafNodeIds\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Object)], TreeModel.prototype, \"activeNodeIds\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Object)], TreeModel.prototype, \"hiddenNodeIds\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", Object)], TreeModel.prototype, \"focusedNodeId\", void 0);\n\n__decorate$1([observable$1, __metadata$1(\"design:type\", TreeNode)], TreeModel.prototype, \"virtualRoot\", void 0);\n\n__decorate$1([computed$1, __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [])], TreeModel.prototype, \"focusedNode\", null);\n\n__decorate$1([computed$1, __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [])], TreeModel.prototype, \"expandedNodes\", null);\n\n__decorate$1([computed$1, __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [])], TreeModel.prototype, \"activeNodes\", null);\n\n__decorate$1([computed$1, __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [])], TreeModel.prototype, \"hiddenNodes\", null);\n\n__decorate$1([computed$1, __metadata$1(\"design:type\", Object), __metadata$1(\"design:paramtypes\", [])], TreeModel.prototype, \"selectedLeafNodes\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setData\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"update\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setFocusedNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setFocus\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"doForAll\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"focusNextNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"focusPreviousNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"focusDrillDown\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"focusDrillUp\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setActiveNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setSelectedNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setExpandedNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"expandAll\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"collapseAll\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setIsHidden\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setHiddenNodeIds\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"filterNodes\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", []), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"clearFilter\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"moveNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object, Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"copyNode\", null);\n\n__decorate$1([action$1, __metadata$1(\"design:type\", Function), __metadata$1(\"design:paramtypes\", [Object]), __metadata$1(\"design:returntype\", void 0)], TreeModel.prototype, \"setState\", null);\n\nvar TreeDraggedElement = /*#__PURE__*/function () {\n  function TreeDraggedElement() {\n    _classCallCheck(this, TreeDraggedElement);\n\n    this._draggedElement = null;\n  }\n\n  _createClass(TreeDraggedElement, [{\n    key: \"set\",\n    value: function set(draggedElement) {\n      this._draggedElement = draggedElement;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._draggedElement;\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return !!this.get();\n    }\n  }]);\n\n  return TreeDraggedElement;\n}();\n\nTreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) {\n  return new (t || TreeDraggedElement)();\n};\n/** @nocollapse */\n\n\nTreeDraggedElement.ɵprov = ɵɵdefineInjectable({\n  factory: function TreeDraggedElement_Factory() {\n    return new TreeDraggedElement();\n  },\n  token: TreeDraggedElement,\n  providedIn: \"root\"\n});\n\nvar __decorate$2 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata$2 = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\n\nvar Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\n\nvar TreeVirtualScroll = /*#__PURE__*/function () {\n  function TreeVirtualScroll(treeModel) {\n    var _this15 = this;\n\n    _classCallCheck(this, TreeVirtualScroll);\n\n    this.treeModel = treeModel;\n    this.yBlocks = 0;\n    this.x = 0;\n    this.viewportHeight = null;\n    this.viewport = null;\n    treeModel.virtualScroll = this;\n    this._dispose = [autorun(function () {\n      return _this15.fixScroll();\n    })];\n  }\n\n  _createClass(TreeVirtualScroll, [{\n    key: \"y\",\n    get: function get() {\n      return this.yBlocks * Y_EPSILON;\n    }\n  }, {\n    key: \"totalHeight\",\n    get: function get() {\n      return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(event) {\n      this.treeModel.fireEvent(event);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this16 = this;\n\n      var fn = this.recalcPositions.bind(this);\n      fn();\n      this._dispose = [].concat(_toConsumableArray(this._dispose), [reaction(function () {\n        return _this16.treeModel.roots;\n      }, fn), reaction(function () {\n        return _this16.treeModel.expandedNodeIds;\n      }, fn), reaction(function () {\n        return _this16.treeModel.hiddenNodeIds;\n      }, fn)]);\n      this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.treeModel.options.useVirtualScroll;\n    }\n  }, {\n    key: \"_setYBlocks\",\n    value: function _setYBlocks(value) {\n      this.yBlocks = value;\n    }\n  }, {\n    key: \"recalcPositions\",\n    value: function recalcPositions() {\n      this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\n    }\n  }, {\n    key: \"_getPositionAfter\",\n    value: function _getPositionAfter(nodes, startPos) {\n      var _this17 = this;\n\n      var position = startPos;\n      nodes.forEach(function (node) {\n        node.position = position;\n        position = _this17._getPositionAfterNode(node, position);\n      });\n      return position;\n    }\n  }, {\n    key: \"_getPositionAfterNode\",\n    value: function _getPositionAfterNode(node, startPos) {\n      var position = node.getSelfHeight() + startPos;\n\n      if (node.children && node.isExpanded) {\n        // TBD: consider loading component as well\n        position = this._getPositionAfter(node.visibleChildren, position);\n      }\n\n      node.height = position - startPos;\n      return position;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._dispose.forEach(function (d) {\n        return d();\n      });\n    }\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(viewport) {\n      Object.assign(this, {\n        viewport: viewport,\n        x: viewport.scrollLeft,\n        yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\n        viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\n      });\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView(node, force) {\n      var scrollToMiddle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (node.options.scrollContainer) {\n        var scrollContainer = node.options.scrollContainer;\n        var scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\n        var scrollContainerTop = scrollContainer.getBoundingClientRect().top;\n        var nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\n\n        if (force || // force scroll to node\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) {\n          // node is below container\n          scrollContainer.scrollTop = scrollToMiddle ? nodeTop - scrollContainerHeight / 2 : // scroll to middle\n          nodeTop; // scroll to start\n        }\n      } else {\n        if (force || // force scroll to node\n        node.position < this.y || // node is above viewport\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) {\n          // node is below viewport\n          if (this.viewport) {\n            this.viewport.scrollTop = scrollToMiddle ? node.position - this.viewportHeight / 2 : // scroll to middle\n            node.position; // scroll to start\n\n            this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getViewportNodes\",\n    value: function getViewportNodes(nodes) {\n      var _this18 = this;\n\n      if (!nodes) return [];\n      var visibleNodes = nodes.filter(function (node) {\n        return !node.isHidden;\n      });\n      if (!this.isEnabled()) return visibleNodes;\n      if (!this.viewportHeight || !visibleNodes.length) return []; // When loading children async this method is called before their height and position is calculated.\n      // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\n      // which means that it loops through every visibleNodes item and push them into viewportNodes array.\n      // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\n\n      var lastVisibleNode = visibleNodes.slice(-1)[0];\n      if (!lastVisibleNode.height && lastVisibleNode.position === 0) return []; // Search for first node in the viewport using binary search\n      // Look for first node that starts after the beginning of the viewport (with buffer)\n      // Or that ends after the beginning of the viewport\n\n      var firstIndex = binarySearch(visibleNodes, function (node) {\n        return node.position + Y_OFFSET > _this18.y || node.position + node.height > _this18.y;\n      }); // Search for last node in the viewport using binary search\n      // Look for first node that starts after the end of the viewport (with buffer)\n\n      var lastIndex = binarySearch(visibleNodes, function (node) {\n        return node.position - Y_OFFSET > _this18.y + _this18.viewportHeight;\n      }, firstIndex);\n      var viewportNodes = [];\n\n      for (var i = firstIndex; i <= lastIndex; i++) {\n        viewportNodes.push(visibleNodes[i]);\n      }\n\n      return viewportNodes;\n    }\n  }, {\n    key: \"fixScroll\",\n    value: function fixScroll() {\n      var maxY = Math.max(0, this.totalHeight - this.viewportHeight);\n      if (this.y < 0) this._setYBlocks(0);\n      if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\n    }\n  }]);\n\n  return TreeVirtualScroll;\n}();\n\nTreeVirtualScroll.ɵfac = function TreeVirtualScroll_Factory(t) {\n  return new (t || TreeVirtualScroll)(ɵngcc0.ɵɵinject(TreeModel));\n};\n\nTreeVirtualScroll.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: TreeVirtualScroll,\n  factory: TreeVirtualScroll.ɵfac\n});\n/** @nocollapse */\n\nTreeVirtualScroll.ctorParameters = function () {\n  return [{\n    type: TreeModel\n  }];\n};\n\n__decorate$2([observable$1, __metadata$2(\"design:type\", Object)], TreeVirtualScroll.prototype, \"yBlocks\", void 0);\n\n__decorate$2([observable$1, __metadata$2(\"design:type\", Object)], TreeVirtualScroll.prototype, \"x\", void 0);\n\n__decorate$2([observable$1, __metadata$2(\"design:type\", Object)], TreeVirtualScroll.prototype, \"viewportHeight\", void 0);\n\n__decorate$2([computed$1, __metadata$2(\"design:type\", Object), __metadata$2(\"design:paramtypes\", [])], TreeVirtualScroll.prototype, \"y\", null);\n\n__decorate$2([computed$1, __metadata$2(\"design:type\", Object), __metadata$2(\"design:paramtypes\", [])], TreeVirtualScroll.prototype, \"totalHeight\", null);\n\n__decorate$2([action$1, __metadata$2(\"design:type\", Function), __metadata$2(\"design:paramtypes\", [Object]), __metadata$2(\"design:returntype\", void 0)], TreeVirtualScroll.prototype, \"_setYBlocks\", null);\n\n__decorate$2([action$1, __metadata$2(\"design:type\", Function), __metadata$2(\"design:paramtypes\", []), __metadata$2(\"design:returntype\", void 0)], TreeVirtualScroll.prototype, \"recalcPositions\", null);\n\n__decorate$2([action$1, __metadata$2(\"design:type\", Function), __metadata$2(\"design:paramtypes\", [Object]), __metadata$2(\"design:returntype\", void 0)], TreeVirtualScroll.prototype, \"setViewport\", null);\n\n__decorate$2([action$1, __metadata$2(\"design:type\", Function), __metadata$2(\"design:paramtypes\", [Object, Object, Object]), __metadata$2(\"design:returntype\", void 0)], TreeVirtualScroll.prototype, \"scrollIntoView\", null);\n\nfunction binarySearch(nodes, condition) {\n  var firstIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var index = firstIndex;\n  var toIndex = nodes.length - 1;\n\n  while (index !== toIndex) {\n    var midIndex = Math.floor((index + toIndex) / 2);\n\n    if (condition(nodes[midIndex])) {\n      toIndex = midIndex;\n    } else {\n      if (index === midIndex) index = toIndex;else index = midIndex;\n    }\n  }\n\n  return index;\n}\n\nvar LoadingComponent = function LoadingComponent() {\n  _classCallCheck(this, LoadingComponent);\n};\n\nLoadingComponent.ɵfac = function LoadingComponent_Factory(t) {\n  return new (t || LoadingComponent)();\n};\n\nLoadingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: LoadingComponent,\n  selectors: [[\"tree-loading-component\"]],\n  inputs: {\n    template: \"template\",\n    node: \"node\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function LoadingComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, LoadingComponent_span_0_Template, 2, 0, \"span\", 0);\n      ɵngcc0.ɵɵelementContainer(1, 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.node));\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2\n});\nLoadingComponent.propDecorators = {\n  template: [{\n    type: Input\n  }],\n  node: [{\n    type: Input\n  }]\n};\n\nvar TreeViewportComponent = /*#__PURE__*/function () {\n  function TreeViewportComponent(elementRef, ngZone, virtualScroll) {\n    var _this19 = this;\n\n    _classCallCheck(this, TreeViewportComponent);\n\n    this.elementRef = elementRef;\n    this.ngZone = ngZone;\n    this.virtualScroll = virtualScroll;\n    this.setViewport = this.throttle(function () {\n      _this19.virtualScroll.setViewport(_this19.elementRef.nativeElement);\n    }, 17);\n    this.scrollEventHandler = this.setViewport.bind(this);\n  }\n\n  _createClass(TreeViewportComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.virtualScroll.init();\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this20 = this;\n\n      setTimeout(function () {\n        _this20.setViewport();\n\n        _this20.virtualScroll.fireEvent({\n          eventName: TREE_EVENTS.initialized\n        });\n      });\n      var el = this.elementRef.nativeElement;\n      this.ngZone.runOutsideAngular(function () {\n        el.addEventListener('scroll', _this20.scrollEventHandler);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.virtualScroll.clear();\n      var el = this.elementRef.nativeElement;\n      el.removeEventListener('scroll', this.scrollEventHandler);\n    }\n  }, {\n    key: \"getTotalHeight\",\n    value: function getTotalHeight() {\n      return this.virtualScroll.isEnabled() && this.virtualScroll.totalHeight + 'px' || 'auto';\n    }\n  }, {\n    key: \"throttle\",\n    value: function throttle(func, timeFrame) {\n      var lastTime = 0;\n      return function () {\n        var now = Date.now();\n\n        if (now - lastTime >= timeFrame) {\n          func();\n          lastTime = now;\n        }\n      };\n    }\n  }]);\n\n  return TreeViewportComponent;\n}();\n\nTreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) {\n  return new (t || TreeViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TreeVirtualScroll));\n};\n\nTreeViewportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeViewportComponent,\n  selectors: [[\"tree-viewport\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([TreeVirtualScroll])],\n  ngContentSelectors: _c2,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"]],\n  template: function TreeViewportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: [TreeMobxAutorunDirective],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nTreeViewportComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: TreeVirtualScroll\n  }];\n};\n\nvar TreeComponent = /*#__PURE__*/function () {\n  function TreeComponent(treeModel, treeDraggedElement) {\n    var _this21 = this;\n\n    _classCallCheck(this, TreeComponent);\n\n    this.treeModel = treeModel;\n    this.treeDraggedElement = treeDraggedElement;\n    treeModel.eventNames.forEach(function (name) {\n      return _this21[name] = new EventEmitter();\n    });\n    treeModel.subscribeToState(function (state) {\n      return _this21.stateChange.emit(state);\n    });\n  } // Will be handled in ngOnChanges\n\n\n  _createClass(TreeComponent, [{\n    key: \"nodes\",\n    set: function set(nodes) {}\n  }, {\n    key: \"options\",\n    set: function set(options) {}\n  }, {\n    key: \"focused\",\n    set: function set(value) {\n      this.treeModel.setFocus(value);\n    }\n  }, {\n    key: \"state\",\n    set: function set(state) {\n      this.treeModel.setState(state);\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown($event) {\n      if (!this.treeModel.isFocused) return;\n      if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\n      var focusedNode = this.treeModel.getFocusedNode();\n      this.treeModel.performKeyAction(focusedNode, $event);\n    }\n  }, {\n    key: \"onMousedown\",\n    value: function onMousedown($event) {\n      function isOutsideClick(startElement, nodeName) {\n        return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\n      }\n\n      if (isOutsideClick($event.target, 'tree-root')) {\n        this.treeModel.setFocus(false);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.options || changes.nodes) {\n        this.treeModel.setData({\n          options: changes.options && changes.options.currentValue,\n          nodes: changes.nodes && changes.nodes.currentValue,\n          events: this.pick(this, this.treeModel.eventNames)\n        });\n      }\n    }\n  }, {\n    key: \"sizeChanged\",\n    value: function sizeChanged() {\n      this.viewportComponent.setViewport();\n    }\n  }, {\n    key: \"pick\",\n    value: function pick(object, keys) {\n      return keys.reduce(function (obj, key) {\n        if (object && object.hasOwnProperty(key)) {\n          obj[key] = object[key];\n        }\n\n        return obj;\n      }, {});\n    }\n  }]);\n\n  return TreeComponent;\n}();\n\nTreeComponent.ɵfac = function TreeComponent_Factory(t) {\n  return new (t || TreeComponent)(ɵngcc0.ɵɵdirectiveInject(TreeModel), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement));\n};\n\nTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeComponent,\n  selectors: [[\"Tree\"], [\"tree-root\"]],\n  contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c3, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c4, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c5, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);\n    }\n  },\n  viewQuery: function TreeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c7, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);\n    }\n  },\n  hostBindings: function TreeComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function TreeComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeydown($event);\n      }, false, ɵngcc0.ɵɵresolveBody)(\"mousedown\", function TreeComponent_mousedown_HostBindingHandler($event) {\n        return ctx.onMousedown($event);\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n  },\n  inputs: {\n    nodes: \"nodes\",\n    options: \"options\",\n    focused: \"focused\",\n    state: \"state\"\n  },\n  outputs: {\n    toggleExpanded: \"toggleExpanded\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    nodeActivate: \"nodeActivate\",\n    nodeDeactivate: \"nodeDeactivate\",\n    select: \"select\",\n    deselect: \"deselect\",\n    focus: \"focus\",\n    blur: \"blur\",\n    updateData: \"updateData\",\n    initialized: \"initialized\",\n    moveNode: \"moveNode\",\n    copyNode: \"copyNode\",\n    loadNodeChildren: \"loadNodeChildren\",\n    changeFilter: \"changeFilter\",\n    event: \"event\",\n    stateChange: \"stateChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TreeModel]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 6,\n  consts: [[\"viewport\", \"\"], [1, \"angular-tree-component\"], [3, \"nodes\", \"treeModel\", \"templates\", 4, \"ngIf\"], [\"class\", \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"treeModel\", \"templates\"], [1, \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\"]],\n  template: function TreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"tree-viewport\", null, 0);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, \"tree-node-collection\", 2);\n      ɵngcc0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, \"tree-node-drop-slot\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"node-dragging\", ctx.treeDraggedElement.isDragging())(\"angular-tree-component-rtl\", ctx.treeModel.options.rtl);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.treeModel.roots);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.treeModel.isEmptyTree());\n    }\n  },\n  directives: function directives() {\n    return [TreeViewportComponent, ɵngcc1.NgIf, TreeNodeCollectionComponent, TreeNodeDropSlot];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nTreeComponent.ctorParameters = function () {\n  return [{\n    type: TreeModel\n  }, {\n    type: TreeDraggedElement\n  }];\n};\n\nTreeComponent.propDecorators = {\n  loadingTemplate: [{\n    type: ContentChild,\n    args: ['loadingTemplate', {\n      static: false\n    }]\n  }],\n  treeNodeTemplate: [{\n    type: ContentChild,\n    args: ['treeNodeTemplate', {\n      static: false\n    }]\n  }],\n  treeNodeWrapperTemplate: [{\n    type: ContentChild,\n    args: ['treeNodeWrapperTemplate', {\n      static: false\n    }]\n  }],\n  treeNodeFullTemplate: [{\n    type: ContentChild,\n    args: ['treeNodeFullTemplate', {\n      static: false\n    }]\n  }],\n  viewportComponent: [{\n    type: ViewChild,\n    args: ['viewport', {\n      static: false\n    }]\n  }],\n  nodes: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  focused: [{\n    type: Input\n  }],\n  state: [{\n    type: Input\n  }],\n  toggleExpanded: [{\n    type: Output\n  }],\n  activate: [{\n    type: Output\n  }],\n  deactivate: [{\n    type: Output\n  }],\n  nodeActivate: [{\n    type: Output\n  }],\n  nodeDeactivate: [{\n    type: Output\n  }],\n  select: [{\n    type: Output\n  }],\n  deselect: [{\n    type: Output\n  }],\n  focus: [{\n    type: Output\n  }],\n  blur: [{\n    type: Output\n  }],\n  updateData: [{\n    type: Output\n  }],\n  initialized: [{\n    type: Output\n  }],\n  moveNode: [{\n    type: Output\n  }],\n  copyNode: [{\n    type: Output\n  }],\n  loadNodeChildren: [{\n    type: Output\n  }],\n  changeFilter: [{\n    type: Output\n  }],\n  event: [{\n    type: Output\n  }],\n  stateChange: [{\n    type: Output\n  }],\n  onKeydown: [{\n    type: HostListener,\n    args: ['body: keydown', ['$event']]\n  }],\n  onMousedown: [{\n    type: HostListener,\n    args: ['body: mousedown', ['$event']]\n  }]\n};\n\nvar TreeNodeComponent = function TreeNodeComponent() {\n  _classCallCheck(this, TreeNodeComponent);\n};\n\nTreeNodeComponent.ɵfac = function TreeNodeComponent_Factory(t) {\n  return new (t || TreeNodeComponent)();\n};\n\nTreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeComponent,\n  selectors: [[\"TreeNode\"], [\"tree-node\"]],\n  inputs: {\n    node: \"node\",\n    index: \"index\",\n    templates: \"templates\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"], [3, \"class\", \"tree-node\", \"tree-node-expanded\", \"tree-node-collapsed\", \"tree-node-leaf\", \"tree-node-active\", \"tree-node-focused\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"node\", \"index\", \"templates\"], [3, \"node\", \"templates\"], [3, \"dropIndex\", \"node\"]],\n  template: function TreeNodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeComponent_ng_container_0_Template, 3, 8, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: function directives() {\n    return [TreeMobxAutorunDirective, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, TreeNodeWrapperComponent, TreeNodeChildrenComponent, TreeNodeDropSlot];\n  },\n  encapsulation: 2\n});\nTreeNodeComponent.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  index: [{\n    type: Input\n  }],\n  templates: [{\n    type: Input\n  }]\n};\n\nvar TreeNodeContent = function TreeNodeContent() {\n  _classCallCheck(this, TreeNodeContent);\n};\n\nTreeNodeContent.ɵfac = function TreeNodeContent_Factory(t) {\n  return new (t || TreeNodeContent)();\n};\n\nTreeNodeContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeContent,\n  selectors: [[\"tree-node-content\"]],\n  inputs: {\n    node: \"node\",\n    index: \"index\",\n    template: \"template\"\n  },\n  decls: 2,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function TreeNodeContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeContent_span_0_Template, 2, 1, \"span\", 0);\n      ɵngcc0.ɵɵelementContainer(1, 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.template);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(3, _c10, ctx.node, ctx.node, ctx.index));\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2\n});\nTreeNodeContent.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  index: [{\n    type: Input\n  }],\n  template: [{\n    type: Input\n  }]\n};\n\nvar TreeNodeDropSlot = /*#__PURE__*/function () {\n  function TreeNodeDropSlot() {\n    _classCallCheck(this, TreeNodeDropSlot);\n  }\n\n  _createClass(TreeNodeDropSlot, [{\n    key: \"onDrop\",\n    value: function onDrop($event) {\n      this.node.mouseAction('drop', $event.event, {\n        from: $event.element,\n        to: {\n          parent: this.node,\n          index: this.dropIndex\n        }\n      });\n    }\n  }, {\n    key: \"allowDrop\",\n    value: function allowDrop(element, $event) {\n      return this.node.options.allowDrop(element, {\n        parent: this.node,\n        index: this.dropIndex\n      }, $event);\n    }\n  }]);\n\n  return TreeNodeDropSlot;\n}();\n\nTreeNodeDropSlot.ɵfac = function TreeNodeDropSlot_Factory(t) {\n  return new (t || TreeNodeDropSlot)();\n};\n\nTreeNodeDropSlot.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeDropSlot,\n  selectors: [[\"TreeNodeDropSlot\"], [\"tree-node-drop-slot\"]],\n  inputs: {\n    node: \"node\",\n    dropIndex: \"dropIndex\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[1, \"node-drop-slot\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrop\"]],\n  template: function TreeNodeDropSlot_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"treeDrop\", function TreeNodeDropSlot_Template_div_treeDrop_0_listener($event) {\n        return ctx.onDrop($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeAllowDrop\", ctx.allowDrop.bind(ctx))(\"allowDragoverStyling\", true);\n    }\n  },\n  directives: function directives() {\n    return [TreeDropDirective];\n  },\n  encapsulation: 2\n});\nTreeNodeDropSlot.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  dropIndex: [{\n    type: Input\n  }]\n};\n\nvar TreeNodeExpanderComponent = function TreeNodeExpanderComponent() {\n  _classCallCheck(this, TreeNodeExpanderComponent);\n};\n\nTreeNodeExpanderComponent.ɵfac = function TreeNodeExpanderComponent_Factory(t) {\n  return new (t || TreeNodeExpanderComponent)();\n};\n\nTreeNodeExpanderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeExpanderComponent,\n  selectors: [[\"tree-node-expander\"]],\n  inputs: {\n    node: \"node\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"], [\"class\", \"toggle-children-wrapper\", 3, \"toggle-children-wrapper-expanded\", \"toggle-children-wrapper-collapsed\", \"click\", 4, \"ngIf\"], [\"class\", \"toggle-children-placeholder\", 4, \"ngIf\"], [1, \"toggle-children-wrapper\", 3, \"click\"], [1, \"toggle-children\"], [1, \"toggle-children-placeholder\"]],\n  template: function TreeNodeExpanderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeExpanderComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: [TreeMobxAutorunDirective, ɵngcc1.NgIf],\n  encapsulation: 2\n});\nTreeNodeExpanderComponent.propDecorators = {\n  node: [{\n    type: Input\n  }]\n};\n\nvar TreeNodeChildrenComponent = function TreeNodeChildrenComponent() {\n  _classCallCheck(this, TreeNodeChildrenComponent);\n};\n\nTreeNodeChildrenComponent.ɵfac = function TreeNodeChildrenComponent_Factory(t) {\n  return new (t || TreeNodeChildrenComponent)();\n};\n\nTreeNodeChildrenComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeChildrenComponent,\n  selectors: [[\"tree-node-children\"]],\n  inputs: {\n    node: \"node\",\n    templates: \"templates\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"], [3, \"tree-children\", \"tree-children-no-padding\", 4, \"treeAnimateOpen\", \"treeAnimateOpenSpeed\", \"treeAnimateOpenAcceleration\", \"treeAnimateOpenEnabled\"], [3, \"nodes\", \"templates\", \"treeModel\", 4, \"ngIf\"], [\"class\", \"tree-node-loading\", 3, \"padding-left\", \"template\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"templates\", \"treeModel\"], [1, \"tree-node-loading\", 3, \"template\", \"node\"]],\n  template: function TreeNodeChildrenComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeChildrenComponent_ng_container_0_Template, 2, 4, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: function directives() {\n    return [TreeMobxAutorunDirective, TreeAnimateOpenDirective, ɵngcc1.NgIf, TreeNodeCollectionComponent, LoadingComponent];\n  },\n  encapsulation: 2\n});\nTreeNodeChildrenComponent.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  templates: [{\n    type: Input\n  }]\n}; // Re-export mobx operators to be able to use inside components with AOT:\n\nfunction actionInternal() {\n  return action$1.apply(void 0, arguments);\n}\n\nvar action = Object.assign(actionInternal, action$1);\n\nfunction computedInternal() {\n  return computed$1.apply(void 0, arguments);\n}\n\nvar computed = Object.assign(computedInternal, computed$1);\n\nfunction observableInternal() {\n  return observable$1.apply(void 0, arguments);\n}\n\nvar observable = Object.assign(observableInternal, observable$1);\n\nvar __decorate$3 = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata$3 = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar TreeNodeCollectionComponent = /*#__PURE__*/function () {\n  function TreeNodeCollectionComponent() {\n    _classCallCheck(this, TreeNodeCollectionComponent);\n\n    this._dispose = [];\n  }\n\n  _createClass(TreeNodeCollectionComponent, [{\n    key: \"nodes\",\n    get: function get() {\n      return this._nodes;\n    },\n    set: function set(nodes) {\n      this.setNodes(nodes);\n    }\n  }, {\n    key: \"marginTop\",\n    get: function get() {\n      var firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\n      var relativePosition = firstNode && firstNode.parent ? firstNode.position - firstNode.parent.position - firstNode.parent.getSelfHeight() : 0;\n      return \"\".concat(relativePosition, \"px\");\n    }\n  }, {\n    key: \"setNodes\",\n    value: function setNodes(nodes) {\n      this._nodes = nodes;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this22 = this;\n\n      this.virtualScroll = this.treeModel.virtualScroll;\n      this._dispose = [// return node indexes so we can compare structurally,\n      reaction(function () {\n        return _this22.virtualScroll.getViewportNodes(_this22.nodes).map(function (n) {\n          return n.index;\n        });\n      }, function (nodeIndexes) {\n        _this22.viewportNodes = nodeIndexes.map(function (i) {\n          return _this22.nodes[i];\n        });\n      }, {\n        compareStructural: true,\n        fireImmediately: true\n      }), reaction(function () {\n        return _this22.nodes;\n      }, function (nodes) {\n        _this22.viewportNodes = _this22.virtualScroll.getViewportNodes(nodes);\n      })];\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._dispose.forEach(function (d) {\n        return d();\n      });\n    }\n  }, {\n    key: \"trackNode\",\n    value: function trackNode(index, node) {\n      return node.id;\n    }\n  }]);\n\n  return TreeNodeCollectionComponent;\n}();\n\nTreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) {\n  return new (t || TreeNodeCollectionComponent)();\n};\n\nTreeNodeCollectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeCollectionComponent,\n  selectors: [[\"tree-node-collection\"]],\n  inputs: {\n    nodes: \"nodes\",\n    treeModel: \"treeModel\",\n    templates: \"templates\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"], [3, \"node\", \"index\", \"templates\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"index\", \"templates\"]],\n  template: function TreeNodeCollectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: [TreeMobxAutorunDirective, ɵngcc1.NgForOf, TreeNodeComponent],\n  encapsulation: 2\n});\nTreeNodeCollectionComponent.propDecorators = {\n  nodes: [{\n    type: Input\n  }],\n  treeModel: [{\n    type: Input\n  }],\n  templates: [{\n    type: Input\n  }]\n};\n\n__decorate$3([observable, __metadata$3(\"design:type\", Object)], TreeNodeCollectionComponent.prototype, \"_nodes\", void 0);\n\n__decorate$3([observable, __metadata$3(\"design:type\", Array)], TreeNodeCollectionComponent.prototype, \"viewportNodes\", void 0);\n\n__decorate$3([computed, __metadata$3(\"design:type\", String), __metadata$3(\"design:paramtypes\", [])], TreeNodeCollectionComponent.prototype, \"marginTop\", null);\n\n__decorate$3([action, __metadata$3(\"design:type\", Function), __metadata$3(\"design:paramtypes\", [Object]), __metadata$3(\"design:returntype\", void 0)], TreeNodeCollectionComponent.prototype, \"setNodes\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[treeMobxAutorun]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, {\n    treeMobxAutorun: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeModel, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDraggedElement, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeVirtualScroll, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TreeModel\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      selector: 'tree-loading-component',\n      template: \"\\n    <span *ngIf=\\\"!template\\\">loading...</span>\\n    <ng-container\\n      [ngTemplateOutlet]=\\\"template\\\"\\n      [ngTemplateOutletContext]=\\\"{ $implicit: node }\\\">\\n    </ng-container>\\n  \"\n    }]\n  }], null, {\n    template: [{\n      type: Input\n    }],\n    node: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeViewportComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-viewport',\n      providers: [TreeVirtualScroll],\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div [style.height]=\\\"getTotalHeight()\\\">\\n        <ng-content></ng-content>\\n      </div>\\n    </ng-container>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: TreeVirtualScroll\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'Tree, tree-root',\n      providers: [TreeModel],\n      template: \"\\n      <tree-viewport #viewport>\\n          <div\\n                  class=\\\"angular-tree-component\\\"\\n                  [class.node-dragging]=\\\"treeDraggedElement.isDragging()\\\"\\n                  [class.angular-tree-component-rtl]=\\\"treeModel.options.rtl\\\">\\n              <tree-node-collection\\n                      *ngIf=\\\"treeModel.roots\\\"\\n                      [nodes]=\\\"treeModel.roots\\\"\\n                      [treeModel]=\\\"treeModel\\\"\\n                      [templates]=\\\"{\\n            loadingTemplate: loadingTemplate,\\n            treeNodeTemplate: treeNodeTemplate,\\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\\n            treeNodeFullTemplate: treeNodeFullTemplate\\n          }\\\">\\n              </tree-node-collection>\\n              <tree-node-drop-slot\\n                      class=\\\"empty-tree-drop-slot\\\"\\n                      *ngIf=\\\"treeModel.isEmptyTree()\\\"\\n                      [dropIndex]=\\\"0\\\"\\n                      [node]=\\\"treeModel.virtualRoot\\\">\\n              </tree-node-drop-slot>\\n          </div>\\n      </tree-viewport>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: TreeModel\n    }, {\n      type: TreeDraggedElement\n    }];\n  }, {\n    nodes: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    focused: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }],\n    onKeydown: [{\n      type: HostListener,\n      args: ['body: keydown', ['$event']]\n    }],\n    onMousedown: [{\n      type: HostListener,\n      args: ['body: mousedown', ['$event']]\n    }],\n    loadingTemplate: [{\n      type: ContentChild,\n      args: ['loadingTemplate', {\n        static: false\n      }]\n    }],\n    treeNodeTemplate: [{\n      type: ContentChild,\n      args: ['treeNodeTemplate', {\n        static: false\n      }]\n    }],\n    treeNodeWrapperTemplate: [{\n      type: ContentChild,\n      args: ['treeNodeWrapperTemplate', {\n        static: false\n      }]\n    }],\n    treeNodeFullTemplate: [{\n      type: ContentChild,\n      args: ['treeNodeFullTemplate', {\n        static: false\n      }]\n    }],\n    viewportComponent: [{\n      type: ViewChild,\n      args: ['viewport', {\n        static: false\n      }]\n    }],\n    toggleExpanded: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    nodeActivate: [{\n      type: Output\n    }],\n    nodeDeactivate: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    deselect: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    updateData: [{\n      type: Output\n    }],\n    initialized: [{\n      type: Output\n    }],\n    moveNode: [{\n      type: Output\n    }],\n    copyNode: [{\n      type: Output\n    }],\n    loadNodeChildren: [{\n      type: Output\n    }],\n    changeFilter: [{\n      type: Output\n    }],\n    event: [{\n      type: Output\n    }],\n    stateChange: [{\n      type: Output\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'TreeNode, tree-node',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div\\n        *ngIf=\\\"!templates.treeNodeFullTemplate\\\"\\n        [class]=\\\"node.getClass()\\\"\\n        [class.tree-node]=\\\"true\\\"\\n        [class.tree-node-expanded]=\\\"node.isExpanded && node.hasChildren\\\"\\n        [class.tree-node-collapsed]=\\\"node.isCollapsed && node.hasChildren\\\"\\n        [class.tree-node-leaf]=\\\"node.isLeaf\\\"\\n        [class.tree-node-active]=\\\"node.isActive\\\"\\n        [class.tree-node-focused]=\\\"node.isFocused\\\"\\n      >\\n        <tree-node-drop-slot\\n          *ngIf=\\\"index === 0\\\"\\n          [dropIndex]=\\\"node.index\\\"\\n          [node]=\\\"node.parent\\\"\\n        ></tree-node-drop-slot>\\n\\n        <tree-node-wrapper\\n          [node]=\\\"node\\\"\\n          [index]=\\\"index\\\"\\n          [templates]=\\\"templates\\\"\\n        ></tree-node-wrapper>\\n\\n        <tree-node-children\\n          [node]=\\\"node\\\"\\n          [templates]=\\\"templates\\\"\\n        ></tree-node-children>\\n        <tree-node-drop-slot\\n          [dropIndex]=\\\"node.index + 1\\\"\\n          [node]=\\\"node.parent\\\"\\n        ></tree-node-drop-slot>\\n      </div>\\n      <ng-container\\n        [ngTemplateOutlet]=\\\"templates.treeNodeFullTemplate\\\"\\n        [ngTemplateOutletContext]=\\\"{\\n          $implicit: node,\\n          node: node,\\n          index: index,\\n          templates: templates\\n        }\\\"\\n      >\\n      </ng-container>\\n    </ng-container>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeContent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-content',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n  <span *ngIf=\\\"!template\\\">{{ node.displayField }}</span>\\n  <ng-container\\n    [ngTemplateOutlet]=\\\"template\\\"\\n    [ngTemplateOutletContext]=\\\"{ $implicit: node, node: node, index: index }\\\">\\n  </ng-container>\"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeDropSlot, [{\n    type: Component,\n    args: [{\n      selector: 'TreeNodeDropSlot, tree-node-drop-slot',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <div\\n      class=\\\"node-drop-slot\\\"\\n      (treeDrop)=\\\"onDrop($event)\\\"\\n      [treeAllowDrop]=\\\"allowDrop.bind(this)\\\"\\n      [allowDragoverStyling]=\\\"true\\\">\\n    </div>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    dropIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeExpanderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-expander',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <span\\n        *ngIf=\\\"node.hasChildren\\\"\\n        [class.toggle-children-wrapper-expanded]=\\\"node.isExpanded\\\"\\n        [class.toggle-children-wrapper-collapsed]=\\\"node.isCollapsed\\\"\\n        class=\\\"toggle-children-wrapper\\\"\\n        (click)=\\\"node.mouseAction('expanderClick', $event)\\\"\\n      >\\n        <span class=\\\"toggle-children\\\"></span>\\n      </span>\\n      <span *ngIf=\\\"!node.hasChildren\\\" class=\\\"toggle-children-placeholder\\\">\\n      </span>\\n    </ng-container>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeChildrenComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-children',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div\\n        [class.tree-children]=\\\"true\\\"\\n        [class.tree-children-no-padding]=\\\"node.options.levelPadding\\\"\\n        *treeAnimateOpen=\\\"\\n          node.isExpanded;\\n          speed: node.options.animateSpeed;\\n          acceleration: node.options.animateAcceleration;\\n          enabled: node.options.animateExpand\\n        \\\"\\n      >\\n        <tree-node-collection\\n          *ngIf=\\\"node.children\\\"\\n          [nodes]=\\\"node.children\\\"\\n          [templates]=\\\"templates\\\"\\n          [treeModel]=\\\"node.treeModel\\\"\\n        >\\n        </tree-node-collection>\\n        <tree-loading-component\\n          [style.padding-left]=\\\"node.getNodePadding()\\\"\\n          class=\\\"tree-node-loading\\\"\\n          *ngIf=\\\"!node.children\\\"\\n          [template]=\\\"templates.loadingTemplate\\\"\\n          [node]=\\\"node\\\"\\n        ></tree-loading-component>\\n      </div>\\n    </ng-container>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-collection',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <div [style.margin-top]=\\\"marginTop\\\">\\n        <tree-node\\n          *ngFor=\\\"let node of viewportNodes; let i = index; trackBy: trackNode\\\"\\n          [node]=\\\"node\\\"\\n          [index]=\\\"i\\\"\\n          [templates]=\\\"templates\\\"\\n        >\\n        </tree-node>\\n      </div>\\n    </ng-container>\\n  \"\n    }]\n  }], function () {\n    return [];\n  }, {\n    nodes: [{\n      type: Input\n    }],\n    treeModel: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeNodeWrapperComponent = function TreeNodeWrapperComponent() {\n  _classCallCheck(this, TreeNodeWrapperComponent);\n};\n\nTreeNodeWrapperComponent.ɵfac = function TreeNodeWrapperComponent_Factory(t) {\n  return new (t || TreeNodeWrapperComponent)();\n};\n\nTreeNodeWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeWrapperComponent,\n  selectors: [[\"tree-node-wrapper\"]],\n  inputs: {\n    node: \"node\",\n    index: \"index\",\n    templates: \"templates\"\n  },\n  decls: 2,\n  vars: 8,\n  consts: [[\"class\", \"node-wrapper\", 3, \"padding-left\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"node-wrapper\"], [3, \"node\", 4, \"ngIf\"], [3, \"node\"], [1, \"node-content-wrapper\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrag\", \"treeDragEnabled\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"contextmenu\", \"treeDrop\", \"treeDropDragOver\", \"treeDropDragLeave\", \"treeDropDragEnter\"], [3, \"node\", \"index\", \"template\"]],\n  template: function TreeNodeWrapperComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeWrapperComponent_div_0_Template, 5, 15, \"div\", 0);\n      ɵngcc0.ɵɵelementContainer(1, 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.templates.treeNodeWrapperTemplate);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.templates.treeNodeWrapperTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction4(3, _c9, ctx.node, ctx.node, ctx.index, ctx.templates));\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, TreeNodeExpanderComponent, TreeDragDirective, TreeDropDirective, TreeNodeContent, TreeNodeCheckboxComponent];\n  },\n  encapsulation: 2\n});\nTreeNodeWrapperComponent.propDecorators = {\n  node: [{\n    type: Input\n  }],\n  index: [{\n    type: Input\n  }],\n  templates: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-wrapper',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n      <div *ngIf=\\\"!templates.treeNodeWrapperTemplate\\\" class=\\\"node-wrapper\\\" [style.padding-left]=\\\"node.getNodePadding()\\\">\\n          <tree-node-checkbox *ngIf=\\\"node.options.useCheckbox\\\" [node]=\\\"node\\\"></tree-node-checkbox>\\n          <tree-node-expander [node]=\\\"node\\\"></tree-node-expander>\\n          <div class=\\\"node-content-wrapper\\\"\\n               [class.node-content-wrapper-active]=\\\"node.isActive\\\"\\n               [class.node-content-wrapper-focused]=\\\"node.isFocused\\\"\\n               (click)=\\\"node.mouseAction('click', $event)\\\"\\n               (dblclick)=\\\"node.mouseAction('dblClick', $event)\\\"\\n               (mouseover)=\\\"node.mouseAction('mouseOver', $event)\\\"\\n               (mouseout)=\\\"node.mouseAction('mouseOut', $event)\\\"\\n               (contextmenu)=\\\"node.mouseAction('contextMenu', $event)\\\"\\n               (treeDrop)=\\\"node.onDrop($event)\\\"\\n               (treeDropDragOver)=\\\"node.mouseAction('dragOver', $event)\\\"\\n               (treeDropDragLeave)=\\\"node.mouseAction('dragLeave', $event)\\\"\\n               (treeDropDragEnter)=\\\"node.mouseAction('dragEnter', $event)\\\"\\n               [treeAllowDrop]=\\\"node.allowDrop\\\"\\n               [allowDragoverStyling]=\\\"node.allowDragoverStyling()\\\"\\n               [treeDrag]=\\\"node\\\"\\n               [treeDragEnabled]=\\\"node.allowDrag()\\\">\\n\\n              <tree-node-content [node]=\\\"node\\\" [index]=\\\"index\\\" [template]=\\\"templates.treeNodeTemplate\\\">\\n              </tree-node-content>\\n          </div>\\n      </div>\\n      <ng-container\\n              [ngTemplateOutlet]=\\\"templates.treeNodeWrapperTemplate\\\"\\n              [ngTemplateOutletContext]=\\\"{ $implicit: node, node: node, index: index, templates: templates }\\\">\\n      </ng-container>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }],\n    index: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TreeNodeCheckboxComponent = function TreeNodeCheckboxComponent() {\n  _classCallCheck(this, TreeNodeCheckboxComponent);\n};\n\nTreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) {\n  return new (t || TreeNodeCheckboxComponent)();\n};\n\nTreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TreeNodeCheckboxComponent,\n  selectors: [[\"tree-node-checkbox\"]],\n  inputs: {\n    node: \"node\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"treeMobxAutorun\"], [\"type\", \"checkbox\", 1, \"tree-node-checkbox\", 3, \"checked\", \"indeterminate\", \"click\"]],\n  template: function TreeNodeCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"treeMobxAutorun\", ɵngcc0.ɵɵpureFunction0(1, _c1));\n    }\n  },\n  directives: [TreeMobxAutorunDirective],\n  encapsulation: 2\n});\nTreeNodeCheckboxComponent.propDecorators = {\n  node: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-node-checkbox',\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <ng-container *treeMobxAutorun=\\\"{ dontDetach: true }\\\">\\n      <input\\n        class=\\\"tree-node-checkbox\\\"\\n        type=\\\"checkbox\\\"\\n        (click)=\\\"node.mouseAction('checkboxClick', $event)\\\"\\n        [checked]=\\\"node.isSelected\\\"\\n        [indeterminate]=\\\"node.isPartiallySelected\\\"\\n      />\\n    </ng-container>\\n  \"\n    }]\n  }], null, {\n    node: [{\n      type: Input\n    }]\n  });\n})();\n\nvar DRAG_OVER_CLASS = 'is-dragging-over';\nvar DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\n\nvar TreeDropDirective = /*#__PURE__*/function () {\n  function TreeDropDirective(el, renderer, treeDraggedElement, ngZone) {\n    _classCallCheck(this, TreeDropDirective);\n\n    this.el = el;\n    this.renderer = renderer;\n    this.treeDraggedElement = treeDraggedElement;\n    this.ngZone = ngZone;\n    this.allowDragoverStyling = true;\n    this.onDropCallback = new EventEmitter();\n    this.onDragOverCallback = new EventEmitter();\n    this.onDragLeaveCallback = new EventEmitter();\n    this.onDragEnterCallback = new EventEmitter();\n\n    this._allowDrop = function (element, $event) {\n      return true;\n    };\n\n    this.dragOverEventHandler = this.onDragOver.bind(this);\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\n  }\n\n  _createClass(TreeDropDirective, [{\n    key: \"treeAllowDrop\",\n    set: function set(allowDrop) {\n      if (allowDrop instanceof Function) {\n        this._allowDrop = allowDrop;\n      } else this._allowDrop = function (element, $event) {\n        return allowDrop;\n      };\n    }\n  }, {\n    key: \"allowDrop\",\n    value: function allowDrop($event) {\n      return this._allowDrop(this.treeDraggedElement.get(), $event);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this23 = this;\n\n      var el = this.el.nativeElement;\n      this.ngZone.runOutsideAngular(function () {\n        el.addEventListener('dragover', _this23.dragOverEventHandler);\n        el.addEventListener('dragenter', _this23.dragEnterEventHandler);\n        el.addEventListener('dragleave', _this23.dragLeaveEventHandler);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var el = this.el.nativeElement;\n      el.removeEventListener('dragover', this.dragOverEventHandler);\n      el.removeEventListener('dragenter', this.dragEnterEventHandler);\n      el.removeEventListener('dragleave', this.dragLeaveEventHandler);\n    }\n  }, {\n    key: \"onDragOver\",\n    value: function onDragOver($event) {\n      if (!this.allowDrop($event)) {\n        if (this.allowDragoverStyling) {\n          return this.addDisabledClass();\n        }\n\n        return;\n      }\n\n      this.onDragOverCallback.emit({\n        event: $event,\n        element: this.treeDraggedElement.get()\n      });\n      $event.preventDefault();\n\n      if (this.allowDragoverStyling) {\n        this.addClass();\n      }\n    }\n  }, {\n    key: \"onDragEnter\",\n    value: function onDragEnter($event) {\n      if (!this.allowDrop($event)) return;\n      $event.preventDefault();\n      this.onDragEnterCallback.emit({\n        event: $event,\n        element: this.treeDraggedElement.get()\n      });\n    }\n  }, {\n    key: \"onDragLeave\",\n    value: function onDragLeave($event) {\n      if (!this.allowDrop($event)) {\n        if (this.allowDragoverStyling) {\n          return this.removeDisabledClass();\n        }\n\n        return;\n      }\n\n      this.onDragLeaveCallback.emit({\n        event: $event,\n        element: this.treeDraggedElement.get()\n      });\n\n      if (this.allowDragoverStyling) {\n        this.removeClass();\n      }\n    }\n  }, {\n    key: \"onDrop\",\n    value: function onDrop($event) {\n      if (!this.allowDrop($event)) return;\n      $event.preventDefault();\n      this.onDropCallback.emit({\n        event: $event,\n        element: this.treeDraggedElement.get()\n      });\n\n      if (this.allowDragoverStyling) {\n        this.removeClass();\n      }\n\n      this.treeDraggedElement.set(null);\n    }\n  }, {\n    key: \"addClass\",\n    value: function addClass() {\n      this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\n    }\n  }, {\n    key: \"removeClass\",\n    value: function removeClass() {\n      this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\n    }\n  }, {\n    key: \"addDisabledClass\",\n    value: function addDisabledClass() {\n      this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n    }\n  }, {\n    key: \"removeDisabledClass\",\n    value: function removeDisabledClass() {\n      this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\n    }\n  }]);\n\n  return TreeDropDirective;\n}();\n\nTreeDropDirective.ɵfac = function TreeDropDirective_Factory(t) {\n  return new (t || TreeDropDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTreeDropDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TreeDropDirective,\n  selectors: [[\"\", \"treeDrop\", \"\"]],\n  hostBindings: function TreeDropDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"drop\", function TreeDropDirective_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n  },\n  inputs: {\n    allowDragoverStyling: \"allowDragoverStyling\",\n    treeAllowDrop: \"treeAllowDrop\"\n  },\n  outputs: {\n    onDropCallback: \"treeDrop\",\n    onDragOverCallback: \"treeDropDragOver\",\n    onDragLeaveCallback: \"treeDropDragLeave\",\n    onDragEnterCallback: \"treeDropDragEnter\"\n  }\n});\n/** @nocollapse */\n\nTreeDropDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: TreeDraggedElement\n  }, {\n    type: NgZone\n  }];\n};\n\nTreeDropDirective.propDecorators = {\n  allowDragoverStyling: [{\n    type: Input\n  }],\n  onDropCallback: [{\n    type: Output,\n    args: ['treeDrop']\n  }],\n  onDragOverCallback: [{\n    type: Output,\n    args: ['treeDropDragOver']\n  }],\n  onDragLeaveCallback: [{\n    type: Output,\n    args: ['treeDropDragLeave']\n  }],\n  onDragEnterCallback: [{\n    type: Output,\n    args: ['treeDropDragEnter']\n  }],\n  treeAllowDrop: [{\n    type: Input\n  }],\n  onDrop: [{\n    type: HostListener,\n    args: ['drop', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDropDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[treeDrop]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: TreeDraggedElement\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    allowDragoverStyling: [{\n      type: Input\n    }],\n    onDropCallback: [{\n      type: Output,\n      args: ['treeDrop']\n    }],\n    onDragOverCallback: [{\n      type: Output,\n      args: ['treeDropDragOver']\n    }],\n    onDragLeaveCallback: [{\n      type: Output,\n      args: ['treeDropDragLeave']\n    }],\n    onDragEnterCallback: [{\n      type: Output,\n      args: ['treeDropDragEnter']\n    }],\n    treeAllowDrop: [{\n      type: Input\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\n\nvar DRAG_OVER_CLASS$1 = 'is-dragging-over';\n\nvar TreeDragDirective = /*#__PURE__*/function () {\n  function TreeDragDirective(el, renderer, treeDraggedElement, ngZone) {\n    _classCallCheck(this, TreeDragDirective);\n\n    this.el = el;\n    this.renderer = renderer;\n    this.treeDraggedElement = treeDraggedElement;\n    this.ngZone = ngZone;\n    this.dragEventHandler = this.onDrag.bind(this);\n  }\n\n  _createClass(TreeDragDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this24 = this;\n\n      var el = this.el.nativeElement;\n      this.ngZone.runOutsideAngular(function () {\n        el.addEventListener('drag', _this24.dragEventHandler);\n      });\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var el = this.el.nativeElement;\n      el.removeEventListener('drag', this.dragEventHandler);\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(ev) {\n      // setting the data is required by firefox\n      ev.dataTransfer.setData('text', ev.target.id);\n      this.treeDraggedElement.set(this.draggedElement);\n\n      if (this.draggedElement.mouseAction) {\n        this.draggedElement.mouseAction('dragStart', ev);\n      }\n    }\n  }, {\n    key: \"onDrag\",\n    value: function onDrag(ev) {\n      if (this.draggedElement.mouseAction) {\n        this.draggedElement.mouseAction('drag', ev);\n      }\n    }\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd() {\n      if (this.draggedElement.mouseAction) {\n        this.draggedElement.mouseAction('dragEnd');\n      }\n\n      this.treeDraggedElement.set(null);\n    }\n  }]);\n\n  return TreeDragDirective;\n}();\n\nTreeDragDirective.ɵfac = function TreeDragDirective_Factory(t) {\n  return new (t || TreeDragDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(TreeDraggedElement), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nTreeDragDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TreeDragDirective,\n  selectors: [[\"\", \"treeDrag\", \"\"]],\n  hostBindings: function TreeDragDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"dragstart\", function TreeDragDirective_dragstart_HostBindingHandler($event) {\n        return ctx.onDragStart($event);\n      })(\"dragend\", function TreeDragDirective_dragend_HostBindingHandler() {\n        return ctx.onDragEnd();\n      });\n    }\n  },\n  inputs: {\n    draggedElement: [\"treeDrag\", \"draggedElement\"],\n    treeDragEnabled: \"treeDragEnabled\"\n  }\n});\n/** @nocollapse */\n\nTreeDragDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: TreeDraggedElement\n  }, {\n    type: NgZone\n  }];\n};\n\nTreeDragDirective.propDecorators = {\n  draggedElement: [{\n    type: Input,\n    args: ['treeDrag']\n  }],\n  treeDragEnabled: [{\n    type: Input\n  }],\n  onDragStart: [{\n    type: HostListener,\n    args: ['dragstart', ['$event']]\n  }],\n  onDragEnd: [{\n    type: HostListener,\n    args: ['dragend']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeDragDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[treeDrag]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: TreeDraggedElement\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    onDragStart: [{\n      type: HostListener,\n      args: ['dragstart', ['$event']]\n    }],\n    onDragEnd: [{\n      type: HostListener,\n      args: ['dragend']\n    }],\n    draggedElement: [{\n      type: Input,\n      args: ['treeDrag']\n    }],\n    treeDragEnabled: [{\n      type: Input\n    }]\n  });\n})();\n\nvar EASE_ACCELERATION = 1.005;\n\nvar TreeAnimateOpenDirective = /*#__PURE__*/function () {\n  function TreeAnimateOpenDirective(renderer, templateRef, viewContainerRef) {\n    _classCallCheck(this, TreeAnimateOpenDirective);\n\n    this.renderer = renderer;\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n  }\n\n  _createClass(TreeAnimateOpenDirective, [{\n    key: \"isOpen\",\n    set: function set(value) {\n      if (value) {\n        this._show();\n\n        if (this.isEnabled && this._isOpen === false) {\n          this._animateOpen();\n        }\n      } else {\n        this.isEnabled ? this._animateClose() : this._hide();\n      }\n\n      this._isOpen = !!value;\n    }\n  }, {\n    key: \"_show\",\n    value: function _show() {\n      if (this.innerElement) return; // create child view\n\n      this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\n    }\n  }, {\n    key: \"_hide\",\n    value: function _hide() {\n      this.viewContainerRef.clear();\n      this.innerElement = null;\n    }\n  }, {\n    key: \"_animateOpen\",\n    value: function _animateOpen() {\n      var _this25 = this;\n\n      var delta = this.animateSpeed;\n      var ease = this.animateAcceleration;\n      var maxHeight = 0; // set height to 0\n\n      this.renderer.setStyle(this.innerElement, 'max-height', \"0\"); // increase maxHeight until height doesn't change\n\n      setTimeout(function () {\n        var i = setInterval(function () {\n          if (!_this25._isOpen || !_this25.innerElement) return clearInterval(i);\n          maxHeight += delta;\n          var roundedMaxHeight = Math.round(maxHeight);\n\n          _this25.renderer.setStyle(_this25.innerElement, 'max-height', \"\".concat(roundedMaxHeight, \"px\"));\n\n          var height = _this25.innerElement.getBoundingClientRect ? _this25.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\n\n          delta *= ease;\n          ease *= EASE_ACCELERATION;\n\n          if (height < roundedMaxHeight) {\n            // Make maxHeight auto because animation finished and container might change height later on\n            _this25.renderer.setStyle(_this25.innerElement, 'max-height', null);\n\n            clearInterval(i);\n          }\n        }, 17);\n      });\n    }\n  }, {\n    key: \"_animateClose\",\n    value: function _animateClose() {\n      var _this26 = this;\n\n      if (!this.innerElement) return;\n      var delta = this.animateSpeed;\n      var ease = this.animateAcceleration;\n      var height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\n      // slowly decrease maxHeight to 0, starting from current height\n\n      var i = setInterval(function () {\n        if (_this26._isOpen || !_this26.innerElement) return clearInterval(i);\n        height -= delta;\n\n        _this26.renderer.setStyle(_this26.innerElement, 'max-height', \"\".concat(height, \"px\"));\n\n        delta *= ease;\n        ease *= EASE_ACCELERATION;\n\n        if (height <= 0) {\n          // after animation complete - remove child element\n          _this26.viewContainerRef.clear();\n\n          _this26.innerElement = null;\n          clearInterval(i);\n        }\n      }, 17);\n    }\n  }]);\n\n  return TreeAnimateOpenDirective;\n}();\n\nTreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) {\n  return new (t || TreeAnimateOpenDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nTreeAnimateOpenDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TreeAnimateOpenDirective,\n  selectors: [[\"\", \"treeAnimateOpen\", \"\"]],\n  inputs: {\n    isOpen: [\"treeAnimateOpen\", \"isOpen\"],\n    animateSpeed: [\"treeAnimateOpenSpeed\", \"animateSpeed\"],\n    animateAcceleration: [\"treeAnimateOpenAcceleration\", \"animateAcceleration\"],\n    isEnabled: [\"treeAnimateOpenEnabled\", \"isEnabled\"]\n  }\n});\n/** @nocollapse */\n\nTreeAnimateOpenDirective.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }, {\n    type: TemplateRef\n  }, {\n    type: ViewContainerRef\n  }];\n};\n\nTreeAnimateOpenDirective.propDecorators = {\n  animateSpeed: [{\n    type: Input,\n    args: ['treeAnimateOpenSpeed']\n  }],\n  animateAcceleration: [{\n    type: Input,\n    args: ['treeAnimateOpenAcceleration']\n  }],\n  isEnabled: [{\n    type: Input,\n    args: ['treeAnimateOpenEnabled']\n  }],\n  isOpen: [{\n    type: Input,\n    args: ['treeAnimateOpen']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[treeAnimateOpen]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, {\n    isOpen: [{\n      type: Input,\n      args: ['treeAnimateOpen']\n    }],\n    animateSpeed: [{\n      type: Input,\n      args: ['treeAnimateOpenSpeed']\n    }],\n    animateAcceleration: [{\n      type: Input,\n      args: ['treeAnimateOpenAcceleration']\n    }],\n    isEnabled: [{\n      type: Input,\n      args: ['treeAnimateOpenEnabled']\n    }]\n  });\n})();\n\nvar TreeModule = function TreeModule() {\n  _classCallCheck(this, TreeModule);\n};\n\nTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TreeModule\n});\nTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TreeModule_Factory(t) {\n    return new (t || TreeModule)();\n  },\n  providers: [],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeModule, {\n    declarations: function declarations() {\n      return [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective],\n      exports: [TreeComponent, TreeNodeComponent, TreeNodeContent, LoadingComponent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent, TreeNodeWrapperComponent, TreeNodeCheckboxComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective],\n      imports: [CommonModule],\n      providers: []\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of angular-tree-component\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { KEYS, LoadingComponent, TREE_ACTIONS, TreeAnimateOpenDirective, TreeComponent, TreeDragDirective, TreeDraggedElement, TreeDropDirective, TreeModel, TreeModule, TreeNode, TreeNodeCheckboxComponent, TreeNodeChildrenComponent, TreeNodeCollectionComponent, TreeNodeComponent, TreeNodeContent, TreeNodeDropSlot, TreeNodeExpanderComponent, TreeNodeWrapperComponent, TreeViewportComponent, TreeVirtualScroll, actionInternal as ɵa, action as ɵb, computed as ɵc, observable as ɵd, TreeMobxAutorunDirective as ɵe };","map":{"version":3,"sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts","../../../projects/angular-tree-component/src/public-api.ts","../../../projects/angular-tree-component/src/circlon-angular-tree-component.ts"],"names":["computed","observable","action","__decorate","mobxAction","mobxComputed","mobxObservable","DRAG_OVER_CLASS"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = {\r\n      mouse: {\r\n        click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n        dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n        contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n        expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n        checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n        drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n        dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n        drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n        dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n        dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n        dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n        dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n        mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n        mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n      },\r\n      keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n      }\r\n    }\r\n\r\n    if (this.options?.actionMapping?.keys) {\r\n      this.actionMapping.keys = {\r\n        ...this.actionMapping.keys,\r\n        ...this.options.actionMapping.keys\r\n      }\r\n    }\r\n\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    // remove id from clone\r\n    // keeping ie11 compatibility\r\n    const nodeClone = Object.assign({}, node.data);\r\n    if (nodeClone.id) {\r\n      delete nodeClone.id;\r\n    }\r\n    return nodeClone;\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.some((node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.every((node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[0] : null;\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[children.length - 1] : null;\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[0] : null;\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[root.length - 1] : null;\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = startNode.children.find(c => c.id === childId);\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = startNode.children.find(predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (filter && typeof filter.valueOf() === 'string') {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (filter && typeof filter === 'function') {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n  NgZone\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = this.throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private ngZone: NgZone,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('scroll', this.scrollEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n\r\n  private throttle(func, timeFrame) {\r\n    let lastTime = 0;\r\n    return function () {\r\n      let now = Date.now();\r\n      if (now - lastTime >= timeFrame) {\r\n        func();\r\n        lastTime = now;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: this.pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n\r\n  private pick(object, keys) {\r\n    return keys.reduce((obj, key) => {\r\n      if (object && object.hasOwnProperty(key)) {\r\n        obj[key] = object[key];\r\n      }\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component , Input , ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n","/*\r\n * Public API Surface of angular-tree-component\r\n */\r\n\r\nexport * from './lib/angular-tree-component.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {action as ɵb,actionInternal as ɵa,computed as ɵc,observable as ɵd} from './lib/mobx-angular/mobx-proxy';\nexport {TreeMobxAutorunDirective as ɵe} from './lib/mobx-angular/tree-mobx-autorun.directive';"]},"metadata":{},"sourceType":"module"}