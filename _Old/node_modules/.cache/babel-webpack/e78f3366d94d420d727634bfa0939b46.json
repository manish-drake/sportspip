{"ast":null,"code":"import { Observable } from 'rxjs'; // Replaces use of RxJS delay. See v0.5.4.\n\n/** adds specified delay (in ms) to both next and error channels of the response observable */\n\nexport function delayResponse(response$, delayMs) {\n  return new Observable(function (observer) {\n    var completePending = false;\n    var nextPending = false;\n    var subscription = response$.subscribe(function (value) {\n      nextPending = true;\n      setTimeout(function () {\n        observer.next(value);\n\n        if (completePending) {\n          observer.complete();\n        }\n      }, delayMs);\n    }, function (error) {\n      return setTimeout(function () {\n        return observer.error(error);\n      }, delayMs);\n    }, function () {\n      completePending = true;\n\n      if (!nextPending) {\n        observer.complete();\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  });\n}","map":{"version":3,"sources":["delay-response.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,MAA3B,C,CAEA;;AACA;;AACA,OAAM,SAAU,aAAV,CAA2B,SAA3B,EAAqD,OAArD,EAAoE;AACxE,SAAO,IAAI,UAAJ,CAAkB,UAAA,QAAA,EAAQ;AAC/B,QAAI,eAAe,GAAG,KAAtB;AACA,QAAI,WAAW,GAAG,KAAlB;AACA,QAAM,YAAY,GAAG,SAAS,CAAC,SAAV,CACnB,UAAA,KAAA,EAAK;AACD,MAAA,WAAW,GAAG,IAAd;AACA,MAAA,UAAU,CAAC,YAAA;AACX,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;;AACA,YAAI,eAAJ,EAAqB;AACnB,UAAA,QAAQ,CAAC,QAAT;AACD;AACF,OALW,EAKT,OALS,CAAV;AAMH,KATkB,EAUnB,UAAA,KAAA,EAAK;AAAI,aAAA,UAAU,CAAC,YAAA;AAAM,eAAA,QAAQ,CAAC,KAAT,CAAA,KAAA,CAAA;AAAqB,OAA5B,EAAV,OAAU,CAAV;AAAgD,KAVtC,EAWnB,YAAA;AACE,MAAA,eAAe,GAAG,IAAlB;;AACA,UAAI,CAAC,WAAL,EAAkB;AAChB,QAAA,QAAQ,CAAC,QAAT;AACD;AACF,KAhBkB,CAArB;AAkBA,WAAO,YAAA;AACL,aAAO,YAAY,CAAC,WAAb,EAAP;AACD,KAFD;AAGD,GAxBM,CAAP;AAyBD","sourcesContent":["import { Observable } from 'rxjs';\n\n// Replaces use of RxJS delay. See v0.5.4.\n/** adds specified delay (in ms) to both next and error channels of the response observable */\nexport function delayResponse<T>(response$: Observable<T>, delayMs: number): Observable<T> {\n  return new Observable<T>(observer => {\n    let completePending = false;\n    let nextPending = false;\n    const subscription = response$.subscribe(\n      value => {\n          nextPending = true;\n          setTimeout(() => {\n          observer.next(value);\n          if (completePending) {\n            observer.complete();\n          }\n        }, delayMs);\n      },\n      error => setTimeout(() => observer.error(error), delayMs),\n      () => {\n        completePending = true;\n        if (!nextPending) {\n          observer.complete();\n        }\n      }\n    );\n    return () => {\n      return subscription.unsubscribe();\n    };\n  });\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}