{"ast":null,"code":"import _inherits from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:/git/sportspip/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, EventEmitter, SecurityContext, Directive, ElementRef, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nvar _c1 = [\"[quill-editor-toolbar]\"];\nvar defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }], [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], [{\n    direction: 'rtl'\n  }], [{\n    size: ['small', false, 'large', 'huge']\n  }], [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }], [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'], ['link', 'image', 'video'] // link and image, video\n  ]\n};\n\nvar getFormat = function getFormat(format, configFormat) {\n  var passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar QUILL_CONFIG_TOKEN = new InjectionToken('config');\n\nvar QuillService = /*#__PURE__*/function () {\n  function QuillService(config) {\n    _classCallCheck(this, QuillService);\n\n    this.config = config;\n    this.count = 0;\n\n    if (!this.config) {\n      this.config = {\n        modules: defaultModules\n      };\n    }\n  }\n\n  _createClass(QuillService, [{\n    key: \"getQuill\",\n    value: function getQuill() {\n      var _this = this;\n\n      this.count++;\n\n      if (!this.Quill && this.count === 1) {\n        this.$importPromise = new Promise(function (resolve) {\n          return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var _this2 = this;\n\n            var _a, _b, quillImport;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return import('quill');\n\n                  case 2:\n                    quillImport = _context.sent;\n                    this.Quill = quillImport.default ? quillImport.default : quillImport; // Only register custom options and modules once\n\n                    (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach(function (customOption) {\n                      var newCustomOption = _this2.Quill.import(customOption.import);\n\n                      newCustomOption.whitelist = customOption.whitelist;\n\n                      _this2.Quill.register(newCustomOption, true, _this2.config.suppressGlobalRegisterWarning);\n                    });\n                    (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(function (_ref) {\n                      var implementation = _ref.implementation,\n                          path = _ref.path;\n\n                      _this2.Quill.register(path, implementation, _this2.config.suppressGlobalRegisterWarning);\n                    });\n                    resolve(this.Quill);\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n\n      return this.$importPromise;\n    }\n  }]);\n\n  return QuillService;\n}();\n\nQuillService.ɵfac = function QuillService_Factory(t) {\n  return new (t || QuillService)(ɵngcc0.ɵɵinject(QUILL_CONFIG_TOKEN));\n};\n\nQuillService.ɵprov = ɵɵdefineInjectable({\n  factory: function QuillService_Factory() {\n    return new QuillService(ɵɵinject(QUILL_CONFIG_TOKEN));\n  },\n  token: QuillService,\n  providedIn: \"root\"\n});\n\nQuillService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [QUILL_CONFIG_TOKEN]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [QUILL_CONFIG_TOKEN]\n      }]\n    }];\n  }, null);\n})(); // eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nvar QuillEditorBase = /*#__PURE__*/function () {\n  function QuillEditorBase(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\n    var _this3 = this;\n\n    _classCallCheck(this, QuillEditorBase);\n\n    this.elementRef = elementRef;\n    this.domSanitizer = domSanitizer;\n    this.doc = doc;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.zone = zone;\n    this.service = service;\n    this.required = false;\n    this.customToolbarPosition = 'top';\n    this.sanitize = false;\n    this.styles = null;\n    this.strict = true;\n    this.customOptions = [];\n    this.customModules = [];\n    this.preserveWhitespace = false;\n    this.trimOnValidation = false;\n    this.compareValues = false;\n    this.filterNull = false;\n    this.onEditorCreated = new EventEmitter();\n    this.onEditorChanged = new EventEmitter();\n    this.onContentChanged = new EventEmitter();\n    this.onSelectionChanged = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.disabled = false; // used to store initial value before ViewInit\n\n    this.valueGetter = function (quillEditor, editorElement) {\n      var html = editorElement.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      var modelValue = html;\n      var format = getFormat(_this3.format, _this3.service.config.format);\n\n      if (format === 'text') {\n        modelValue = quillEditor.getText();\n      } else if (format === 'object') {\n        modelValue = quillEditor.getContents();\n      } else if (format === 'json') {\n        try {\n          modelValue = JSON.stringify(quillEditor.getContents());\n        } catch (e) {\n          modelValue = quillEditor.getText();\n        }\n      }\n\n      return modelValue;\n    };\n\n    this.valueSetter = function (quillEditor, value) {\n      var format = getFormat(_this3.format, _this3.service.config.format);\n\n      if (format === 'html') {\n        if (_this3.sanitize) {\n          value = _this3.domSanitizer.sanitize(SecurityContext.HTML, value);\n        }\n\n        return quillEditor.clipboard.convert(value);\n      } else if (format === 'json') {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return [{\n            insert: value\n          }];\n        }\n      }\n\n      return value;\n    };\n\n    this.selectionChangeHandler = function (range, oldRange, source) {\n      var shouldTriggerOnModelTouched = !range && !!_this3.onModelTouched; // only emit changes when there's any listener\n\n      if (!_this3.onBlur.observers.length && !_this3.onFocus.observers.length && !_this3.onSelectionChanged.observers.length && !shouldTriggerOnModelTouched) {\n        return;\n      }\n\n      _this3.zone.run(function () {\n        if (range === null) {\n          _this3.onBlur.emit({\n            editor: _this3.quillEditor,\n            source: source\n          });\n        } else if (oldRange === null) {\n          _this3.onFocus.emit({\n            editor: _this3.quillEditor,\n            source: source\n          });\n        }\n\n        _this3.onSelectionChanged.emit({\n          editor: _this3.quillEditor,\n          oldRange: oldRange,\n          range: range,\n          source: source\n        });\n\n        if (shouldTriggerOnModelTouched) {\n          _this3.onModelTouched();\n        }\n      });\n    };\n\n    this.textChangeHandler = function (delta, oldDelta, source) {\n      // only emit changes emitted by user interactions\n      var text = _this3.quillEditor.getText();\n\n      var content = _this3.quillEditor.getContents();\n\n      var html = _this3.editorElem.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      var trackChanges = _this3.trackChanges || _this3.service.config.trackChanges;\n      var shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!_this3.onModelChange; // only emit changes when there's any listener\n\n      if (!_this3.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n        return;\n      }\n\n      _this3.zone.run(function () {\n        if (shouldTriggerOnModelChange) {\n          _this3.onModelChange(_this3.valueGetter(_this3.quillEditor, _this3.editorElem));\n        }\n\n        _this3.onContentChanged.emit({\n          content: content,\n          delta: delta,\n          editor: _this3.quillEditor,\n          html: html,\n          oldDelta: oldDelta,\n          source: source,\n          text: text\n        });\n      });\n    }; // eslint-disable-next-line max-len\n\n\n    this.editorChangeHandler = function (event, current, old, source) {\n      // only emit changes when there's any listener\n      if (!_this3.onEditorChanged.observers.length) {\n        return;\n      } // only emit changes emitted by user interactions\n\n\n      if (event === 'text-change') {\n        var text = _this3.quillEditor.getText();\n\n        var content = _this3.quillEditor.getContents();\n\n        var html = _this3.editorElem.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br></div>') {\n          html = null;\n        }\n\n        _this3.zone.run(function () {\n          _this3.onEditorChanged.emit({\n            content: content,\n            delta: current,\n            editor: _this3.quillEditor,\n            event: event,\n            html: html,\n            oldDelta: old,\n            source: source,\n            text: text\n          });\n        });\n      } else {\n        _this3.onEditorChanged.emit({\n          editor: _this3.quillEditor,\n          event: event,\n          oldRange: old,\n          range: current,\n          source: source\n        });\n      }\n    };\n  }\n\n  _createClass(QuillEditorBase, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this4 = this;\n\n        var Quill, toolbarElem, modules, placeholder, bounds, debug, readOnly, scrollingContainer, formats, format, newValue;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isPlatformServer(this.platformId)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.next = 4;\n                return this.service.getQuill();\n\n              case 4:\n                Quill = _context2.sent;\n                this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n                this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n                toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n                modules = Object.assign({}, this.modules || this.service.config.modules);\n\n                if (toolbarElem) {\n                  modules.toolbar = toolbarElem;\n                } else if (modules.toolbar === undefined) {\n                  modules.toolbar = defaultModules.toolbar;\n                }\n\n                placeholder = this.placeholder !== undefined ? this.placeholder : this.service.config.placeholder;\n\n                if (placeholder === undefined) {\n                  placeholder = 'Insert text here ...';\n                }\n\n                if (this.styles) {\n                  Object.keys(this.styles).forEach(function (key) {\n                    _this4.renderer.setStyle(_this4.editorElem, key, _this4.styles[key]);\n                  });\n                }\n\n                if (this.classes) {\n                  this.addClasses(this.classes);\n                }\n\n                this.customOptions.forEach(function (customOption) {\n                  var newCustomOption = Quill.import(customOption.import);\n                  newCustomOption.whitelist = customOption.whitelist;\n                  Quill.register(newCustomOption, true);\n                });\n                this.customModules.forEach(function (_ref2) {\n                  var implementation = _ref2.implementation,\n                      path = _ref2.path;\n                  Quill.register(path, implementation);\n                });\n                bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n\n                if (!bounds) {\n                  bounds = this.service.config.bounds ? this.service.config.bounds : this.doc.body;\n                }\n\n                debug = this.debug;\n\n                if (!debug && debug !== false && this.service.config.debug) {\n                  debug = this.service.config.debug;\n                }\n\n                readOnly = this.readOnly;\n\n                if (!readOnly && this.readOnly !== false) {\n                  readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;\n                }\n\n                scrollingContainer = this.scrollingContainer;\n\n                if (!scrollingContainer && this.scrollingContainer !== null) {\n                  scrollingContainer = this.service.config.scrollingContainer === null || this.service.config.scrollingContainer ? this.service.config.scrollingContainer : null;\n                }\n\n                formats = this.formats;\n\n                if (!formats && formats === undefined) {\n                  formats = this.service.config.formats ? _toConsumableArray(this.service.config.formats) : this.service.config.formats === null ? null : undefined;\n                }\n\n                this.zone.runOutsideAngular(function () {\n                  var _a, _b, _c;\n\n                  _this4.quillEditor = new Quill(_this4.editorElem, {\n                    bounds: bounds,\n                    debug: debug,\n                    formats: formats,\n                    modules: modules,\n                    placeholder: placeholder,\n                    readOnly: readOnly,\n                    scrollingContainer: scrollingContainer,\n                    strict: _this4.strict,\n                    theme: _this4.theme || (_this4.service.config.theme ? _this4.service.config.theme : 'snow')\n                  }); // Set optional link placeholder, Quill has no native API for it so using workaround\n\n                  if (_this4.linkPlaceholder) {\n                    var tooltip = (_b = (_a = _this4.quillEditor) === null || _a === void 0 ? void 0 : _a.theme) === null || _b === void 0 ? void 0 : _b.tooltip;\n                    var input = (_c = tooltip === null || tooltip === void 0 ? void 0 : tooltip.root) === null || _c === void 0 ? void 0 : _c.querySelector('input[data-link]');\n\n                    if (input === null || input === void 0 ? void 0 : input.dataset) {\n                      input.dataset.link = _this4.linkPlaceholder;\n                    }\n                  }\n                });\n\n                if (this.content) {\n                  format = getFormat(this.format, this.service.config.format);\n\n                  if (format === 'text') {\n                    this.quillEditor.setText(this.content, 'silent');\n                  } else {\n                    newValue = this.valueSetter(this.quillEditor, this.content);\n                    this.quillEditor.setContents(newValue, 'silent');\n                  }\n\n                  this.quillEditor.getModule('history').clear();\n                } // initialize disabled status based on this.disabled as default value\n\n\n                this.setDisabledState(); // triggered if selection or text changed\n\n                this.quillEditor.on('editor-change', this.editorChangeHandler); // mark model as touched if editor lost focus\n\n                this.quillEditor.on('selection-change', this.selectionChangeHandler); // update model if text changes\n\n                this.quillEditor.on('text-change', this.textChangeHandler); // trigger created in a timeout to avoid changed models after checked\n                // if you are using the editor api in created output to change the editor content\n\n                setTimeout(function () {\n                  if (_this4.onValidatorChanged) {\n                    _this4.onValidatorChanged();\n                  }\n\n                  _this4.onEditorCreated.emit(_this4.quillEditor);\n                });\n\n              case 33:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.quillEditor) {\n        this.quillEditor.off('selection-change', this.selectionChangeHandler);\n        this.quillEditor.off('text-change', this.textChangeHandler);\n        this.quillEditor.off('editor-change', this.editorChangeHandler);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this5 = this;\n\n      if (!this.quillEditor) {\n        return;\n      }\n      /* eslint-disable @typescript-eslint/dot-notation */\n\n\n      if (changes.readOnly) {\n        this.quillEditor.enable(!changes.readOnly.currentValue);\n      }\n\n      if (changes.placeholder) {\n        this.quillEditor.root.dataset.placeholder = changes.placeholder.currentValue;\n      }\n\n      if (changes.styles) {\n        var currentStyling = changes.styles.currentValue;\n        var previousStyling = changes.styles.previousValue;\n\n        if (previousStyling) {\n          Object.keys(previousStyling).forEach(function (key) {\n            _this5.renderer.removeStyle(_this5.editorElem, key);\n          });\n        }\n\n        if (currentStyling) {\n          Object.keys(currentStyling).forEach(function (key) {\n            _this5.renderer.setStyle(_this5.editorElem, key, _this5.styles[key]);\n          });\n        }\n      }\n\n      if (changes.classes) {\n        var currentClasses = changes.classes.currentValue;\n        var previousClasses = changes.classes.previousValue;\n\n        if (previousClasses) {\n          this.removeClasses(previousClasses);\n        }\n\n        if (currentClasses) {\n          this.addClasses(currentClasses);\n        }\n      }\n      /* eslint-enable @typescript-eslint/dot-notation */\n\n    }\n  }, {\n    key: \"addClasses\",\n    value: function addClasses(classList) {\n      var _this6 = this;\n\n      QuillEditorBase.normalizeClassNames(classList).forEach(function (c) {\n        _this6.renderer.addClass(_this6.editorElem, c);\n      });\n    }\n  }, {\n    key: \"removeClasses\",\n    value: function removeClasses(classList) {\n      var _this7 = this;\n\n      QuillEditorBase.normalizeClassNames(classList).forEach(function (c) {\n        _this7.renderer.removeClass(_this7.editorElem, c);\n      });\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(currentValue) {\n      // optional fix for https://github.com/angular/angular/issues/14988\n      if (this.filterNull && currentValue === null) {\n        return;\n      }\n\n      this.content = currentValue;\n\n      if (!this.quillEditor) {\n        return;\n      }\n\n      var format = getFormat(this.format, this.service.config.format);\n      var newValue = this.valueSetter(this.quillEditor, currentValue);\n\n      if (this.compareValues) {\n        var currentEditorValue = this.quillEditor.getContents();\n\n        if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n          return;\n        }\n      }\n\n      if (currentValue) {\n        if (format === 'text') {\n          this.quillEditor.setText(currentValue);\n        } else {\n          this.quillEditor.setContents(newValue);\n        }\n\n        return;\n      }\n\n      this.quillEditor.setText('');\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState() {\n      var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.disabled;\n      // store initial value to set appropriate disabled status after ViewInit\n      this.disabled = isDisabled;\n\n      if (this.quillEditor) {\n        if (isDisabled) {\n          this.quillEditor.disable();\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n        } else {\n          if (!this.readOnly) {\n            this.quillEditor.enable();\n          }\n\n          this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n        }\n      }\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"registerOnValidatorChange\",\n    value: function registerOnValidatorChange(fn) {\n      this.onValidatorChanged = fn;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      if (!this.quillEditor) {\n        return null;\n      }\n\n      var err = {};\n      var valid = true;\n      var text = this.quillEditor.getText(); // trim text if wanted + handle special case that an empty editor contains a new line\n\n      var textLength = this.trimOnValidation ? text.trim().length : text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1;\n\n      if (this.minLength && textLength && textLength < this.minLength) {\n        err.minLengthError = {\n          given: textLength,\n          minLength: this.minLength\n        };\n        valid = false;\n      }\n\n      if (this.maxLength && textLength > this.maxLength) {\n        err.maxLengthError = {\n          given: textLength,\n          maxLength: this.maxLength\n        };\n        valid = false;\n      }\n\n      if (this.required && !textLength) {\n        err.requiredError = {\n          empty: true\n        };\n        valid = false;\n      }\n\n      return valid ? null : err;\n    }\n  }], [{\n    key: \"normalizeClassNames\",\n    value: function normalizeClassNames(classes) {\n      var classList = classes.trim().split(' ');\n      return classList.reduce(function (prev, cur) {\n        var trimmed = cur.trim();\n\n        if (trimmed) {\n          prev.push(trimmed);\n        }\n\n        return prev;\n      }, []);\n    }\n  }]);\n\n  return QuillEditorBase;\n}();\n\nQuillEditorBase.ɵfac = function QuillEditorBase_Factory(t) {\n  return new (t || QuillEditorBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService));\n};\n\nQuillEditorBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: QuillEditorBase,\n  inputs: {\n    required: \"required\",\n    customToolbarPosition: \"customToolbarPosition\",\n    sanitize: \"sanitize\",\n    styles: \"styles\",\n    strict: \"strict\",\n    customOptions: \"customOptions\",\n    customModules: \"customModules\",\n    preserveWhitespace: \"preserveWhitespace\",\n    trimOnValidation: \"trimOnValidation\",\n    compareValues: \"compareValues\",\n    filterNull: \"filterNull\",\n    valueGetter: \"valueGetter\",\n    valueSetter: \"valueSetter\",\n    format: \"format\",\n    theme: \"theme\",\n    modules: \"modules\",\n    debug: \"debug\",\n    readOnly: \"readOnly\",\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    formats: \"formats\",\n    scrollingContainer: \"scrollingContainer\",\n    bounds: \"bounds\",\n    trackChanges: \"trackChanges\",\n    classes: \"classes\",\n    linkPlaceholder: \"linkPlaceholder\"\n  },\n  outputs: {\n    onEditorCreated: \"onEditorCreated\",\n    onEditorChanged: \"onEditorChanged\",\n    onContentChanged: \"onContentChanged\",\n    onSelectionChanged: \"onSelectionChanged\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nQuillEditorBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: QuillService\n  }];\n};\n\nQuillEditorBase.propDecorators = {\n  format: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }],\n  modules: [{\n    type: Input\n  }],\n  debug: [{\n    type: Input\n  }],\n  readOnly: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  maxLength: [{\n    type: Input\n  }],\n  minLength: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  formats: [{\n    type: Input\n  }],\n  customToolbarPosition: [{\n    type: Input\n  }],\n  sanitize: [{\n    type: Input\n  }],\n  styles: [{\n    type: Input\n  }],\n  strict: [{\n    type: Input\n  }],\n  scrollingContainer: [{\n    type: Input\n  }],\n  bounds: [{\n    type: Input\n  }],\n  customOptions: [{\n    type: Input\n  }],\n  customModules: [{\n    type: Input\n  }],\n  trackChanges: [{\n    type: Input\n  }],\n  preserveWhitespace: [{\n    type: Input\n  }],\n  classes: [{\n    type: Input\n  }],\n  trimOnValidation: [{\n    type: Input\n  }],\n  linkPlaceholder: [{\n    type: Input\n  }],\n  compareValues: [{\n    type: Input\n  }],\n  filterNull: [{\n    type: Input\n  }],\n  onEditorCreated: [{\n    type: Output\n  }],\n  onEditorChanged: [{\n    type: Output\n  }],\n  onContentChanged: [{\n    type: Output\n  }],\n  onSelectionChanged: [{\n    type: Output\n  }],\n  onFocus: [{\n    type: Output\n  }],\n  onBlur: [{\n    type: Output\n  }],\n  valueGetter: [{\n    type: Input\n  }],\n  valueSetter: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillEditorBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: QuillService\n    }];\n  }, {\n    required: [{\n      type: Input\n    }],\n    customToolbarPosition: [{\n      type: Input\n    }],\n    sanitize: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    strict: [{\n      type: Input\n    }],\n    customOptions: [{\n      type: Input\n    }],\n    customModules: [{\n      type: Input\n    }],\n    preserveWhitespace: [{\n      type: Input\n    }],\n    trimOnValidation: [{\n      type: Input\n    }],\n    compareValues: [{\n      type: Input\n    }],\n    filterNull: [{\n      type: Input\n    }],\n    onEditorCreated: [{\n      type: Output\n    }],\n    onEditorChanged: [{\n      type: Output\n    }],\n    onContentChanged: [{\n      type: Output\n    }],\n    onSelectionChanged: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    valueGetter: [{\n      type: Input\n    }],\n    valueSetter: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    modules: [{\n      type: Input\n    }],\n    debug: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    minLength: [{\n      type: Input\n    }],\n    formats: [{\n      type: Input\n    }],\n    scrollingContainer: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    trackChanges: [{\n      type: Input\n    }],\n    classes: [{\n      type: Input\n    }],\n    linkPlaceholder: [{\n      type: Input\n    }]\n  });\n})();\n\nvar QuillEditorComponent = /*#__PURE__*/function (_QuillEditorBase) {\n  _inherits(QuillEditorComponent, _QuillEditorBase);\n\n  var _super = _createSuper(QuillEditorComponent);\n\n  function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {\n    _classCallCheck(this, QuillEditorComponent);\n\n    return _super.call(this, elementRef, domSanitizer, doc, platformId, renderer, zone, service);\n  }\n\n  return QuillEditorComponent;\n}(QuillEditorBase);\n\nQuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) {\n  return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService));\n};\n\nQuillEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillEditorComponent,\n  selectors: [[\"quill-editor\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(function () {\n      return QuillEditorComponent;\n    })\n  }, {\n    multi: true,\n    provide: NG_VALIDATORS,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(function () {\n      return QuillEditorComponent;\n    })\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function QuillEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\nQuillEditorComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef,\n    decorators: [{\n      type: Inject,\n      args: [ElementRef]\n    }]\n  }, {\n    type: DomSanitizer,\n    decorators: [{\n      type: Inject,\n      args: [DomSanitizer]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: Renderer2,\n    decorators: [{\n      type: Inject,\n      args: [Renderer2]\n    }]\n  }, {\n    type: NgZone,\n    decorators: [{\n      type: Inject,\n      args: [NgZone]\n    }]\n  }, {\n    type: QuillService,\n    decorators: [{\n      type: Inject,\n      args: [QuillService]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillEditorComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(function () {\n          return QuillEditorComponent;\n        })\n      }, {\n        multi: true,\n        provide: NG_VALIDATORS,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(function () {\n          return QuillEditorComponent;\n        })\n      }],\n      selector: 'quill-editor',\n      template: \"\\n  <ng-content select=\\\"[quill-editor-toolbar]\\\"></ng-content>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: ɵngcc1.DomSanitizer,\n      decorators: [{\n        type: Inject,\n        args: [DomSanitizer]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: ɵngcc0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }, {\n      type: QuillService,\n      decorators: [{\n        type: Inject,\n        args: [QuillService]\n      }]\n    }];\n  }, null);\n})();\n\nvar QuillViewHTMLComponent = /*#__PURE__*/function () {\n  function QuillViewHTMLComponent(sanitizer, service) {\n    _classCallCheck(this, QuillViewHTMLComponent);\n\n    this.sanitizer = sanitizer;\n    this.service = service;\n    this.content = '';\n    this.innerHTML = '';\n    this.themeClass = 'ql-snow';\n  }\n\n  _createClass(QuillViewHTMLComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.theme) {\n        var theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\n        this.themeClass = \"ql-\".concat(theme, \" ngx-quill-view-html\");\n      } else if (!this.theme) {\n        var _theme = this.service.config.theme ? this.service.config.theme : 'snow';\n\n        this.themeClass = \"ql-\".concat(_theme, \" ngx-quill-view-html\");\n      }\n\n      if (changes.content) {\n        this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n      }\n    }\n  }]);\n\n  return QuillViewHTMLComponent;\n}();\n\nQuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) {\n  return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QuillService));\n};\n\nQuillViewHTMLComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillViewHTMLComponent,\n  selectors: [[\"quill-view-html\"]],\n  inputs: {\n    content: \"content\",\n    theme: \"theme\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n  template: function QuillViewHTMLComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\n    }\n  },\n  directives: [ɵngcc2.NgClass],\n  styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"],\n  encapsulation: 2\n});\n\nQuillViewHTMLComponent.ctorParameters = function () {\n  return [{\n    type: DomSanitizer,\n    decorators: [{\n      type: Inject,\n      args: [DomSanitizer]\n    }]\n  }, {\n    type: QuillService\n  }];\n};\n\nQuillViewHTMLComponent.propDecorators = {\n  content: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillViewHTMLComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      selector: 'quill-view-html',\n      template: \"\\n  <div class=\\\"ql-container\\\" [ngClass]=\\\"themeClass\\\">\\n    <div class=\\\"ql-editor\\\" [innerHTML]=\\\"innerHTML\\\">\\n    </div>\\n  </div>\\n\",\n      styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.DomSanitizer,\n      decorators: [{\n        type: Inject,\n        args: [DomSanitizer]\n      }]\n    }, {\n      type: QuillService\n    }];\n  }, {\n    content: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\n\nvar QuillViewComponent = /*#__PURE__*/function () {\n  function QuillViewComponent(elementRef, renderer, zone, service, domSanitizer, platformId) {\n    var _this8 = this;\n\n    _classCallCheck(this, QuillViewComponent);\n\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.zone = zone;\n    this.service = service;\n    this.domSanitizer = domSanitizer;\n    this.platformId = platformId;\n    this.sanitize = false;\n    this.strict = true;\n    this.customModules = [];\n    this.customOptions = [];\n    this.preserveWhitespace = false;\n    this.onEditorCreated = new EventEmitter();\n\n    this.valueSetter = function (quillEditor, value) {\n      var format = getFormat(_this8.format, _this8.service.config.format);\n      var content = value;\n\n      if (format === 'text') {\n        quillEditor.setText(content);\n      } else {\n        if (format === 'html') {\n          if (_this8.sanitize) {\n            value = _this8.domSanitizer.sanitize(SecurityContext.HTML, value);\n          }\n\n          content = quillEditor.clipboard.convert(value);\n        } else if (format === 'json') {\n          try {\n            content = JSON.parse(value);\n          } catch (e) {\n            content = [{\n              insert: value\n            }];\n          }\n        }\n\n        quillEditor.setContents(content);\n      }\n    };\n  }\n\n  _createClass(QuillViewComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!this.quillEditor) {\n        return;\n      }\n\n      if (changes.content) {\n        this.valueSetter(this.quillEditor, changes.content.currentValue);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this9 = this;\n\n        var Quill, modules, debug, formats, theme;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!isPlatformServer(this.platformId)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                _context3.next = 4;\n                return this.service.getQuill();\n\n              case 4:\n                Quill = _context3.sent;\n                modules = Object.assign({}, this.modules || this.service.config.modules);\n                modules.toolbar = false;\n                this.customOptions.forEach(function (customOption) {\n                  var newCustomOption = Quill.import(customOption.import);\n                  newCustomOption.whitelist = customOption.whitelist;\n                  Quill.register(newCustomOption, true);\n                });\n                this.customModules.forEach(function (_ref3) {\n                  var implementation = _ref3.implementation,\n                      path = _ref3.path;\n                  Quill.register(path, implementation);\n                });\n                debug = this.debug;\n\n                if (!debug && debug !== false && this.service.config.debug) {\n                  debug = this.service.config.debug;\n                }\n\n                formats = this.formats;\n\n                if (!formats && formats === undefined) {\n                  formats = this.service.config.formats ? Object.assign({}, this.service.config.formats) : this.service.config.formats === null ? null : undefined;\n                }\n\n                theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow');\n                this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n                this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n                this.zone.runOutsideAngular(function () {\n                  _this9.quillEditor = new Quill(_this9.editorElem, {\n                    debug: debug,\n                    formats: formats,\n                    modules: modules,\n                    readOnly: true,\n                    strict: _this9.strict,\n                    theme: theme\n                  });\n                });\n                this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n\n                if (this.content) {\n                  this.valueSetter(this.quillEditor, this.content);\n                } // trigger created in a timeout to avoid changed models after checked\n\n\n                setTimeout(function () {\n                  _this9.onEditorCreated.emit(_this9.quillEditor);\n                });\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return QuillViewComponent;\n}();\n\nQuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) {\n  return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(QuillService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nQuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: QuillViewComponent,\n  selectors: [[\"quill-view\"]],\n  inputs: {\n    sanitize: \"sanitize\",\n    strict: \"strict\",\n    customModules: \"customModules\",\n    customOptions: \"customOptions\",\n    preserveWhitespace: \"preserveWhitespace\",\n    format: \"format\",\n    theme: \"theme\",\n    modules: \"modules\",\n    debug: \"debug\",\n    formats: \"formats\",\n    content: \"content\"\n  },\n  outputs: {\n    onEditorCreated: \"onEditorCreated\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 0,\n  vars: 0,\n  template: function QuillViewComponent_Template(rf, ctx) {},\n  styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"],\n  encapsulation: 2\n});\n\nQuillViewComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: NgZone\n  }, {\n    type: QuillService\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\nQuillViewComponent.propDecorators = {\n  format: [{\n    type: Input\n  }],\n  theme: [{\n    type: Input\n  }],\n  modules: [{\n    type: Input\n  }],\n  debug: [{\n    type: Input\n  }],\n  formats: [{\n    type: Input\n  }],\n  sanitize: [{\n    type: Input\n  }],\n  strict: [{\n    type: Input\n  }],\n  content: [{\n    type: Input\n  }],\n  customModules: [{\n    type: Input\n  }],\n  customOptions: [{\n    type: Input\n  }],\n  preserveWhitespace: [{\n    type: Input\n  }],\n  onEditorCreated: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{\n    type: Component,\n    args: [{\n      encapsulation: ViewEncapsulation.None,\n      selector: 'quill-view',\n      template: \"\\n\",\n      styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: QuillService\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    sanitize: [{\n      type: Input\n    }],\n    strict: [{\n      type: Input\n    }],\n    customModules: [{\n      type: Input\n    }],\n    customOptions: [{\n      type: Input\n    }],\n    preserveWhitespace: [{\n      type: Input\n    }],\n    onEditorCreated: [{\n      type: Output\n    }],\n    format: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    modules: [{\n      type: Input\n    }],\n    debug: [{\n      type: Input\n    }],\n    formats: [{\n      type: Input\n    }],\n    content: [{\n      type: Input\n    }]\n  });\n})();\n\nvar QuillModule = /*#__PURE__*/function () {\n  function QuillModule() {\n    _classCallCheck(this, QuillModule);\n  }\n\n  _createClass(QuillModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      return {\n        ngModule: QuillModule,\n        providers: [{\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return QuillModule;\n}();\n\nQuillModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: QuillModule\n});\nQuillModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function QuillModule_Factory(t) {\n    return new (t || QuillModule)();\n  },\n  providers: [QuillService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, {\n    declarations: function declarations() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(QuillModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n      exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n      imports: [CommonModule],\n      providers: [QuillService]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-quill\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent, defaultModules };","map":{"version":3,"sources":["../../../projects/ngx-quill/src/lib/quill-defaults.ts","../../../projects/ngx-quill/src/lib/helpers.ts","../../../projects/ngx-quill/src/lib/quill-editor.interfaces.ts","../../../projects/ngx-quill/src/lib/quill.service.ts","../../../projects/ngx-quill/src/lib/quill-editor.component.ts","../../../projects/ngx-quill/src/lib/quill-view-html.component.ts","../../../projects/ngx-quill/src/lib/quill-view.component.ts","../../../projects/ngx-quill/src/lib/quill.module.ts","../../../projects/ngx-quill/src/public-api.ts","../../../projects/ngx-quill/src/ngx-quill.ts"],"names":[],"mappings":"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","sourcesContent":["export const defaultModules = {\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'], // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{ header: 1 }, { header: 2 }], // custom button values\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ script: 'sub' }, { script: 'super' }], // superscript/subscript\n    [{ indent: '-1' }, { indent: '+1' }], // outdent/indent\n    [{ direction: 'rtl' }], // text direction\n\n    [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n\n    [\n      { color: [] },\n      { background: [] }\n    ], // dropdown with defaults from theme\n    [{ font: [] }],\n    [{ align: [] }],\n\n    ['clean'], // remove formatting button\n\n    ['link', 'image', 'video'] // link and image, video\n  ]\n}\n","import {QuillFormat} from './quill-editor.interfaces'\n\nexport const getFormat = (format?: QuillFormat, configFormat?: QuillFormat): QuillFormat => {\n  const passedFormat = format || configFormat\n  return passedFormat || 'html'\n}\n","import { InjectionToken } from '@angular/core'\n\nexport interface CustomOption {\n  import: string\n  whitelist: any[]\n}\n\nexport interface CustomModule {\n  implementation: any\n  path: string\n}\n\nexport type QuillToolbarConfig = Array<Array< string | {\n  indent?: string\n  list?: string\n  direction?: string\n  header?: number | Array<boolean | number>\n  color?: string[] | string\n  background?: string[] | string\n  align?: string[] | string\n  script?: string\n  font?: string[] | string\n  size?: Array<boolean | string>\n}\n>>\n\nexport interface QuillModules {\n  [key: string]: any\n  clipboard?: {\n    matchers?: any[]\n    matchVisual?: boolean\n  } | boolean\n  history?: {\n    delay?: number\n    maxStack?: number\n    userOnly?: boolean\n  } | boolean\n  keyboard?: {\n    bindings?: any\n  } | boolean\n  syntax?: boolean\n  toolbar?: QuillToolbarConfig | string | {\n    container?: string | string[] | QuillToolbarConfig\n    handlers?: {\n      [key: string]: any\n    }\n  } | boolean\n}\n\nexport type QuillFormat = 'object' | 'json' | 'html' | 'text'\n\nexport interface QuillConfig {\n  bounds?: HTMLElement | string\n  customModules?: CustomModule[]\n  customOptions?: CustomOption[]\n  suppressGlobalRegisterWarning?: boolean\n  debug?: 'error' | 'warn' | 'log' | false\n  format?: QuillFormat\n  formats?: string[]\n  modules?: QuillModules\n  placeholder?: string\n  readOnly?: boolean\n  scrollingContainer?: HTMLElement | string | null\n  theme?: string\n  strict?: boolean\n  // Custom Config to track all changes or only changes by 'user'\n  trackChanges?: 'user' | 'all'\n}\n\nexport const QUILL_CONFIG_TOKEN = new InjectionToken<QuillConfig>('config')\n","import { Injectable, Inject } from '@angular/core'\nimport { QUILL_CONFIG_TOKEN, QuillConfig } from './quill-editor.interfaces'\nimport { defaultModules } from './quill-defaults'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuillService {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private Quill!: any\n  private $importPromise!: Promise<any>\n  private count = 0\n\n  constructor(\n    @Inject(QUILL_CONFIG_TOKEN) public config: QuillConfig\n  ) {\n    if (!this.config) {\n      this.config = { modules: defaultModules }\n    }\n  }\n\n  getQuill() {\n    this.count++\n    if (!this.Quill && this.count === 1) {\n      this.$importPromise = new Promise(async (resolve) => {\n        const quillImport = await import('quill')\n\n        this.Quill = (quillImport.default ? quillImport.default : quillImport) as any\n\n        // Only register custom options and modules once\n        this.config.customOptions?.forEach((customOption) => {\n          const newCustomOption = this.Quill.import(customOption.import)\n          newCustomOption.whitelist = customOption.whitelist\n          this.Quill.register(newCustomOption, true, this.config.suppressGlobalRegisterWarning)\n        })\n\n        this.config.customModules?.forEach(({implementation, path}) => {\n          this.Quill.register(path, implementation, this.config.suppressGlobalRegisterWarning)\n        })\n\n        resolve(this.Quill)\n      })\n    }\n    return this.$importPromise\n  }\n}\n","import {DOCUMENT, isPlatformServer} from '@angular/common'\nimport {DomSanitizer} from '@angular/platform-browser'\n\nimport { QuillModules, CustomOption, CustomModule} from './quill-editor.interfaces'\n\nimport QuillType, { Delta } from 'quill'\n\nimport {\n  AfterViewInit,\n  Component,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  SecurityContext,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\nimport {ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, Validator} from '@angular/forms'\nimport {defaultModules} from './quill-defaults'\n\nimport {getFormat} from './helpers'\nimport { QuillService } from './quill.service'\n\nexport interface Range {\n  index: number\n  length: number\n}\n\nexport interface ContentChange {\n  content: any\n  delta: Delta\n  editor: QuillType\n  html: string | null\n  oldDelta: Delta\n  source: string\n  text: string\n}\n\nexport interface SelectionChange {\n  editor: QuillType\n  oldRange: Range | null\n  range: Range | null\n  source: string\n}\n\nexport interface Blur {\n  editor: QuillType\n  source: string\n}\n\nexport interface Focus {\n  editor: QuillType\n  source: string\n}\n\nexport type EditorChangeContent = ContentChange & {event: 'text-change'}\nexport type EditorChangeSelection = SelectionChange & {event: 'selection-change'}\n\n@Directive()\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nexport abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {\n  @Input() format?: 'object' | 'html' | 'text' | 'json'\n  @Input() theme?: string\n  @Input() modules?: QuillModules\n  @Input() debug?: 'warn' | 'log' | 'error' | false\n  @Input() readOnly?: boolean\n  @Input() placeholder?: string\n  @Input() maxLength?: number\n  @Input() minLength?: number\n  @Input() required = false\n  @Input() formats?: string[] | null\n  @Input() customToolbarPosition: 'top' | 'bottom' = 'top'\n  @Input() sanitize = false\n  @Input() styles: any = null\n  @Input() strict = true\n  @Input() scrollingContainer?: HTMLElement | string | null\n  @Input() bounds?: HTMLElement | string\n  @Input() customOptions: CustomOption[] = []\n  @Input() customModules: CustomModule[] = []\n  @Input() trackChanges?: 'user' | 'all'\n  @Input() preserveWhitespace = false\n  @Input() classes?: string\n  @Input() trimOnValidation = false\n  @Input() linkPlaceholder?: string\n  @Input() compareValues = false\n  @Input() filterNull = false\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter()\n  @Output() onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection> = new EventEmitter()\n  @Output() onContentChanged: EventEmitter<ContentChange> = new EventEmitter()\n  @Output() onSelectionChanged: EventEmitter<SelectionChange> = new EventEmitter()\n  @Output() onFocus: EventEmitter<Focus> = new EventEmitter()\n  @Output() onBlur: EventEmitter<Blur> = new EventEmitter()\n\n  quillEditor!: QuillType\n  editorElem!: HTMLElement\n  content: any\n  disabled = false // used to store initial value before ViewInit\n\n  onModelChange: (modelValue?: any) => void\n  onModelTouched: () => void\n  onValidatorChanged: () => void\n\n  constructor(\n    public elementRef: ElementRef,\n    protected domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) protected doc: any,\n    @Inject(PLATFORM_ID) protected platformId: any,\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected service: QuillService\n  ) {}\n\n  static normalizeClassNames(classes: string): string[] {\n    const classList = classes.trim().split(' ')\n    return classList.reduce((prev: string[], cur: string) => {\n      const trimmed = cur.trim()\n      if (trimmed) {\n        prev.push(trimmed)\n      }\n\n      return prev\n    }, [])\n  }\n\n  @Input()\n  valueGetter = (quillEditor: QuillType, editorElement: HTMLElement): string | any  => {\n    let html: string | null = editorElement.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br></div>') {\n      html = null\n    }\n    let modelValue: string | Delta | null = html\n    const format = getFormat(this.format, this.service.config.format)\n\n    if (format === 'text') {\n      modelValue = quillEditor.getText()\n    } else if (format === 'object') {\n      modelValue = quillEditor.getContents()\n    } else if (format === 'json') {\n      try {\n        modelValue = JSON.stringify(quillEditor.getContents())\n      } catch (e) {\n        modelValue = quillEditor.getText()\n      }\n    }\n\n    return modelValue\n  }\n\n  @Input()\n  valueSetter = (quillEditor: QuillType, value: any): any => {\n    const format = getFormat(this.format, this.service.config.format)\n    if (format === 'html') {\n      if (this.sanitize) {\n        value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n      }\n      return quillEditor.clipboard.convert(value)\n    } else if (format === 'json') {\n      try {\n        return JSON.parse(value)\n      } catch (e) {\n        return [{ insert: value }]\n      }\n    }\n\n    return value\n  }\n\n  async ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const Quill = await this.service.getQuill()\n\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin',\n      this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>'\n    )\n\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-element]'\n    )\n\n    const toolbarElem = this.elementRef.nativeElement.querySelector(\n      '[quill-editor-toolbar]'\n    )\n    const modules = Object.assign({}, this.modules || this.service.config.modules)\n\n    if (toolbarElem) {\n      modules.toolbar = toolbarElem\n    } else if (modules.toolbar === undefined) {\n      modules.toolbar = defaultModules.toolbar\n    }\n\n    let placeholder = this.placeholder !== undefined ? this.placeholder : this.service.config.placeholder\n    if (placeholder === undefined) {\n      placeholder = 'Insert text here ...'\n    }\n\n    if (this.styles) {\n      Object.keys(this.styles).forEach((key: string) => {\n        this.renderer.setStyle(this.editorElem, key, this.styles[key])\n      })\n    }\n\n    if (this.classes) {\n      this.addClasses(this.classes)\n    }\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    this.customModules.forEach(({implementation, path}) => {\n      Quill.register(path, implementation)\n    })\n\n    let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds\n    if (!bounds) {\n      bounds = this.service.config.bounds ? this.service.config.bounds : this.doc.body\n    }\n\n    let debug = this.debug\n    if (!debug && debug !== false && this.service.config.debug) {\n      debug = this.service.config.debug\n    }\n\n    let readOnly = this.readOnly\n    if (!readOnly && this.readOnly !== false) {\n      readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false\n    }\n\n    let scrollingContainer = this.scrollingContainer\n    if (!scrollingContainer && this.scrollingContainer !== null) {\n      scrollingContainer =\n        this.service.config.scrollingContainer === null\n          || this.service.config.scrollingContainer ? this.service.config.scrollingContainer : null\n    }\n\n    let formats = this.formats\n    if (!formats && formats === undefined) {\n      formats = this.service.config.formats ? [...this.service.config.formats] : (this.service.config.formats === null ? null : undefined)\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.quillEditor = new Quill(this.editorElem, {\n        bounds,\n        debug: debug as any,\n        formats: formats as any,\n        modules,\n        placeholder,\n        readOnly,\n        scrollingContainer: scrollingContainer as any,\n        strict: this.strict,\n        theme: this.theme || (this.service.config.theme ? this.service.config.theme : 'snow')\n      })\n\n      // Set optional link placeholder, Quill has no native API for it so using workaround\n      if (this.linkPlaceholder) {\n        const tooltip = (this.quillEditor as any)?.theme?.tooltip\n        const input = tooltip?.root?.querySelector('input[data-link]')\n        if (input?.dataset) {\n          input.dataset.link = this.linkPlaceholder\n        }\n      }\n    })\n\n    if (this.content) {\n      const format = getFormat(this.format, this.service.config.format)\n\n      if (format === 'text') {\n        this.quillEditor.setText(this.content, 'silent')\n      } else {\n        const newValue = this.valueSetter(this.quillEditor, this.content)\n        this.quillEditor.setContents(newValue, 'silent')\n      }\n\n      this.quillEditor.getModule('history').clear()\n    }\n\n    // initialize disabled status based on this.disabled as default value\n    this.setDisabledState()\n\n    // triggered if selection or text changed\n    this.quillEditor.on(\n      'editor-change',\n      this.editorChangeHandler\n    )\n\n    // mark model as touched if editor lost focus\n    this.quillEditor.on(\n      'selection-change',\n      this.selectionChangeHandler\n    )\n\n    // update model if text changes\n    this.quillEditor.on(\n      'text-change',\n      this.textChangeHandler\n    )\n\n    // trigger created in a timeout to avoid changed models after checked\n    // if you are using the editor api in created output to change the editor content\n    setTimeout(() => {\n      if (this.onValidatorChanged) {\n        this.onValidatorChanged()\n      }\n      this.onEditorCreated.emit(this.quillEditor)\n    })\n  }\n\n  selectionChangeHandler = (range: Range | null, oldRange: Range | null, source: string) => {\n    const shouldTriggerOnModelTouched = !range && !!this.onModelTouched\n\n    // only emit changes when there's any listener\n    if (!this.onBlur.observers.length &&\n        !this.onFocus.observers.length &&\n        !this.onSelectionChanged.observers.length &&\n        !shouldTriggerOnModelTouched) {\n      return\n    }\n\n    this.zone.run(() => {\n      if (range === null) {\n        this.onBlur.emit({\n          editor: this.quillEditor,\n          source\n        })\n      } else if (oldRange === null) {\n        this.onFocus.emit({\n          editor: this.quillEditor,\n          source\n        })\n      }\n\n      this.onSelectionChanged.emit({\n        editor: this.quillEditor,\n        oldRange,\n        range,\n        source\n      })\n\n      if (shouldTriggerOnModelTouched) {\n        this.onModelTouched()\n      }\n    })\n  }\n\n  textChangeHandler = (delta: Delta, oldDelta: Delta, source: string): void => {\n    // only emit changes emitted by user interactions\n    const text = this.quillEditor.getText()\n    const content = this.quillEditor.getContents()\n\n    let html: string | null = this.editorElem!.querySelector('.ql-editor')!.innerHTML\n    if (html === '<p><br></p>' || html === '<div><br></div>') {\n      html = null\n    }\n\n    const trackChanges = this.trackChanges || this.service.config.trackChanges\n    const shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!this.onModelChange\n\n    // only emit changes when there's any listener\n    if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n      return\n    }\n\n    this.zone.run(() => {\n      if (shouldTriggerOnModelChange) {\n        this.onModelChange(\n          this.valueGetter(this.quillEditor, this.editorElem!)\n        )\n      }\n\n      this.onContentChanged.emit({\n        content,\n        delta,\n        editor: this.quillEditor,\n        html,\n        oldDelta,\n        source,\n        text\n      })\n    })\n  }\n\n  // eslint-disable-next-line max-len\n  editorChangeHandler = (\n    event: 'text-change' | 'selection-change',\n    current: any | Range | null, old: any | Range | null, source: string\n  ): void => {\n    // only emit changes when there's any listener\n    if (!this.onEditorChanged.observers.length) {\n      return\n    }\n\n    // only emit changes emitted by user interactions\n    if (event === 'text-change') {\n      const text = this.quillEditor.getText()\n      const content = this.quillEditor.getContents()\n\n      let html: string | null = this.editorElem!.querySelector('.ql-editor')!.innerHTML\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null\n      }\n\n      this.zone.run(() => {\n        this.onEditorChanged.emit({\n          content,\n          delta: current,\n          editor: this.quillEditor,\n          event,\n          html,\n          oldDelta: old,\n          source,\n          text\n        })\n      })\n    } else {\n      this.onEditorChanged.emit({\n        editor: this.quillEditor,\n        event,\n        oldRange: old,\n        range: current,\n        source\n      })\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.quillEditor) {\n      this.quillEditor.off('selection-change', this.selectionChangeHandler)\n      this.quillEditor.off('text-change', this.textChangeHandler)\n      this.quillEditor.off('editor-change', this.editorChangeHandler)\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.quillEditor) {\n      return\n    }\n    /* eslint-disable @typescript-eslint/dot-notation */\n    if (changes.readOnly) {\n      this.quillEditor.enable(!changes.readOnly.currentValue)\n    }\n    if (changes.placeholder) {\n      this.quillEditor.root.dataset.placeholder =\n        changes.placeholder.currentValue\n    }\n    if (changes.styles) {\n      const currentStyling = changes.styles.currentValue\n      const previousStyling = changes.styles.previousValue\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach((key: string) => {\n          this.renderer.removeStyle(this.editorElem, key)\n        })\n      }\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach((key: string) => {\n          this.renderer.setStyle(this.editorElem, key, this.styles[key])\n        })\n      }\n    }\n    if (changes.classes) {\n      const currentClasses = changes.classes.currentValue\n      const previousClasses = changes.classes.previousValue\n\n      if (previousClasses) {\n        this.removeClasses(previousClasses)\n      }\n\n      if (currentClasses) {\n        this.addClasses(currentClasses)\n      }\n    }\n    /* eslint-enable @typescript-eslint/dot-notation */\n  }\n\n  addClasses(classList: string): void {\n    QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n      this.renderer.addClass(this.editorElem, c)\n    })\n  }\n\n  removeClasses(classList: string): void {\n    QuillEditorBase.normalizeClassNames(classList).forEach((c: string) => {\n      this.renderer.removeClass(this.editorElem, c)\n    })\n  }\n\n  writeValue(currentValue: any) {\n\n    // optional fix for https://github.com/angular/angular/issues/14988\n    if (this.filterNull && currentValue === null) {\n      return\n    }\n\n    this.content = currentValue\n\n    if (!this.quillEditor) {\n      return\n    }\n\n    const format = getFormat(this.format, this.service.config.format)\n    const newValue = this.valueSetter(this.quillEditor, currentValue)\n\n    if (this.compareValues) {\n     const currentEditorValue = this.quillEditor.getContents()\n      if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n        return\n      }\n    }\n\n    if (currentValue) {\n      if (format === 'text') {\n        this.quillEditor.setText(currentValue)\n      } else {\n        this.quillEditor.setContents(newValue)\n      }\n      return\n    }\n    this.quillEditor.setText('')\n\n  }\n\n  setDisabledState(isDisabled: boolean = this.disabled): void {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable()\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled')\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable()\n        }\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled')\n      }\n    }\n  }\n\n  registerOnChange(fn: (modelValue: any) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  registerOnValidatorChange(fn: () => void) {\n    this.onValidatorChanged = fn\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null\n    }\n\n    const err: {\n      minLengthError?: {\n        given: number\n        minLength: number\n      }\n      maxLengthError?: {\n        given: number\n        maxLength: number\n      }\n      requiredError?: { empty: boolean }\n    } = {}\n    let valid = true\n\n    const text = this.quillEditor.getText()\n    // trim text if wanted + handle special case that an empty editor contains a new line\n    const textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1)\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      }\n\n      valid = false\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      }\n\n      valid = false\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      }\n\n      valid = false\n    }\n\n    return valid ? null : err\n  }\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => QuillEditorComponent)\n    },\n    {\n      multi: true,\n      provide: NG_VALIDATORS,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(() => QuillEditorComponent)\n    }\n  ],\n  selector: 'quill-editor',\n  template: `\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n`\n})\nexport class QuillEditorComponent extends QuillEditorBase {\n\n  constructor(\n    @Inject(ElementRef) elementRef: ElementRef,\n    @Inject(DomSanitizer) domSanitizer: DomSanitizer,\n    @Inject(DOCUMENT) doc: any,\n    @Inject(PLATFORM_ID) platformId: any,\n    @Inject(Renderer2) renderer: Renderer2,\n    @Inject(NgZone) zone: NgZone,\n    @Inject(QuillService) service: QuillService\n  ) {\n    super(\n      elementRef,\n      domSanitizer,\n      doc,\n      platformId,\n      renderer,\n      zone,\n      service\n    )\n  }\n\n}\n","import { DomSanitizer, SafeHtml } from '@angular/platform-browser'\nimport { QuillService } from './quill.service'\n\nimport {\n  Component,\n  Inject,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core'\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'quill-view-html',\n  styles: [`\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n`],\n  template: `\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n`\n})\nexport class QuillViewHTMLComponent implements OnChanges {\n  @Input() content = ''\n  @Input() theme?: string\n\n  innerHTML: SafeHtml = ''\n  themeClass = 'ql-snow'\n\n  constructor(\n    @Inject(DomSanitizer) private sanitizer: DomSanitizer,\n    protected service: QuillService\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.theme) {\n      const theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow')\n      this.themeClass = `ql-${theme} ngx-quill-view-html`\n    } else if (!this.theme) {\n      const theme = this.service.config.theme ? this.service.config.theme : 'snow'\n      this.themeClass = `ql-${theme} ngx-quill-view-html`\n    }\n    if (changes.content) {\n      this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue)\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common'\nimport QuillType from 'quill'\nimport { QuillModules } from './quill-editor.interfaces'\n\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  Output,\n  OnChanges,\n  PLATFORM_ID,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  NgZone,\n  SecurityContext\n} from '@angular/core'\n\nimport { CustomOption, CustomModule } from './quill-editor.interfaces'\nimport {getFormat} from './helpers'\nimport { QuillService } from './quill.service'\nimport { DomSanitizer } from '@angular/platform-browser'\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'quill-view',\n  styles: [`\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n`],\n  template: `\n`\n})\nexport class QuillViewComponent implements AfterViewInit, OnChanges {\n  @Input() format?: 'object' | 'html' | 'text' | 'json'\n  @Input() theme?: string\n  @Input() modules?: QuillModules\n  @Input() debug?: 'warn' | 'log' | 'error' | false\n  @Input() formats?: string[] | null\n  @Input() sanitize = false\n  @Input() strict = true\n  @Input() content: any\n  @Input() customModules: CustomModule[] = []\n  @Input() customOptions: CustomOption[] = []\n  @Input() preserveWhitespace = false\n\n  @Output() onEditorCreated: EventEmitter<any> = new EventEmitter()\n\n  quillEditor!: QuillType\n  editorElem!: HTMLElement\n\n  constructor(\n    public elementRef: ElementRef,\n    protected renderer: Renderer2,\n    protected zone: NgZone,\n    protected service: QuillService,\n    protected domSanitizer: DomSanitizer,\n    @Inject(PLATFORM_ID) protected platformId: any,\n  ) {}\n\n  valueSetter = (quillEditor: QuillType, value: any): any => {\n    const format = getFormat(this.format, this.service.config.format)\n    let content = value\n    if (format === 'text') {\n      quillEditor.setText(content)\n    } else {\n      if (format === 'html') {\n        if (this.sanitize) {\n          value = this.domSanitizer.sanitize(SecurityContext.HTML, value)\n        }\n        content = quillEditor.clipboard.convert(value)\n      } else if (format === 'json') {\n        try {\n          content = JSON.parse(value)\n        } catch (e) {\n          content = [{ insert: value }]\n        }\n      }\n      quillEditor.setContents(content)\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.quillEditor) {\n      return\n    }\n    if (changes.content) {\n      this.valueSetter(this.quillEditor, changes.content.currentValue)\n    }\n  }\n\n  async ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const Quill = await this.service.getQuill()\n\n    const modules = Object.assign({}, this.modules || this.service.config.modules)\n    modules.toolbar = false\n\n    this.customOptions.forEach((customOption) => {\n      const newCustomOption = Quill.import(customOption.import)\n      newCustomOption.whitelist = customOption.whitelist\n      Quill.register(newCustomOption, true)\n    })\n\n    this.customModules.forEach(({implementation, path}) => {\n      Quill.register(path, implementation)\n    })\n\n    let debug = this.debug\n    if (!debug && debug !== false && this.service.config.debug) {\n      debug = this.service.config.debug\n    }\n\n    let formats = this.formats\n    if (!formats && formats === undefined) {\n      formats = this.service.config.formats ?\n        Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined)\n    }\n    const theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow')\n\n    this.elementRef.nativeElement.insertAdjacentHTML(\n      'afterbegin',\n      this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>'\n    )\n\n    this.editorElem = this.elementRef.nativeElement.querySelector(\n      '[quill-view-element]'\n    ) as HTMLElement\n\n    this.zone.runOutsideAngular(() => {\n      this.quillEditor = new Quill(this.editorElem, {\n        debug: debug as any,\n        formats: formats as any,\n        modules,\n        readOnly: true,\n        strict: this.strict,\n        theme\n      })\n    })\n\n    this.renderer.addClass(this.editorElem, 'ngx-quill-view')\n\n    if (this.content) {\n      this.valueSetter(this.quillEditor, this.content)\n    }\n\n    // trigger created in a timeout to avoid changed models after checked\n    setTimeout(() => {\n      this.onEditorCreated.emit(this.quillEditor)\n    })\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { ModuleWithProviders, NgModule } from '@angular/core'\n\nimport { QuillEditorComponent } from './quill-editor.component'\nimport { QUILL_CONFIG_TOKEN, QuillConfig } from './quill-editor.interfaces'\nimport { QuillViewHTMLComponent } from './quill-view-html.component'\nimport { QuillViewComponent } from './quill-view.component'\nimport { QuillService } from './quill.service'\n\n@NgModule({\n  declarations: [\n    QuillEditorComponent,\n    QuillViewComponent,\n    QuillViewHTMLComponent\n  ],\n  exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n  imports: [CommonModule],\n  providers: [QuillService]\n})\nexport class QuillModule {\n  static forRoot(config?: QuillConfig): ModuleWithProviders<QuillModule> {\n    return {\n      ngModule: QuillModule,\n      providers: [\n        {\n          provide: QUILL_CONFIG_TOKEN,\n          useValue: config\n        }\n      ]\n    }\n  }\n}\n","/*\n * Public API Surface of ngx-quill\n */\n\nexport * from './lib/quill.module'\nexport * from './lib/quill.service'\nexport * from './lib/quill-defaults'\nexport * from './lib/quill-editor.component'\nexport * from './lib/quill-view.component'\nexport * from './lib/quill-view-html.component'\nexport * from './lib/quill-editor.interfaces'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}