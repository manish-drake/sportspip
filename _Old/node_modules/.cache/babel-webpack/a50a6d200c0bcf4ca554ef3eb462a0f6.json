{"ast":null,"code":"////// HttpClient-Only version ////\nimport * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { NgModule } from '@angular/core';\nimport { HttpBackend, XhrFactory } from '@angular/common/http';\nimport { InMemoryBackendConfig, InMemoryDbService } from './interfaces';\nimport { HttpClientBackendService } from './http-client-backend.service'; // Internal - Creates the in-mem backend for the HttpClient module\n// AoT requires factory to be exported\n\nexport function httpClientInMemBackendServiceFactory(dbService, options, xhrFactory) {\n  var backend = new HttpClientBackendService(dbService, options, xhrFactory);\n  return backend;\n}\n\nvar HttpClientInMemoryWebApiModule =\n/** @class */\nfunction () {\n  function HttpClientInMemoryWebApiModule() {}\n\n  HttpClientInMemoryWebApiModule_1 = HttpClientInMemoryWebApiModule;\n  /**\r\n  *  Redirect the Angular `HttpClient` XHR calls\r\n  *  to in-memory data store that implements `InMemoryDbService`.\r\n  *  with class that implements InMemoryDbService and creates an in-memory database.\r\n  *\r\n  *  Usually imported in the root application module.\r\n  *  Can import in a lazy feature module too, which will shadow modules loaded earlier\r\n  *\r\n  * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\r\n  * @param {InMemoryBackendConfigArgs} [options]\r\n  *\r\n  * @example\r\n  * HttpInMemoryWebApiModule.forRoot(dbCreator);\r\n  * HttpInMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\r\n  */\n\n  HttpClientInMemoryWebApiModule.forRoot = function (dbCreator, options) {\n    return {\n      ngModule: HttpClientInMemoryWebApiModule_1,\n      providers: [{\n        provide: InMemoryDbService,\n        useClass: dbCreator\n      }, {\n        provide: InMemoryBackendConfig,\n        useValue: options\n      }, {\n        provide: HttpBackend,\n        useFactory: httpClientInMemBackendServiceFactory,\n        deps: [InMemoryDbService, InMemoryBackendConfig, XhrFactory]\n      }]\n    };\n  };\n  /**\r\n  *\r\n  * Enable and configure the in-memory web api in a lazy-loaded feature module.\r\n  * Same as `forRoot`.\r\n  * This is a feel-good method so you can follow the Angular style guide for lazy-loaded modules.\r\n  */\n\n\n  HttpClientInMemoryWebApiModule.forFeature = function (dbCreator, options) {\n    return HttpClientInMemoryWebApiModule_1.forRoot(dbCreator, options);\n  };\n\n  var HttpClientInMemoryWebApiModule_1;\n  HttpClientInMemoryWebApiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: HttpClientInMemoryWebApiModule\n  });\n  HttpClientInMemoryWebApiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    factory: function HttpClientInMemoryWebApiModule_Factory(t) {\n      return new (t || HttpClientInMemoryWebApiModule)();\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientInMemoryWebApiModule, [{\n      type: NgModule,\n      args: [{}]\n    }], function () {\n      return [];\n    }, null);\n  })();\n\n  return HttpClientInMemoryWebApiModule;\n}();\n\nexport { HttpClientInMemoryWebApiModule };","map":{"version":3,"sources":["http-client-in-memory-web-api.module.ts"],"names":[],"mappings":"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","sourcesContent":["////// HttpClient-Only version ////\n\nimport { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { HttpBackend, XhrFactory } from '@angular/common/http';\n\nimport {\n  InMemoryBackendConfigArgs,\n  InMemoryBackendConfig,\n  InMemoryDbService\n} from './interfaces';\n\nimport { HttpClientBackendService } from './http-client-backend.service';\n\n// Internal - Creates the in-mem backend for the HttpClient module\n// AoT requires factory to be exported\nexport function httpClientInMemBackendServiceFactory(\n  dbService: InMemoryDbService,\n  options: InMemoryBackendConfig,\n  xhrFactory: XhrFactory,\n): HttpBackend {\n  const backend: any = new HttpClientBackendService(dbService, options, xhrFactory);\n  return backend;\n}\n\n@NgModule({})\nexport class HttpClientInMemoryWebApiModule {\n  /**\n  *  Redirect the Angular `HttpClient` XHR calls\n  *  to in-memory data store that implements `InMemoryDbService`.\n  *  with class that implements InMemoryDbService and creates an in-memory database.\n  *\n  *  Usually imported in the root application module.\n  *  Can import in a lazy feature module too, which will shadow modules loaded earlier\n  *\n  * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\n  * @param {InMemoryBackendConfigArgs} [options]\n  *\n  * @example\n  * HttpInMemoryWebApiModule.forRoot(dbCreator);\n  * HttpInMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\n  */\n  static forRoot(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs):\n    ModuleWithProviders<HttpClientInMemoryWebApiModule> {\n    return {\n      ngModule: HttpClientInMemoryWebApiModule,\n      providers: [\n        { provide: InMemoryDbService,  useClass: dbCreator },\n        { provide: InMemoryBackendConfig, useValue: options },\n\n        { provide: HttpBackend,\n          useFactory: httpClientInMemBackendServiceFactory,\n          deps: [InMemoryDbService, InMemoryBackendConfig, XhrFactory]}\n      ]\n    };\n  }\n    /**\n   *\n   * Enable and configure the in-memory web api in a lazy-loaded feature module.\n   * Same as `forRoot`.\n   * This is a feel-good method so you can follow the Angular style guide for lazy-loaded modules.\n   */\n  static forFeature(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs):\n    ModuleWithProviders<HttpClientInMemoryWebApiModule> {\n    return HttpClientInMemoryWebApiModule.forRoot(dbCreator, options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}