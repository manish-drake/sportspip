{"ast":null,"code":"import _slicedToArray from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createForOfIteratorHelper from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/git/sportspip/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, Directive, ContentChildren, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BehaviorSubject, Observable, Subject, combineLatest } from 'rxjs';\nimport { switchMap, take, map, takeUntil } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\n\nimport * as Éµngcc0 from '@angular/core';\nvar _c0 = [\"*\"];\n\nvar MapEventManager = /*#__PURE__*/function () {\n  function MapEventManager(_ngZone) {\n    _classCallCheck(this, MapEventManager);\n\n    this._ngZone = _ngZone;\n    /** Pending listeners that were added before the target was set. */\n\n    this._pending = [];\n    this._listeners = [];\n    this._targetStream = new BehaviorSubject(undefined);\n  }\n  /** Clears all currently-registered event listeners. */\n\n\n  _createClass(MapEventManager, [{\n    key: \"_clearListeners\",\n    value: function _clearListeners() {\n      var _iterator = _createForOfIteratorHelper(this._listeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener.remove();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._listeners = [];\n    }\n    /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n\n  }, {\n    key: \"getLazyEmitter\",\n    value: function getLazyEmitter(name) {\n      var _this = this;\n\n      return this._targetStream.pipe(switchMap(function (target) {\n        var observable = new Observable(function (observer) {\n          // If the target hasn't been initialized yet, cache the observer so it can be added later.\n          if (!target) {\n            _this._pending.push({\n              observable: observable,\n              observer: observer\n            });\n\n            return undefined;\n          }\n\n          var listener = target.addListener(name, function (event) {\n            _this._ngZone.run(function () {\n              return observer.next(event);\n            });\n          });\n\n          _this._listeners.push(listener);\n\n          return function () {\n            return listener.remove();\n          };\n        });\n        return observable;\n      }));\n    }\n    /** Sets the current target that the manager should bind events to. */\n\n  }, {\n    key: \"setTarget\",\n    value: function setTarget(target) {\n      var currentTarget = this._targetStream.value;\n\n      if (target === currentTarget) {\n        return;\n      } // Clear the listeners from the pre-existing target.\n\n\n      if (currentTarget) {\n        this._clearListeners();\n\n        this._pending = [];\n      }\n\n      this._targetStream.next(target); // Add the listeners that were bound before the map was initialized.\n\n\n      this._pending.forEach(function (subscriber) {\n        return subscriber.observable.subscribe(subscriber.observer);\n      });\n\n      this._pending = [];\n    }\n    /** Destroys the manager and clears the event listeners. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._clearListeners();\n\n      this._pending = [];\n\n      this._targetStream.complete();\n    }\n  }]);\n\n  return MapEventManager;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** default options set to the Googleplex */\n\n\nvar DEFAULT_OPTIONS = {\n  center: {\n    lat: 37.421995,\n    lng: -122.084092\n  },\n  zoom: 17\n};\n/** Arbitrary default height for the map element */\n\nvar DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\n\nvar DEFAULT_WIDTH = '500px';\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\n\nvar GoogleMap = /*#__PURE__*/function () {\n  function GoogleMap(_elementRef, _ngZone, platformId) {\n    _classCallCheck(this, GoogleMap);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n\n    this.height = DEFAULT_HEIGHT;\n    /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n\n    this.width = DEFAULT_WIDTH;\n    this._options = DEFAULT_OPTIONS;\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n     */\n\n    this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n     */\n\n    this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n     */\n\n    this.mapDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n     */\n\n    this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n     */\n\n    this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n     */\n\n    this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n     */\n\n    this.idle = this._eventManager.getLazyEmitter('idle');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n     */\n\n    this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n     */\n\n    this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n     */\n\n    this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n     */\n\n    this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n     */\n\n    this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n     */\n\n    this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n     */\n\n    this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n     */\n\n    this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n     */\n\n    this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n    this._isBrowser = isPlatformBrowser(platformId);\n\n    if (this._isBrowser) {\n      var googleMapsWindow = window;\n\n      if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Namespace google not found, cannot construct embedded google ' + 'map. Please install the Google Maps JavaScript API: ' + 'https://developers.google.com/maps/documentation/javascript/' + 'tutorial#Loading_the_Maps_API');\n      }\n    }\n  }\n\n  _createClass(GoogleMap, [{\n    key: \"center\",\n    set: function set(center) {\n      this._center = center;\n    }\n  }, {\n    key: \"zoom\",\n    set: function set(zoom) {\n      this._zoom = zoom;\n    }\n  }, {\n    key: \"options\",\n    set: function set(options) {\n      this._options = options || DEFAULT_OPTIONS;\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['height'] || changes['width']) {\n        this._setSize();\n      }\n\n      var googleMap = this.googleMap;\n\n      if (googleMap) {\n        if (changes['options'] && this._options) {\n          googleMap.setOptions(this._options);\n        }\n\n        if (changes['center'] && this._center) {\n          googleMap.setCenter(this._center);\n        } // Note that the zoom can be zero.\n\n\n        if (changes['zoom'] && this._zoom != null) {\n          googleMap.setZoom(this._zoom);\n        }\n\n        if (changes['mapTypeId'] && this.mapTypeId) {\n          googleMap.setMapTypeId(this.mapTypeId);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      // It should be a noop during server-side rendering.\n      if (this._isBrowser) {\n        this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n\n        this._setSize(); // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n\n\n        this._ngZone.runOutsideAngular(function () {\n          _this2.googleMap = new google.maps.Map(_this2._mapEl, _this2._combineOptions());\n        });\n\n        this._eventManager.setTarget(this.googleMap);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n     */\n\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds, padding) {\n      this._assertInitialized();\n\n      this.googleMap.fitBounds(bounds, padding);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n     */\n\n  }, {\n    key: \"panBy\",\n    value: function panBy(x, y) {\n      this._assertInitialized();\n\n      this.googleMap.panBy(x, y);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n     */\n\n  }, {\n    key: \"panTo\",\n    value: function panTo(latLng) {\n      this._assertInitialized();\n\n      this.googleMap.panTo(latLng);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n     */\n\n  }, {\n    key: \"panToBounds\",\n    value: function panToBounds(latLngBounds, padding) {\n      this._assertInitialized();\n\n      this.googleMap.panToBounds(latLngBounds, padding);\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      this._assertInitialized();\n\n      return this.googleMap.getBounds() || null;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n     */\n\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      this._assertInitialized();\n\n      return this.googleMap.getCenter();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n     */\n\n  }, {\n    key: \"getClickableIcons\",\n    value: function getClickableIcons() {\n      this._assertInitialized();\n\n      return this.googleMap.getClickableIcons();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n     */\n\n  }, {\n    key: \"getHeading\",\n    value: function getHeading() {\n      this._assertInitialized();\n\n      return this.googleMap.getHeading();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n     */\n\n  }, {\n    key: \"getMapTypeId\",\n    value: function getMapTypeId() {\n      this._assertInitialized();\n\n      return this.googleMap.getMapTypeId();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n     */\n\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      this._assertInitialized();\n\n      return this.googleMap.getProjection();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n     */\n\n  }, {\n    key: \"getStreetView\",\n    value: function getStreetView() {\n      this._assertInitialized();\n\n      return this.googleMap.getStreetView();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n     */\n\n  }, {\n    key: \"getTilt\",\n    value: function getTilt() {\n      this._assertInitialized();\n\n      return this.googleMap.getTilt();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n     */\n\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      this._assertInitialized();\n\n      return this.googleMap.getZoom();\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n     */\n\n  }, {\n    key: \"controls\",\n    get: function get() {\n      this._assertInitialized();\n\n      return this.googleMap.controls;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      this._assertInitialized();\n\n      return this.googleMap.data;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n     */\n\n  }, {\n    key: \"mapTypes\",\n    get: function get() {\n      this._assertInitialized();\n\n      return this.googleMap.mapTypes;\n    }\n    /**\n     * See\n     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n     */\n\n  }, {\n    key: \"overlayMapTypes\",\n    get: function get() {\n      this._assertInitialized();\n\n      return this.googleMap.overlayMapTypes;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize() {\n      if (this._mapEl) {\n        var styles = this._mapEl.style;\n        styles.height = this.height === null ? '' : coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n        styles.width = this.width === null ? '' : coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n      }\n    }\n    /** Combines the center and zoom and the other map options into a single object */\n\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      var _a, _b;\n\n      var options = this._options;\n      return Object.assign(Object.assign({}, options), {\n        // It's important that we set **some** kind of `center` and `zoom`, otherwise\n        // Google Maps will render a blank rectangle which looks broken.\n        center: this._center || options.center || DEFAULT_OPTIONS.center,\n        zoom: (_b = (_a = this._zoom) !== null && _a !== void 0 ? _a : options.zoom) !== null && _b !== void 0 ? _b : DEFAULT_OPTIONS.zoom,\n        mapTypeId: this.mapTypeId\n      });\n    }\n    /** Asserts that the map has been initialized. */\n\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n    }\n  }]);\n\n  return GoogleMap;\n}();\n\nGoogleMap.Éµfac = function GoogleMap_Factory(t) {\n  return new (t || GoogleMap)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(PLATFORM_ID));\n};\n\nGoogleMap.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: GoogleMap,\n  selectors: [[\"google-map\"]],\n  inputs: {\n    height: \"height\",\n    width: \"width\",\n    center: \"center\",\n    zoom: \"zoom\",\n    options: \"options\",\n    mapTypeId: \"mapTypeId\"\n  },\n  outputs: {\n    boundsChanged: \"boundsChanged\",\n    centerChanged: \"centerChanged\",\n    mapClick: \"mapClick\",\n    mapDblclick: \"mapDblclick\",\n    mapDrag: \"mapDrag\",\n    mapDragend: \"mapDragend\",\n    mapDragstart: \"mapDragstart\",\n    headingChanged: \"headingChanged\",\n    idle: \"idle\",\n    maptypeidChanged: \"maptypeidChanged\",\n    mapMousemove: \"mapMousemove\",\n    mapMouseout: \"mapMouseout\",\n    mapMouseover: \"mapMouseover\",\n    projectionChanged: \"projectionChanged\",\n    mapRightclick: \"mapRightclick\",\n    tilesloaded: \"tilesloaded\",\n    tiltChanged: \"tiltChanged\",\n    zoomChanged: \"zoomChanged\"\n  },\n  exportAs: [\"googleMap\"],\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"map-container\"]],\n  template: function GoogleMap_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµprojectionDef();\n      Éµngcc0.ÉµÉµelement(0, \"div\", 0);\n      Éµngcc0.ÉµÉµprojection(1);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nGoogleMap.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\nGoogleMap.propDecorators = {\n  height: [{\n    type: Input\n  }],\n  width: [{\n    type: Input\n  }],\n  mapTypeId: [{\n    type: Input\n  }],\n  center: [{\n    type: Input\n  }],\n  zoom: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  boundsChanged: [{\n    type: Output\n  }],\n  centerChanged: [{\n    type: Output\n  }],\n  mapClick: [{\n    type: Output\n  }],\n  mapDblclick: [{\n    type: Output\n  }],\n  mapDrag: [{\n    type: Output\n  }],\n  mapDragend: [{\n    type: Output\n  }],\n  mapDragstart: [{\n    type: Output\n  }],\n  headingChanged: [{\n    type: Output\n  }],\n  idle: [{\n    type: Output\n  }],\n  maptypeidChanged: [{\n    type: Output\n  }],\n  mapMousemove: [{\n    type: Output\n  }],\n  mapMouseout: [{\n    type: Output\n  }],\n  mapMouseover: [{\n    type: Output\n  }],\n  projectionChanged: [{\n    type: Output\n  }],\n  mapRightclick: [{\n    type: Output\n  }],\n  tilesloaded: [{\n    type: Output\n  }],\n  tiltChanged: [{\n    type: Output\n  }],\n  zoomChanged: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(GoogleMap, [{\n    type: Component,\n    args: [{\n      selector: 'google-map',\n      exportAs: 'googleMap',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<div class=\"map-container\"></div><ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    boundsChanged: [{\n      type: Output\n    }],\n    centerChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    headingChanged: [{\n      type: Output\n    }],\n    idle: [{\n      type: Output\n    }],\n    maptypeidChanged: [{\n      type: Output\n    }],\n    mapMousemove: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    projectionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    tilesloaded: [{\n      type: Output\n    }],\n    tiltChanged: [{\n      type: Output\n    }],\n    zoomChanged: [{\n      type: Output\n    }],\n    center: [{\n      type: Input\n    }],\n    zoom: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    mapTypeId: [{\n      type: Input\n    }]\n  });\n})();\n\nvar cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\n\nfunction coerceCssPixelValue(value) {\n  if (value == null) {\n    return '';\n  }\n\n  return cssUnitsPattern.test(value) ? value : \"\".concat(value, \"px\");\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MapBaseLayer = /*#__PURE__*/function () {\n  function MapBaseLayer(_map, _ngZone) {\n    _classCallCheck(this, MapBaseLayer);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n  }\n\n  _createClass(MapBaseLayer, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      if (this._map._isBrowser) {\n        this._ngZone.runOutsideAngular(function () {\n          _this3._initializeObject();\n        });\n\n        this._assertInitialized();\n\n        this._setMap();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._unsetMap();\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n    }\n  }, {\n    key: \"_initializeObject\",\n    value: function _initializeObject() {}\n  }, {\n    key: \"_setMap\",\n    value: function _setMap() {}\n  }, {\n    key: \"_unsetMap\",\n    value: function _unsetMap() {}\n  }]);\n\n  return MapBaseLayer;\n}();\n\nMapBaseLayer.Éµfac = function MapBaseLayer_Factory(t) {\n  return new (t || MapBaseLayer)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapBaseLayer.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapBaseLayer,\n  selectors: [[\"map-base-layer\"]],\n  exportAs: [\"mapBaseLayer\"]\n});\n\nMapBaseLayer.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapBaseLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-base-layer',\n      exportAs: 'mapBaseLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\n\n\nvar MapBicyclingLayer = /*#__PURE__*/function (_MapBaseLayer) {\n  _inherits(MapBicyclingLayer, _MapBaseLayer);\n\n  var _super = _createSuper(MapBicyclingLayer);\n\n  function MapBicyclingLayer() {\n    _classCallCheck(this, MapBicyclingLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MapBicyclingLayer, [{\n    key: \"_initializeObject\",\n    value: function _initializeObject() {\n      this.bicyclingLayer = new google.maps.BicyclingLayer();\n    }\n  }, {\n    key: \"_setMap\",\n    value: function _setMap() {\n      this._assertLayerInitialized();\n\n      this.bicyclingLayer.setMap(this._map.googleMap);\n    }\n  }, {\n    key: \"_unsetMap\",\n    value: function _unsetMap() {\n      if (this.bicyclingLayer) {\n        this.bicyclingLayer.setMap(null);\n      }\n    }\n  }, {\n    key: \"_assertLayerInitialized\",\n    value: function _assertLayerInitialized() {\n      if (!this.bicyclingLayer) {\n        throw Error('Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n      }\n    }\n  }]);\n\n  return MapBicyclingLayer;\n}(MapBaseLayer);\n\nMapBicyclingLayer.Éµfac = function MapBicyclingLayer_Factory(t) {\n  return ÉµMapBicyclingLayer_BaseFactory(t || MapBicyclingLayer);\n};\n\nMapBicyclingLayer.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapBicyclingLayer,\n  selectors: [[\"map-bicycling-layer\"]],\n  exportAs: [\"mapBicyclingLayer\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\nvar ÉµMapBicyclingLayer_BaseFactory = /*@__PURE__*/Éµngcc0.ÉµÉµgetInheritedFactory(MapBicyclingLayer);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapBicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-bicycling-layer',\n      exportAs: 'mapBicyclingLayer'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\n\n\nvar MapCircle = /*#__PURE__*/function () {\n  function MapCircle(_map, _ngZone) {\n    _classCallCheck(this, MapCircle);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._center = new BehaviorSubject(undefined);\n    this._radius = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n     */\n\n    this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n     */\n\n    this.circleClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n     */\n\n    this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n     */\n\n    this.circleDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n     */\n\n    this.circleDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n     */\n\n    this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n     */\n\n    this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n     */\n\n    this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n     */\n\n    this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n     */\n\n    this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n     */\n\n    this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n     */\n\n    this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n     */\n\n    this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  _createClass(MapCircle, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"center\",\n    set: function set(center) {\n      this._center.next(center);\n    }\n  }, {\n    key: \"radius\",\n    set: function set(radius) {\n      this._radius.next(radius);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this4 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this4._ngZone.runOutsideAngular(function () {\n            _this4.circle = new google.maps.Circle(options);\n          });\n\n          _this4._assertInitialized();\n\n          _this4.circle.setMap(_this4._map.googleMap);\n\n          _this4._eventManager.setTarget(_this4.circle);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForCenterChanges();\n\n        this._watchForRadiusChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.circle) {\n        this.circle.setMap(null);\n      }\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      this._assertInitialized();\n\n      return this.circle.getBounds();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n     */\n\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      this._assertInitialized();\n\n      return this.circle.getCenter();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n     */\n\n  }, {\n    key: \"getDraggable\",\n    value: function getDraggable() {\n      this._assertInitialized();\n\n      return this.circle.getDraggable();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n     */\n\n  }, {\n    key: \"getEditable\",\n    value: function getEditable() {\n      this._assertInitialized();\n\n      return this.circle.getEditable();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n     */\n\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      this._assertInitialized();\n\n      return this.circle.getRadius();\n    }\n    /**\n     * @see\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      this._assertInitialized();\n\n      return this.circle.getVisible();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return combineLatest([this._options, this._center, this._radius]).pipe(map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            options = _ref2[0],\n            center = _ref2[1],\n            radius = _ref2[2];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          center: center || options.center,\n          radius: radius !== undefined ? radius : options.radius\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this5 = this;\n\n      this._options.pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        _this5._assertInitialized();\n\n        _this5.circle.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_watchForCenterChanges\",\n    value: function _watchForCenterChanges() {\n      var _this6 = this;\n\n      this._center.pipe(takeUntil(this._destroyed)).subscribe(function (center) {\n        if (center) {\n          _this6._assertInitialized();\n\n          _this6.circle.setCenter(center);\n        }\n      });\n    }\n  }, {\n    key: \"_watchForRadiusChanges\",\n    value: function _watchForRadiusChanges() {\n      var _this7 = this;\n\n      this._radius.pipe(takeUntil(this._destroyed)).subscribe(function (radius) {\n        if (radius !== undefined) {\n          _this7._assertInitialized();\n\n          _this7.circle.setRadius(radius);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.circle) {\n          throw Error('Cannot interact with a Google Map Circle before it has been ' + 'initialized. Please wait for the Circle to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapCircle;\n}();\n\nMapCircle.Éµfac = function MapCircle_Factory(t) {\n  return new (t || MapCircle)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapCircle.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapCircle,\n  selectors: [[\"map-circle\"]],\n  inputs: {\n    options: \"options\",\n    center: \"center\",\n    radius: \"radius\"\n  },\n  outputs: {\n    centerChanged: \"centerChanged\",\n    circleClick: \"circleClick\",\n    circleDblclick: \"circleDblclick\",\n    circleDrag: \"circleDrag\",\n    circleDragend: \"circleDragend\",\n    circleDragstart: \"circleDragstart\",\n    circleMousedown: \"circleMousedown\",\n    circleMousemove: \"circleMousemove\",\n    circleMouseout: \"circleMouseout\",\n    circleMouseover: \"circleMouseover\",\n    circleMouseup: \"circleMouseup\",\n    radiusChanged: \"radiusChanged\",\n    circleRightclick: \"circleRightclick\"\n  },\n  exportAs: [\"mapCircle\"]\n});\n\nMapCircle.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapCircle.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  center: [{\n    type: Input\n  }],\n  radius: [{\n    type: Input\n  }],\n  centerChanged: [{\n    type: Output\n  }],\n  circleClick: [{\n    type: Output\n  }],\n  circleDblclick: [{\n    type: Output\n  }],\n  circleDrag: [{\n    type: Output\n  }],\n  circleDragend: [{\n    type: Output\n  }],\n  circleDragstart: [{\n    type: Output\n  }],\n  circleMousedown: [{\n    type: Output\n  }],\n  circleMousemove: [{\n    type: Output\n  }],\n  circleMouseout: [{\n    type: Output\n  }],\n  circleMouseover: [{\n    type: Output\n  }],\n  circleMouseup: [{\n    type: Output\n  }],\n  radiusChanged: [{\n    type: Output\n  }],\n  circleRightclick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapCircle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-circle',\n      exportAs: 'mapCircle'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    centerChanged: [{\n      type: Output\n    }],\n    circleClick: [{\n      type: Output\n    }],\n    circleDblclick: [{\n      type: Output\n    }],\n    circleDrag: [{\n      type: Output\n    }],\n    circleDragend: [{\n      type: Output\n    }],\n    circleDragstart: [{\n      type: Output\n    }],\n    circleMousedown: [{\n      type: Output\n    }],\n    circleMousemove: [{\n      type: Output\n    }],\n    circleMouseout: [{\n      type: Output\n    }],\n    circleMouseover: [{\n      type: Output\n    }],\n    circleMouseup: [{\n      type: Output\n    }],\n    radiusChanged: [{\n      type: Output\n    }],\n    circleRightclick: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    center: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\n\n\nvar MapGroundOverlay = /*#__PURE__*/function () {\n  function MapGroundOverlay(_map, _ngZone) {\n    _classCallCheck(this, MapGroundOverlay);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._opacity = new BehaviorSubject(1);\n    this._url = new BehaviorSubject('');\n    this._bounds = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /** Whether the overlay is clickable */\n\n    this.clickable = false;\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n  }\n  /** URL of the image that will be shown in the overlay. */\n\n\n  _createClass(MapGroundOverlay, [{\n    key: \"url\",\n    set: function set(url) {\n      this._url.next(url);\n    }\n    /** Bounds for the overlay. */\n\n  }, {\n    key: \"bounds\",\n    get: function get() {\n      return this._bounds.value;\n    },\n    set: function set(bounds) {\n      this._bounds.next(bounds);\n    }\n    /** Opacity of the overlay. */\n\n  }, {\n    key: \"opacity\",\n    set: function set(opacity) {\n      this._opacity.next(opacity);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this8 = this;\n\n      if (this._map._isBrowser) {\n        // The ground overlay setup is slightly different from the other Google Maps objects in that\n        // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n        // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n        this._bounds.pipe(takeUntil(this._destroyed)).subscribe(function (bounds) {\n          if (_this8.groundOverlay) {\n            _this8.groundOverlay.setMap(null);\n\n            _this8.groundOverlay = undefined;\n          } // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n\n\n          if (bounds) {\n            _this8._ngZone.runOutsideAngular(function () {\n              _this8.groundOverlay = new google.maps.GroundOverlay(_this8._url.getValue(), bounds, {\n                clickable: _this8.clickable,\n                opacity: _this8._opacity.value\n              });\n            });\n\n            _this8._assertInitialized();\n\n            _this8.groundOverlay.setMap(_this8._map.googleMap);\n\n            _this8._eventManager.setTarget(_this8.groundOverlay);\n          }\n        });\n\n        this._watchForOpacityChanges();\n\n        this._watchForUrlChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.groundOverlay) {\n        this.groundOverlay.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getBounds\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      this._assertInitialized();\n\n      return this.groundOverlay.getBounds();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getOpacity\n     */\n\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity() {\n      this._assertInitialized();\n\n      return this.groundOverlay.getOpacity();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/image-overlay\n     * #GroundOverlay.getUrl\n     */\n\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      this._assertInitialized();\n\n      return this.groundOverlay.getUrl();\n    }\n  }, {\n    key: \"_watchForOpacityChanges\",\n    value: function _watchForOpacityChanges() {\n      var _this9 = this;\n\n      this._opacity.pipe(takeUntil(this._destroyed)).subscribe(function (opacity) {\n        if (opacity != null) {\n          _this9._assertInitialized();\n\n          _this9.groundOverlay.setOpacity(opacity);\n        }\n      });\n    }\n  }, {\n    key: \"_watchForUrlChanges\",\n    value: function _watchForUrlChanges() {\n      var _this10 = this;\n\n      this._url.pipe(takeUntil(this._destroyed)).subscribe(function (url) {\n        _this10._assertInitialized();\n\n        var overlay = _this10.groundOverlay;\n        overlay.set('url', url); // Google Maps only redraws the overlay if we re-set the map.\n\n        overlay.setMap(null);\n        overlay.setMap(_this10._map.googleMap);\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.groundOverlay) {\n          throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' + 'Please wait for the GroundOverlay to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapGroundOverlay;\n}();\n\nMapGroundOverlay.Éµfac = function MapGroundOverlay_Factory(t) {\n  return new (t || MapGroundOverlay)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapGroundOverlay.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapGroundOverlay,\n  selectors: [[\"map-ground-overlay\"]],\n  inputs: {\n    clickable: \"clickable\",\n    url: \"url\",\n    bounds: \"bounds\",\n    opacity: \"opacity\"\n  },\n  outputs: {\n    mapClick: \"mapClick\",\n    mapDblclick: \"mapDblclick\"\n  },\n  exportAs: [\"mapGroundOverlay\"]\n});\n\nMapGroundOverlay.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapGroundOverlay.propDecorators = {\n  url: [{\n    type: Input\n  }],\n  bounds: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  opacity: [{\n    type: Input\n  }],\n  mapClick: [{\n    type: Output\n  }],\n  mapDblclick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapGroundOverlay, [{\n    type: Directive,\n    args: [{\n      selector: 'map-ground-overlay',\n      exportAs: 'mapGroundOverlay'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    clickable: [{\n      type: Input\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    url: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\n\n\nvar MapInfoWindow = /*#__PURE__*/function () {\n  function MapInfoWindow(_googleMap, _elementRef, _ngZone) {\n    _classCallCheck(this, MapInfoWindow);\n\n    this._googleMap = _googleMap;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._position = new BehaviorSubject(undefined);\n    this._destroy = new Subject();\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n     */\n\n    this.closeclick = this._eventManager.getLazyEmitter('closeclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.content_changed\n     */\n\n    this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n     */\n\n    this.domready = this._eventManager.getLazyEmitter('domready');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.position_changed\n     */\n\n    this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.zindex_changed\n     */\n\n    this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  }\n\n  _createClass(MapInfoWindow, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"position\",\n    set: function set(position) {\n      this._position.next(position);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this11 = this;\n\n      if (this._googleMap._isBrowser) {\n        var combinedOptionsChanges = this._combineOptions();\n\n        combinedOptionsChanges.pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this11._ngZone.runOutsideAngular(function () {\n            _this11.infoWindow = new google.maps.InfoWindow(options);\n          });\n\n          _this11._eventManager.setTarget(_this11.infoWindow);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForPositionChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroy.next();\n\n      this._destroy.complete(); // If no info window has been created on the server, we do not try closing it.\n      // On the server, an info window cannot be created and this would cause errors.\n\n\n      if (this.infoWindow) {\n        this.close();\n      }\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._assertInitialized();\n\n      this.infoWindow.close();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      this._assertInitialized();\n\n      return this.infoWindow.getContent();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window\n     * #InfoWindow.getPosition\n     */\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      this._assertInitialized();\n\n      return this.infoWindow.getPosition();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n     */\n\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      this._assertInitialized();\n\n      return this.infoWindow.getZIndex();\n    }\n    /**\n     * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n     * then the position property of the options input is used instead.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(anchor) {\n      this._assertInitialized();\n\n      var anchorObject = anchor ? anchor.getAnchor() : undefined; // Prevent the info window from initializing when trying to reopen on the same anchor.\n      // Note that when the window is opened for the first time, the anchor will always be\n      // undefined. If that's the case, we have to allow it to open in order to handle the\n      // case where the window doesn't have an anchor, but is placed at a particular position.\n\n      if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n        this._elementRef.nativeElement.style.display = '';\n        this.infoWindow.open(this._googleMap.googleMap, anchorObject);\n      }\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      var _this12 = this;\n\n      return combineLatest([this._options, this._position]).pipe(map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            options = _ref4[0],\n            position = _ref4[1];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          position: position || options.position,\n          content: _this12._elementRef.nativeElement\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this13 = this;\n\n      this._options.pipe(takeUntil(this._destroy)).subscribe(function (options) {\n        _this13._assertInitialized();\n\n        _this13.infoWindow.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_watchForPositionChanges\",\n    value: function _watchForPositionChanges() {\n      var _this14 = this;\n\n      this._position.pipe(takeUntil(this._destroy)).subscribe(function (position) {\n        if (position) {\n          _this14._assertInitialized();\n\n          _this14.infoWindow.setPosition(position);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._googleMap.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.infoWindow) {\n          throw Error('Cannot interact with a Google Map Info Window before it has been ' + 'initialized. Please wait for the Info Window to load before trying to interact with ' + 'it.');\n        }\n      }\n    }\n  }]);\n\n  return MapInfoWindow;\n}();\n\nMapInfoWindow.Éµfac = function MapInfoWindow_Factory(t) {\n  return new (t || MapInfoWindow)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapInfoWindow.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapInfoWindow,\n  selectors: [[\"map-info-window\"]],\n  hostAttrs: [2, \"display\", \"none\"],\n  inputs: {\n    options: \"options\",\n    position: \"position\"\n  },\n  outputs: {\n    closeclick: \"closeclick\",\n    contentChanged: \"contentChanged\",\n    domready: \"domready\",\n    positionChanged: \"positionChanged\",\n    zindexChanged: \"zindexChanged\"\n  },\n  exportAs: [\"mapInfoWindow\"]\n});\n\nMapInfoWindow.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nMapInfoWindow.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  position: [{\n    type: Input\n  }],\n  closeclick: [{\n    type: Output\n  }],\n  contentChanged: [{\n    type: Output\n  }],\n  domready: [{\n    type: Output\n  }],\n  positionChanged: [{\n    type: Output\n  }],\n  zindexChanged: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapInfoWindow, [{\n    type: Directive,\n    args: [{\n      selector: 'map-info-window',\n      exportAs: 'mapInfoWindow',\n      host: {\n        'style': 'display: none'\n      }\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    closeclick: [{\n      type: Output\n    }],\n    contentChanged: [{\n      type: Output\n    }],\n    domready: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\n\n\nvar MapKmlLayer = /*#__PURE__*/function () {\n  function MapKmlLayer(_map, _ngZone) {\n    _classCallCheck(this, MapKmlLayer);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._url = new BehaviorSubject('');\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n     */\n\n    this.kmlClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/kml\n     * #KmlLayer.defaultviewport_changed\n     */\n\n    this.defaultviewportChanged = this._eventManager.getLazyEmitter('defaultviewport_changed');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n     */\n\n    this.statusChanged = this._eventManager.getLazyEmitter('status_changed');\n  }\n\n  _createClass(MapKmlLayer, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"url\",\n    set: function set(url) {\n      this._url.next(url);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this15 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this15._ngZone.runOutsideAngular(function () {\n            return _this15.kmlLayer = new google.maps.KmlLayer(options);\n          });\n\n          _this15._assertInitialized();\n\n          _this15.kmlLayer.setMap(_this15._map.googleMap);\n\n          _this15._eventManager.setTarget(_this15.kmlLayer);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForUrlChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.kmlLayer) {\n        this.kmlLayer.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n     */\n\n  }, {\n    key: \"getDefaultViewport\",\n    value: function getDefaultViewport() {\n      this._assertInitialized();\n\n      return this.kmlLayer.getDefaultViewport();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      this._assertInitialized();\n\n      return this.kmlLayer.getMetadata();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n     */\n\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      this._assertInitialized();\n\n      return this.kmlLayer.getStatus();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n     */\n\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      this._assertInitialized();\n\n      return this.kmlLayer.getUrl();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n     */\n\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      this._assertInitialized();\n\n      return this.kmlLayer.getZIndex();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return combineLatest([this._options, this._url]).pipe(map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            options = _ref6[0],\n            url = _ref6[1];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          url: url || options.url\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this16 = this;\n\n      this._options.pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        if (_this16.kmlLayer) {\n          _this16._assertInitialized();\n\n          _this16.kmlLayer.setOptions(options);\n        }\n      });\n    }\n  }, {\n    key: \"_watchForUrlChanges\",\n    value: function _watchForUrlChanges() {\n      var _this17 = this;\n\n      this._url.pipe(takeUntil(this._destroyed)).subscribe(function (url) {\n        if (url && _this17.kmlLayer) {\n          _this17._assertInitialized();\n\n          _this17.kmlLayer.setUrl(url);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.kmlLayer) {\n          throw Error('Cannot interact with a Google Map KmlLayer before it has been ' + 'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapKmlLayer;\n}();\n\nMapKmlLayer.Éµfac = function MapKmlLayer_Factory(t) {\n  return new (t || MapKmlLayer)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapKmlLayer.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapKmlLayer,\n  selectors: [[\"map-kml-layer\"]],\n  inputs: {\n    options: \"options\",\n    url: \"url\"\n  },\n  outputs: {\n    kmlClick: \"kmlClick\",\n    defaultviewportChanged: \"defaultviewportChanged\",\n    statusChanged: \"statusChanged\"\n  },\n  exportAs: [\"mapKmlLayer\"]\n});\n\nMapKmlLayer.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapKmlLayer.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  url: [{\n    type: Input\n  }],\n  kmlClick: [{\n    type: Output\n  }],\n  defaultviewportChanged: [{\n    type: Output\n  }],\n  statusChanged: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapKmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-kml-layer',\n      exportAs: 'mapKmlLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    kmlClick: [{\n      type: Output\n    }],\n    defaultviewportChanged: [{\n      type: Output\n    }],\n    statusChanged: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\n\n\nvar DEFAULT_MARKER_OPTIONS = {\n  position: {\n    lat: 37.421995,\n    lng: -122.084092\n  }\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\n\nvar MapMarker = /*#__PURE__*/function () {\n  function MapMarker(_googleMap, _ngZone) {\n    _classCallCheck(this, MapMarker);\n\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n     */\n\n    this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n     */\n\n    this.mapClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n     */\n\n    this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n     */\n\n    this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n     */\n\n    this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n     */\n\n    this.mapDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n     */\n\n    this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n     */\n\n    this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n     */\n\n    this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n     */\n\n    this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n     */\n\n    this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n     */\n\n    this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n     */\n\n    this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n     */\n\n    this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n     */\n\n    this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n     */\n\n    this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n     */\n\n    this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n     */\n\n    this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n     */\n\n    this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n     */\n\n    this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n     */\n\n    this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n  }\n  /**\n   * Title of the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n   */\n\n\n  _createClass(MapMarker, [{\n    key: \"title\",\n    set: function set(title) {\n      this._title = title;\n    }\n    /**\n     * Position of the marker. See:\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n     */\n\n  }, {\n    key: \"position\",\n    set: function set(position) {\n      this._position = position;\n    }\n    /**\n     * Label for the marker.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n     */\n\n  }, {\n    key: \"label\",\n    set: function set(label) {\n      this._label = label;\n    }\n    /**\n     * Whether the marker is clickable. See:\n     * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n     */\n\n  }, {\n    key: \"clickable\",\n    set: function set(clickable) {\n      this._clickable = clickable;\n    }\n    /**\n     * Options used to configure the marker.\n     * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n     */\n\n  }, {\n    key: \"options\",\n    set: function set(options) {\n      this._options = options;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this18 = this;\n\n      if (this._googleMap._isBrowser) {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(function () {\n          _this18.marker = new google.maps.Marker(_this18._combineOptions());\n        });\n\n        this._assertInitialized();\n\n        this.marker.setMap(this._googleMap.googleMap);\n\n        this._eventManager.setTarget(this.marker);\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var marker = this.marker,\n          _title = this._title,\n          _position = this._position,\n          _label = this._label,\n          _clickable = this._clickable;\n\n      if (marker) {\n        if (changes['options']) {\n          marker.setOptions(this._combineOptions());\n        }\n\n        if (changes['title'] && _title !== undefined) {\n          marker.setTitle(_title);\n        }\n\n        if (changes['position'] && _position) {\n          marker.setPosition(_position);\n        }\n\n        if (changes['label'] && _label !== undefined) {\n          marker.setLabel(_label);\n        }\n\n        if (changes['clickable'] && _clickable !== undefined) {\n          marker.setClickable(_clickable);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      if (this.marker) {\n        this.marker.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n     */\n\n  }, {\n    key: \"getAnimation\",\n    value: function getAnimation() {\n      this._assertInitialized();\n\n      return this.marker.getAnimation() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n     */\n\n  }, {\n    key: \"getClickable\",\n    value: function getClickable() {\n      this._assertInitialized();\n\n      return this.marker.getClickable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n     */\n\n  }, {\n    key: \"getCursor\",\n    value: function getCursor() {\n      this._assertInitialized();\n\n      return this.marker.getCursor() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n     */\n\n  }, {\n    key: \"getDraggable\",\n    value: function getDraggable() {\n      this._assertInitialized();\n\n      return !!this.marker.getDraggable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n     */\n\n  }, {\n    key: \"getIcon\",\n    value: function getIcon() {\n      this._assertInitialized();\n\n      return this.marker.getIcon() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n     */\n\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      this._assertInitialized();\n\n      return this.marker.getLabel() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n     */\n\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity() {\n      this._assertInitialized();\n\n      return this.marker.getOpacity() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n     */\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      this._assertInitialized();\n\n      return this.marker.getPosition() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n     */\n\n  }, {\n    key: \"getShape\",\n    value: function getShape() {\n      this._assertInitialized();\n\n      return this.marker.getShape() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n     */\n\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      this._assertInitialized();\n\n      return this.marker.getTitle() || null;\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      this._assertInitialized();\n\n      return this.marker.getVisible();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n     */\n\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      this._assertInitialized();\n\n      return this.marker.getZIndex() || null;\n    }\n    /** Gets the anchor point that can be used to attach other Google Maps objects. */\n\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      this._assertInitialized();\n\n      return this.marker;\n    }\n    /** Creates a combined options object using the passed-in options and the individual inputs. */\n\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      var options = this._options || DEFAULT_MARKER_OPTIONS;\n      return Object.assign(Object.assign({}, options), {\n        title: this._title || options.title,\n        position: this._position || options.position,\n        label: this._label || options.label,\n        clickable: this._clickable !== undefined ? this._clickable : options.clickable,\n        map: this._googleMap.googleMap\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._googleMap.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.marker) {\n          throw Error('Cannot interact with a Google Map Marker before it has been ' + 'initialized. Please wait for the Marker to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapMarker;\n}();\n\nMapMarker.Éµfac = function MapMarker_Factory(t) {\n  return new (t || MapMarker)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapMarker.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapMarker,\n  selectors: [[\"map-marker\"]],\n  inputs: {\n    title: \"title\",\n    position: \"position\",\n    label: \"label\",\n    clickable: \"clickable\",\n    options: \"options\"\n  },\n  outputs: {\n    animationChanged: \"animationChanged\",\n    mapClick: \"mapClick\",\n    clickableChanged: \"clickableChanged\",\n    cursorChanged: \"cursorChanged\",\n    mapDblclick: \"mapDblclick\",\n    mapDrag: \"mapDrag\",\n    mapDragend: \"mapDragend\",\n    draggableChanged: \"draggableChanged\",\n    mapDragstart: \"mapDragstart\",\n    flatChanged: \"flatChanged\",\n    iconChanged: \"iconChanged\",\n    mapMousedown: \"mapMousedown\",\n    mapMouseout: \"mapMouseout\",\n    mapMouseover: \"mapMouseover\",\n    mapMouseup: \"mapMouseup\",\n    positionChanged: \"positionChanged\",\n    mapRightclick: \"mapRightclick\",\n    shapeChanged: \"shapeChanged\",\n    titleChanged: \"titleChanged\",\n    visibleChanged: \"visibleChanged\",\n    zindexChanged: \"zindexChanged\"\n  },\n  exportAs: [\"mapMarker\"],\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n});\n\nMapMarker.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapMarker.propDecorators = {\n  title: [{\n    type: Input\n  }],\n  position: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  clickable: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  animationChanged: [{\n    type: Output\n  }],\n  mapClick: [{\n    type: Output\n  }],\n  clickableChanged: [{\n    type: Output\n  }],\n  cursorChanged: [{\n    type: Output\n  }],\n  mapDblclick: [{\n    type: Output\n  }],\n  mapDrag: [{\n    type: Output\n  }],\n  mapDragend: [{\n    type: Output\n  }],\n  draggableChanged: [{\n    type: Output\n  }],\n  mapDragstart: [{\n    type: Output\n  }],\n  flatChanged: [{\n    type: Output\n  }],\n  iconChanged: [{\n    type: Output\n  }],\n  mapMousedown: [{\n    type: Output\n  }],\n  mapMouseout: [{\n    type: Output\n  }],\n  mapMouseover: [{\n    type: Output\n  }],\n  mapMouseup: [{\n    type: Output\n  }],\n  positionChanged: [{\n    type: Output\n  }],\n  mapRightclick: [{\n    type: Output\n  }],\n  shapeChanged: [{\n    type: Output\n  }],\n  titleChanged: [{\n    type: Output\n  }],\n  visibleChanged: [{\n    type: Output\n  }],\n  zindexChanged: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapMarker, [{\n    type: Directive,\n    args: [{\n      selector: 'map-marker',\n      exportAs: 'mapMarker'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    animationChanged: [{\n      type: Output\n    }],\n    mapClick: [{\n      type: Output\n    }],\n    clickableChanged: [{\n      type: Output\n    }],\n    cursorChanged: [{\n      type: Output\n    }],\n    mapDblclick: [{\n      type: Output\n    }],\n    mapDrag: [{\n      type: Output\n    }],\n    mapDragend: [{\n      type: Output\n    }],\n    draggableChanged: [{\n      type: Output\n    }],\n    mapDragstart: [{\n      type: Output\n    }],\n    flatChanged: [{\n      type: Output\n    }],\n    iconChanged: [{\n      type: Output\n    }],\n    mapMousedown: [{\n      type: Output\n    }],\n    mapMouseout: [{\n      type: Output\n    }],\n    mapMouseover: [{\n      type: Output\n    }],\n    mapMouseup: [{\n      type: Output\n    }],\n    positionChanged: [{\n      type: Output\n    }],\n    mapRightclick: [{\n      type: Output\n    }],\n    shapeChanged: [{\n      type: Output\n    }],\n    titleChanged: [{\n      type: Output\n    }],\n    visibleChanged: [{\n      type: Output\n    }],\n    zindexChanged: [{\n      type: Output\n    }],\n    title: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    clickable: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\n\n\nvar MapMarkerClusterer = /*#__PURE__*/function () {\n  function MapMarkerClusterer(_googleMap, _ngZone) {\n    _classCallCheck(this, MapMarkerClusterer);\n\n    this._googleMap = _googleMap;\n    this._ngZone = _ngZone;\n    this._currentMarkers = new Set();\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._destroy = new Subject();\n\n    this.ariaLabelFn = function () {\n      return '';\n    };\n    /**\n     * See\n     * googlemaps.github.io/v3-utility-library/modules/\n     * _google_markerclustererplus.html#clusteringbegin\n     */\n\n\n    this.clusteringbegin = this._eventManager.getLazyEmitter('clusteringbegin');\n    /**\n     * See\n     * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n     */\n\n    this.clusteringend = this._eventManager.getLazyEmitter('clusteringend');\n    this._canInitialize = this._googleMap._isBrowser;\n  }\n\n  _createClass(MapMarkerClusterer, [{\n    key: \"averageCenter\",\n    set: function set(averageCenter) {\n      this._averageCenter = averageCenter;\n    }\n  }, {\n    key: \"batchSizeIE\",\n    set: function set(batchSizeIE) {\n      this._batchSizeIE = batchSizeIE;\n    }\n  }, {\n    key: \"calculator\",\n    set: function set(calculator) {\n      this._calculator = calculator;\n    }\n  }, {\n    key: \"clusterClass\",\n    set: function set(clusterClass) {\n      this._clusterClass = clusterClass;\n    }\n  }, {\n    key: \"enableRetinaIcons\",\n    set: function set(enableRetinaIcons) {\n      this._enableRetinaIcons = enableRetinaIcons;\n    }\n  }, {\n    key: \"gridSize\",\n    set: function set(gridSize) {\n      this._gridSize = gridSize;\n    }\n  }, {\n    key: \"ignoreHidden\",\n    set: function set(ignoreHidden) {\n      this._ignoreHidden = ignoreHidden;\n    }\n  }, {\n    key: \"imageExtension\",\n    set: function set(imageExtension) {\n      this._imageExtension = imageExtension;\n    }\n  }, {\n    key: \"imagePath\",\n    set: function set(imagePath) {\n      this._imagePath = imagePath;\n    }\n  }, {\n    key: \"imageSizes\",\n    set: function set(imageSizes) {\n      this._imageSizes = imageSizes;\n    }\n  }, {\n    key: \"maxZoom\",\n    set: function set(maxZoom) {\n      this._maxZoom = maxZoom;\n    }\n  }, {\n    key: \"minimumClusterSize\",\n    set: function set(minimumClusterSize) {\n      this._minimumClusterSize = minimumClusterSize;\n    }\n  }, {\n    key: \"styles\",\n    set: function set(styles) {\n      this._styles = styles;\n    }\n  }, {\n    key: \"title\",\n    set: function set(title) {\n      this._title = title;\n    }\n  }, {\n    key: \"zIndex\",\n    set: function set(zIndex) {\n      this._zIndex = zIndex;\n    }\n  }, {\n    key: \"zoomOnClick\",\n    set: function set(zoomOnClick) {\n      this._zoomOnClick = zoomOnClick;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this19 = this;\n\n      if (this._canInitialize) {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(function () {\n          _this19.markerClusterer = new MarkerClusterer(_this19._googleMap.googleMap, [], _this19._combineOptions());\n        });\n\n        this._assertInitialized();\n\n        this._eventManager.setTarget(this.markerClusterer);\n      }\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      if (this._canInitialize) {\n        this._watchForMarkerChanges();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var clusterer = this.markerClusterer,\n          ariaLabelFn = this.ariaLabelFn,\n          _averageCenter = this._averageCenter,\n          _batchSizeIE = this._batchSizeIE,\n          _calculator = this._calculator,\n          _styles = this._styles,\n          _clusterClass = this._clusterClass,\n          _enableRetinaIcons = this._enableRetinaIcons,\n          _gridSize = this._gridSize,\n          _ignoreHidden = this._ignoreHidden,\n          _imageExtension = this._imageExtension,\n          _imagePath = this._imagePath,\n          _imageSizes = this._imageSizes,\n          _maxZoom = this._maxZoom,\n          _minimumClusterSize = this._minimumClusterSize,\n          _title = this._title,\n          _zIndex = this._zIndex,\n          _zoomOnClick = this._zoomOnClick;\n\n      if (clusterer) {\n        if (changes['ariaLabelFn']) {\n          clusterer.ariaLabelFn = ariaLabelFn;\n        }\n\n        if (changes['averageCenter'] && _averageCenter !== undefined) {\n          clusterer.setAverageCenter(_averageCenter);\n        }\n\n        if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n          clusterer.setBatchSizeIE(_batchSizeIE);\n        }\n\n        if (changes['calculator'] && _calculator) {\n          clusterer.setCalculator(_calculator);\n        }\n\n        if (changes['clusterClass'] && _clusterClass !== undefined) {\n          clusterer.setClusterClass(_clusterClass);\n        }\n\n        if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n          clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n        }\n\n        if (changes['gridSize'] && _gridSize !== undefined) {\n          clusterer.setGridSize(_gridSize);\n        }\n\n        if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n          clusterer.setIgnoreHidden(_ignoreHidden);\n        }\n\n        if (changes['imageExtension'] && _imageExtension !== undefined) {\n          clusterer.setImageExtension(_imageExtension);\n        }\n\n        if (changes['imagePath'] && _imagePath !== undefined) {\n          clusterer.setImagePath(_imagePath);\n        }\n\n        if (changes['imageSizes'] && _imageSizes) {\n          clusterer.setImageSizes(_imageSizes);\n        }\n\n        if (changes['maxZoom'] && _maxZoom !== undefined) {\n          clusterer.setMaxZoom(_maxZoom);\n        }\n\n        if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n          clusterer.setMinimumClusterSize(_minimumClusterSize);\n        }\n\n        if (changes['styles'] && _styles) {\n          clusterer.setStyles(_styles);\n        }\n\n        if (changes['title'] && _title !== undefined) {\n          clusterer.setTitle(_title);\n        }\n\n        if (changes['zIndex'] && _zIndex !== undefined) {\n          clusterer.setZIndex(_zIndex);\n        }\n\n        if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n          clusterer.setZoomOnClick(_zoomOnClick);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this._eventManager.destroy();\n\n      if (this.markerClusterer) {\n        this.markerClusterer.setMap(null);\n      }\n    }\n  }, {\n    key: \"fitMapToMarkers\",\n    value: function fitMapToMarkers(padding) {\n      this._assertInitialized();\n\n      this.markerClusterer.fitMapToMarkers(padding);\n    }\n  }, {\n    key: \"getAverageCenter\",\n    value: function getAverageCenter() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getAverageCenter();\n    }\n  }, {\n    key: \"getBatchSizeIE\",\n    value: function getBatchSizeIE() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getBatchSizeIE();\n    }\n  }, {\n    key: \"getCalculator\",\n    value: function getCalculator() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getCalculator();\n    }\n  }, {\n    key: \"getClusterClass\",\n    value: function getClusterClass() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getClusterClass();\n    }\n  }, {\n    key: \"getClusters\",\n    value: function getClusters() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getClusters();\n    }\n  }, {\n    key: \"getEnableRetinaIcons\",\n    value: function getEnableRetinaIcons() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getEnableRetinaIcons();\n    }\n  }, {\n    key: \"getGridSize\",\n    value: function getGridSize() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getGridSize();\n    }\n  }, {\n    key: \"getIgnoreHidden\",\n    value: function getIgnoreHidden() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getIgnoreHidden();\n    }\n  }, {\n    key: \"getImageExtension\",\n    value: function getImageExtension() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getImageExtension();\n    }\n  }, {\n    key: \"getImagePath\",\n    value: function getImagePath() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getImagePath();\n    }\n  }, {\n    key: \"getImageSizes\",\n    value: function getImageSizes() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getImageSizes();\n    }\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getMaxZoom();\n    }\n  }, {\n    key: \"getMinimumClusterSize\",\n    value: function getMinimumClusterSize() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getMinimumClusterSize();\n    }\n  }, {\n    key: \"getStyles\",\n    value: function getStyles() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getStyles();\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getTitle();\n    }\n  }, {\n    key: \"getTotalClusters\",\n    value: function getTotalClusters() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getTotalClusters();\n    }\n  }, {\n    key: \"getTotalMarkers\",\n    value: function getTotalMarkers() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getTotalMarkers();\n    }\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getZIndex();\n    }\n  }, {\n    key: \"getZoomOnClick\",\n    value: function getZoomOnClick() {\n      this._assertInitialized();\n\n      return this.markerClusterer.getZoomOnClick();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return {\n        ariaLabelFn: this.ariaLabelFn,\n        averageCenter: this._averageCenter,\n        batchSize: this.batchSize,\n        batchSizeIE: this._batchSizeIE,\n        calculator: this._calculator,\n        clusterClass: this._clusterClass,\n        enableRetinaIcons: this._enableRetinaIcons,\n        gridSize: this._gridSize,\n        ignoreHidden: this._ignoreHidden,\n        imageExtension: this._imageExtension,\n        imagePath: this._imagePath,\n        imageSizes: this._imageSizes,\n        maxZoom: this._maxZoom,\n        minimumClusterSize: this._minimumClusterSize,\n        styles: this._styles,\n        title: this._title,\n        zIndex: this._zIndex,\n        zoomOnClick: this._zoomOnClick\n      };\n    }\n  }, {\n    key: \"_watchForMarkerChanges\",\n    value: function _watchForMarkerChanges() {\n      var _this20 = this;\n\n      this._assertInitialized();\n\n      var initialMarkers = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this._getInternalMarkers(this._markers.toArray())),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var marker = _step2.value;\n\n          this._currentMarkers.add(marker);\n\n          initialMarkers.push(marker);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.markerClusterer.addMarkers(initialMarkers);\n\n      this._markers.changes.pipe(takeUntil(this._destroy)).subscribe(function (markerComponents) {\n        _this20._assertInitialized();\n\n        var newMarkers = new Set(_this20._getInternalMarkers(markerComponents));\n        var markersToAdd = [];\n        var markersToRemove = [];\n\n        for (var _i = 0, _Array$from = Array.from(newMarkers); _i < _Array$from.length; _i++) {\n          var marker = _Array$from[_i];\n\n          if (!_this20._currentMarkers.has(marker)) {\n            _this20._currentMarkers.add(marker);\n\n            markersToAdd.push(marker);\n          }\n        }\n\n        for (var _i2 = 0, _Array$from2 = Array.from(_this20._currentMarkers); _i2 < _Array$from2.length; _i2++) {\n          var _marker = _Array$from2[_i2];\n\n          if (!newMarkers.has(_marker)) {\n            markersToRemove.push(_marker);\n          }\n        }\n\n        _this20.markerClusterer.addMarkers(markersToAdd, true);\n\n        _this20.markerClusterer.removeMarkers(markersToRemove, true);\n\n        _this20.markerClusterer.repaint();\n\n        for (var _i3 = 0, _markersToRemove = markersToRemove; _i3 < _markersToRemove.length; _i3++) {\n          var _marker2 = _markersToRemove[_i3];\n\n          _this20._currentMarkers.delete(_marker2);\n        }\n      });\n    }\n  }, {\n    key: \"_getInternalMarkers\",\n    value: function _getInternalMarkers(markers) {\n      return markers.filter(function (markerComponent) {\n        return !!markerComponent.marker;\n      }).map(function (markerComponent) {\n        return markerComponent.marker;\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._googleMap.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.markerClusterer) {\n          throw Error('Cannot interact with a MarkerClusterer before it has been initialized. ' + 'Please wait for the MarkerClusterer to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapMarkerClusterer;\n}();\n\nMapMarkerClusterer.Éµfac = function MapMarkerClusterer_Factory(t) {\n  return new (t || MapMarkerClusterer)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapMarkerClusterer.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({\n  type: MapMarkerClusterer,\n  selectors: [[\"map-marker-clusterer\"]],\n  contentQueries: function MapMarkerClusterer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµcontentQuery(dirIndex, MapMarker, 1);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx._markers = _t);\n    }\n  },\n  inputs: {\n    ariaLabelFn: \"ariaLabelFn\",\n    averageCenter: \"averageCenter\",\n    batchSizeIE: \"batchSizeIE\",\n    calculator: \"calculator\",\n    clusterClass: \"clusterClass\",\n    enableRetinaIcons: \"enableRetinaIcons\",\n    gridSize: \"gridSize\",\n    ignoreHidden: \"ignoreHidden\",\n    imageExtension: \"imageExtension\",\n    imagePath: \"imagePath\",\n    imageSizes: \"imageSizes\",\n    maxZoom: \"maxZoom\",\n    minimumClusterSize: \"minimumClusterSize\",\n    styles: \"styles\",\n    title: \"title\",\n    zIndex: \"zIndex\",\n    zoomOnClick: \"zoomOnClick\",\n    batchSize: \"batchSize\"\n  },\n  outputs: {\n    clusteringbegin: \"clusteringbegin\",\n    clusteringend: \"clusteringend\"\n  },\n  exportAs: [\"mapMarkerClusterer\"],\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MapMarkerClusterer_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµprojectionDef();\n      Éµngcc0.ÉµÉµprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMapMarkerClusterer.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapMarkerClusterer.propDecorators = {\n  ariaLabelFn: [{\n    type: Input\n  }],\n  averageCenter: [{\n    type: Input\n  }],\n  batchSize: [{\n    type: Input\n  }],\n  batchSizeIE: [{\n    type: Input\n  }],\n  calculator: [{\n    type: Input\n  }],\n  clusterClass: [{\n    type: Input\n  }],\n  enableRetinaIcons: [{\n    type: Input\n  }],\n  gridSize: [{\n    type: Input\n  }],\n  ignoreHidden: [{\n    type: Input\n  }],\n  imageExtension: [{\n    type: Input\n  }],\n  imagePath: [{\n    type: Input\n  }],\n  imageSizes: [{\n    type: Input\n  }],\n  maxZoom: [{\n    type: Input\n  }],\n  minimumClusterSize: [{\n    type: Input\n  }],\n  styles: [{\n    type: Input\n  }],\n  title: [{\n    type: Input\n  }],\n  zIndex: [{\n    type: Input\n  }],\n  zoomOnClick: [{\n    type: Input\n  }],\n  clusteringbegin: [{\n    type: Output\n  }],\n  clusteringend: [{\n    type: Output\n  }],\n  _markers: [{\n    type: ContentChildren,\n    args: [MapMarker, {\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapMarkerClusterer, [{\n    type: Component,\n    args: [{\n      selector: 'map-marker-clusterer',\n      exportAs: 'mapMarkerClusterer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: '<ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    ariaLabelFn: [{\n      type: Input\n    }],\n    clusteringbegin: [{\n      type: Output\n    }],\n    clusteringend: [{\n      type: Output\n    }],\n    averageCenter: [{\n      type: Input\n    }],\n    batchSizeIE: [{\n      type: Input\n    }],\n    calculator: [{\n      type: Input\n    }],\n    clusterClass: [{\n      type: Input\n    }],\n    enableRetinaIcons: [{\n      type: Input\n    }],\n    gridSize: [{\n      type: Input\n    }],\n    ignoreHidden: [{\n      type: Input\n    }],\n    imageExtension: [{\n      type: Input\n    }],\n    imagePath: [{\n      type: Input\n    }],\n    imageSizes: [{\n      type: Input\n    }],\n    maxZoom: [{\n      type: Input\n    }],\n    minimumClusterSize: [{\n      type: Input\n    }],\n    styles: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    zoomOnClick: [{\n      type: Input\n    }],\n    batchSize: [{\n      type: Input\n    }],\n    _markers: [{\n      type: ContentChildren,\n      args: [MapMarker, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\n\n\nvar MapPolygon = /*#__PURE__*/function () {\n  function MapPolygon(_map, _ngZone) {\n    _classCallCheck(this, MapPolygon);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._paths = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n     */\n\n    this.polygonClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n     */\n\n    this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n     */\n\n    this.polygonDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n     */\n\n    this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n     */\n\n    this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n     */\n\n    this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n     */\n\n    this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n     */\n\n    this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n     */\n\n    this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n     */\n\n    this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n     */\n\n    this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  _createClass(MapPolygon, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"paths\",\n    set: function set(paths) {\n      this._paths.next(paths);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this21 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this21._ngZone.runOutsideAngular(function () {\n            _this21.polygon = new google.maps.Polygon(options);\n          });\n\n          _this21._assertInitialized();\n\n          _this21.polygon.setMap(_this21._map.googleMap);\n\n          _this21._eventManager.setTarget(_this21.polygon);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForPathChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.polygon) {\n        this.polygon.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n     */\n\n  }, {\n    key: \"getDraggable\",\n    value: function getDraggable() {\n      this._assertInitialized();\n\n      return this.polygon.getDraggable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n     */\n\n  }, {\n    key: \"getEditable\",\n    value: function getEditable() {\n      this._assertInitialized();\n\n      return this.polygon.getEditable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n     */\n\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      this._assertInitialized();\n\n      return this.polygon.getPath();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n     */\n\n  }, {\n    key: \"getPaths\",\n    value: function getPaths() {\n      this._assertInitialized();\n\n      return this.polygon.getPaths();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      this._assertInitialized();\n\n      return this.polygon.getVisible();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return combineLatest([this._options, this._paths]).pipe(map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            options = _ref8[0],\n            paths = _ref8[1];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          paths: paths || options.paths\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this22 = this;\n\n      this._options.pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        _this22._assertInitialized();\n\n        _this22.polygon.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_watchForPathChanges\",\n    value: function _watchForPathChanges() {\n      var _this23 = this;\n\n      this._paths.pipe(takeUntil(this._destroyed)).subscribe(function (paths) {\n        if (paths) {\n          _this23._assertInitialized();\n\n          _this23.polygon.setPaths(paths);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.polygon) {\n          throw Error('Cannot interact with a Google Map Polygon before it has been ' + 'initialized. Please wait for the Polygon to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapPolygon;\n}();\n\nMapPolygon.Éµfac = function MapPolygon_Factory(t) {\n  return new (t || MapPolygon)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapPolygon.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapPolygon,\n  selectors: [[\"map-polygon\"]],\n  inputs: {\n    options: \"options\",\n    paths: \"paths\"\n  },\n  outputs: {\n    polygonClick: \"polygonClick\",\n    polygonDblclick: \"polygonDblclick\",\n    polygonDrag: \"polygonDrag\",\n    polygonDragend: \"polygonDragend\",\n    polygonDragstart: \"polygonDragstart\",\n    polygonMousedown: \"polygonMousedown\",\n    polygonMousemove: \"polygonMousemove\",\n    polygonMouseout: \"polygonMouseout\",\n    polygonMouseover: \"polygonMouseover\",\n    polygonMouseup: \"polygonMouseup\",\n    polygonRightclick: \"polygonRightclick\"\n  },\n  exportAs: [\"mapPolygon\"]\n});\n\nMapPolygon.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapPolygon.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  paths: [{\n    type: Input\n  }],\n  polygonClick: [{\n    type: Output\n  }],\n  polygonDblclick: [{\n    type: Output\n  }],\n  polygonDrag: [{\n    type: Output\n  }],\n  polygonDragend: [{\n    type: Output\n  }],\n  polygonDragstart: [{\n    type: Output\n  }],\n  polygonMousedown: [{\n    type: Output\n  }],\n  polygonMousemove: [{\n    type: Output\n  }],\n  polygonMouseout: [{\n    type: Output\n  }],\n  polygonMouseover: [{\n    type: Output\n  }],\n  polygonMouseup: [{\n    type: Output\n  }],\n  polygonRightclick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapPolygon, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polygon',\n      exportAs: 'mapPolygon'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    polygonClick: [{\n      type: Output\n    }],\n    polygonDblclick: [{\n      type: Output\n    }],\n    polygonDrag: [{\n      type: Output\n    }],\n    polygonDragend: [{\n      type: Output\n    }],\n    polygonDragstart: [{\n      type: Output\n    }],\n    polygonMousedown: [{\n      type: Output\n    }],\n    polygonMousemove: [{\n      type: Output\n    }],\n    polygonMouseout: [{\n      type: Output\n    }],\n    polygonMouseover: [{\n      type: Output\n    }],\n    polygonMouseup: [{\n      type: Output\n    }],\n    polygonRightclick: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    paths: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\n\n\nvar MapPolyline = /*#__PURE__*/function () {\n  function MapPolyline(_map, _ngZone) {\n    _classCallCheck(this, MapPolyline);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._path = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n     */\n\n    this.polylineClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n     */\n\n    this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n     */\n\n    this.polylineDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n     */\n\n    this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n     */\n\n    this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n     */\n\n    this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n     */\n\n    this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n     */\n\n    this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n     */\n\n    this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n     */\n\n    this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n     */\n\n    this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  _createClass(MapPolyline, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"path\",\n    set: function set(path) {\n      this._path.next(path);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this24 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this24._ngZone.runOutsideAngular(function () {\n            return _this24.polyline = new google.maps.Polyline(options);\n          });\n\n          _this24._assertInitialized();\n\n          _this24.polyline.setMap(_this24._map.googleMap);\n\n          _this24._eventManager.setTarget(_this24.polyline);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForPathChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.polyline) {\n        this.polyline.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n     */\n\n  }, {\n    key: \"getDraggable\",\n    value: function getDraggable() {\n      this._assertInitialized();\n\n      return this.polyline.getDraggable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n     */\n\n  }, {\n    key: \"getEditable\",\n    value: function getEditable() {\n      this._assertInitialized();\n\n      return this.polyline.getEditable();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n     */\n\n  }, {\n    key: \"getPath\",\n    value: function getPath() {\n      this._assertInitialized();\n\n      return this.polyline.getPath();\n    }\n    /**\n     * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      this._assertInitialized();\n\n      return this.polyline.getVisible();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return combineLatest([this._options, this._path]).pipe(map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            options = _ref10[0],\n            path = _ref10[1];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          path: path || options.path\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this25 = this;\n\n      this._options.pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        _this25._assertInitialized();\n\n        _this25.polyline.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_watchForPathChanges\",\n    value: function _watchForPathChanges() {\n      var _this26 = this;\n\n      this._path.pipe(takeUntil(this._destroyed)).subscribe(function (path) {\n        if (path) {\n          _this26._assertInitialized();\n\n          _this26.polyline.setPath(path);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.polyline) {\n          throw Error('Cannot interact with a Google Map Polyline before it has been ' + 'initialized. Please wait for the Polyline to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapPolyline;\n}();\n\nMapPolyline.Éµfac = function MapPolyline_Factory(t) {\n  return new (t || MapPolyline)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapPolyline.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapPolyline,\n  selectors: [[\"map-polyline\"]],\n  inputs: {\n    options: \"options\",\n    path: \"path\"\n  },\n  outputs: {\n    polylineClick: \"polylineClick\",\n    polylineDblclick: \"polylineDblclick\",\n    polylineDrag: \"polylineDrag\",\n    polylineDragend: \"polylineDragend\",\n    polylineDragstart: \"polylineDragstart\",\n    polylineMousedown: \"polylineMousedown\",\n    polylineMousemove: \"polylineMousemove\",\n    polylineMouseout: \"polylineMouseout\",\n    polylineMouseover: \"polylineMouseover\",\n    polylineMouseup: \"polylineMouseup\",\n    polylineRightclick: \"polylineRightclick\"\n  },\n  exportAs: [\"mapPolyline\"]\n});\n\nMapPolyline.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapPolyline.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  path: [{\n    type: Input\n  }],\n  polylineClick: [{\n    type: Output\n  }],\n  polylineDblclick: [{\n    type: Output\n  }],\n  polylineDrag: [{\n    type: Output\n  }],\n  polylineDragend: [{\n    type: Output\n  }],\n  polylineDragstart: [{\n    type: Output\n  }],\n  polylineMousedown: [{\n    type: Output\n  }],\n  polylineMousemove: [{\n    type: Output\n  }],\n  polylineMouseout: [{\n    type: Output\n  }],\n  polylineMouseover: [{\n    type: Output\n  }],\n  polylineMouseup: [{\n    type: Output\n  }],\n  polylineRightclick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapPolyline, [{\n    type: Directive,\n    args: [{\n      selector: 'map-polyline',\n      exportAs: 'mapPolyline'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    polylineClick: [{\n      type: Output\n    }],\n    polylineDblclick: [{\n      type: Output\n    }],\n    polylineDrag: [{\n      type: Output\n    }],\n    polylineDragend: [{\n      type: Output\n    }],\n    polylineDragstart: [{\n      type: Output\n    }],\n    polylineMousedown: [{\n      type: Output\n    }],\n    polylineMousemove: [{\n      type: Output\n    }],\n    polylineMouseout: [{\n      type: Output\n    }],\n    polylineMouseover: [{\n      type: Output\n    }],\n    polylineMouseup: [{\n      type: Output\n    }],\n    polylineRightclick: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\n\n\nvar MapRectangle = /*#__PURE__*/function () {\n  function MapRectangle(_map, _ngZone) {\n    _classCallCheck(this, MapRectangle);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._eventManager = new MapEventManager(this._ngZone);\n    this._options = new BehaviorSubject({});\n    this._bounds = new BehaviorSubject(undefined);\n    this._destroyed = new Subject();\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n     */\n\n    this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n     */\n\n    this.rectangleClick = this._eventManager.getLazyEmitter('click');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n     */\n\n    this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n     */\n\n    this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n     */\n\n    this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n     */\n\n    this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n     */\n\n    this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n     */\n\n    this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n     */\n\n    this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n     */\n\n    this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n     */\n\n    this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n     */\n\n    this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n  }\n\n  _createClass(MapRectangle, [{\n    key: \"options\",\n    set: function set(options) {\n      this._options.next(options || {});\n    }\n  }, {\n    key: \"bounds\",\n    set: function set(bounds) {\n      this._bounds.next(bounds);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this27 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          // We'll bring it back in inside the `MapEventManager` only for the events that the\n          // user has subscribed to.\n          _this27._ngZone.runOutsideAngular(function () {\n            _this27.rectangle = new google.maps.Rectangle(options);\n          });\n\n          _this27._assertInitialized();\n\n          _this27.rectangle.setMap(_this27._map.googleMap);\n\n          _this27._eventManager.setTarget(_this27.rectangle);\n        });\n\n        this._watchForOptionsChanges();\n\n        this._watchForBoundsChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._eventManager.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.rectangle) {\n        this.rectangle.setMap(null);\n      }\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n     */\n\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      this._assertInitialized();\n\n      return this.rectangle.getBounds();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n     */\n\n  }, {\n    key: \"getDraggable\",\n    value: function getDraggable() {\n      this._assertInitialized();\n\n      return this.rectangle.getDraggable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n     */\n\n  }, {\n    key: \"getEditable\",\n    value: function getEditable() {\n      this._assertInitialized();\n\n      return this.rectangle.getEditable();\n    }\n    /**\n     * See\n     * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n     */\n\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      this._assertInitialized();\n\n      return this.rectangle.getVisible();\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return combineLatest([this._options, this._bounds]).pipe(map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            options = _ref12[0],\n            bounds = _ref12[1];\n\n        var combinedOptions = Object.assign(Object.assign({}, options), {\n          bounds: bounds || options.bounds\n        });\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForOptionsChanges\",\n    value: function _watchForOptionsChanges() {\n      var _this28 = this;\n\n      this._options.pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        _this28._assertInitialized();\n\n        _this28.rectangle.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_watchForBoundsChanges\",\n    value: function _watchForBoundsChanges() {\n      var _this29 = this;\n\n      this._bounds.pipe(takeUntil(this._destroyed)).subscribe(function (bounds) {\n        if (bounds) {\n          _this29._assertInitialized();\n\n          _this29.rectangle.setBounds(bounds);\n        }\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._map.googleMap) {\n          throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n        }\n\n        if (!this.rectangle) {\n          throw Error('Cannot interact with a Google Map Rectangle before it has been initialized. ' + 'Please wait for the Rectangle to load before trying to interact with it.');\n        }\n      }\n    }\n  }]);\n\n  return MapRectangle;\n}();\n\nMapRectangle.Éµfac = function MapRectangle_Factory(t) {\n  return new (t || MapRectangle)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapRectangle.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapRectangle,\n  selectors: [[\"map-rectangle\"]],\n  inputs: {\n    options: \"options\",\n    bounds: \"bounds\"\n  },\n  outputs: {\n    boundsChanged: \"boundsChanged\",\n    rectangleClick: \"rectangleClick\",\n    rectangleDblclick: \"rectangleDblclick\",\n    rectangleDrag: \"rectangleDrag\",\n    rectangleDragend: \"rectangleDragend\",\n    rectangleDragstart: \"rectangleDragstart\",\n    rectangleMousedown: \"rectangleMousedown\",\n    rectangleMousemove: \"rectangleMousemove\",\n    rectangleMouseout: \"rectangleMouseout\",\n    rectangleMouseover: \"rectangleMouseover\",\n    rectangleMouseup: \"rectangleMouseup\",\n    rectangleRightclick: \"rectangleRightclick\"\n  },\n  exportAs: [\"mapRectangle\"]\n});\n\nMapRectangle.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapRectangle.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  bounds: [{\n    type: Input\n  }],\n  boundsChanged: [{\n    type: Output\n  }],\n  rectangleClick: [{\n    type: Output\n  }],\n  rectangleDblclick: [{\n    type: Output\n  }],\n  rectangleDrag: [{\n    type: Output\n  }],\n  rectangleDragend: [{\n    type: Output\n  }],\n  rectangleDragstart: [{\n    type: Output\n  }],\n  rectangleMousedown: [{\n    type: Output\n  }],\n  rectangleMousemove: [{\n    type: Output\n  }],\n  rectangleMouseout: [{\n    type: Output\n  }],\n  rectangleMouseover: [{\n    type: Output\n  }],\n  rectangleMouseup: [{\n    type: Output\n  }],\n  rectangleRightclick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapRectangle, [{\n    type: Directive,\n    args: [{\n      selector: 'map-rectangle',\n      exportAs: 'mapRectangle'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    boundsChanged: [{\n      type: Output\n    }],\n    rectangleClick: [{\n      type: Output\n    }],\n    rectangleDblclick: [{\n      type: Output\n    }],\n    rectangleDrag: [{\n      type: Output\n    }],\n    rectangleDragend: [{\n      type: Output\n    }],\n    rectangleDragstart: [{\n      type: Output\n    }],\n    rectangleMousedown: [{\n      type: Output\n    }],\n    rectangleMousemove: [{\n      type: Output\n    }],\n    rectangleMouseout: [{\n      type: Output\n    }],\n    rectangleMouseover: [{\n      type: Output\n    }],\n    rectangleMouseup: [{\n      type: Output\n    }],\n    rectangleRightclick: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    bounds: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\n\n\nvar MapTrafficLayer = /*#__PURE__*/function () {\n  function MapTrafficLayer(_map, _ngZone) {\n    _classCallCheck(this, MapTrafficLayer);\n\n    this._map = _map;\n    this._ngZone = _ngZone;\n    this._autoRefresh = new BehaviorSubject(true);\n    this._destroyed = new Subject();\n  }\n  /**\n   * Whether the traffic layer refreshes with updated information automatically.\n   */\n\n\n  _createClass(MapTrafficLayer, [{\n    key: \"autoRefresh\",\n    set: function set(autoRefresh) {\n      this._autoRefresh.next(autoRefresh);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this30 = this;\n\n      if (this._map._isBrowser) {\n        this._combineOptions().pipe(take(1)).subscribe(function (options) {\n          // Create the object outside the zone so its events don't trigger change detection.\n          _this30._ngZone.runOutsideAngular(function () {\n            _this30.trafficLayer = new google.maps.TrafficLayer(options);\n          });\n\n          _this30._assertInitialized();\n\n          _this30.trafficLayer.setMap(_this30._map.googleMap);\n        });\n\n        this._watchForAutoRefreshChanges();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      if (this.trafficLayer) {\n        this.trafficLayer.setMap(null);\n      }\n    }\n  }, {\n    key: \"_combineOptions\",\n    value: function _combineOptions() {\n      return this._autoRefresh.pipe(map(function (autoRefresh) {\n        var combinedOptions = {\n          autoRefresh: autoRefresh\n        };\n        return combinedOptions;\n      }));\n    }\n  }, {\n    key: \"_watchForAutoRefreshChanges\",\n    value: function _watchForAutoRefreshChanges() {\n      var _this31 = this;\n\n      this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe(function (options) {\n        _this31._assertInitialized();\n\n        _this31.trafficLayer.setOptions(options);\n      });\n    }\n  }, {\n    key: \"_assertInitialized\",\n    value: function _assertInitialized() {\n      if (!this._map.googleMap) {\n        throw Error('Cannot access Google Map information before the API has been initialized. ' + 'Please wait for the API to load before trying to interact with it.');\n      }\n\n      if (!this.trafficLayer) {\n        throw Error('Cannot interact with a Google Map Traffic Layer before it has been initialized. ' + 'Please wait for the Traffic Layer to load before trying to interact with it.');\n      }\n    }\n  }]);\n\n  return MapTrafficLayer;\n}();\n\nMapTrafficLayer.Éµfac = function MapTrafficLayer_Factory(t) {\n  return new (t || MapTrafficLayer)(Éµngcc0.ÉµÉµdirectiveInject(GoogleMap), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n};\n\nMapTrafficLayer.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapTrafficLayer,\n  selectors: [[\"map-traffic-layer\"]],\n  inputs: {\n    autoRefresh: \"autoRefresh\"\n  },\n  exportAs: [\"mapTrafficLayer\"]\n});\n\nMapTrafficLayer.ctorParameters = function () {\n  return [{\n    type: GoogleMap\n  }, {\n    type: NgZone\n  }];\n};\n\nMapTrafficLayer.propDecorators = {\n  autoRefresh: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapTrafficLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-traffic-layer',\n      exportAs: 'mapTrafficLayer'\n    }]\n  }], function () {\n    return [{\n      type: GoogleMap\n    }, {\n      type: Éµngcc0.NgZone\n    }];\n  }, {\n    autoRefresh: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\n\n\nvar MapTransitLayer = /*#__PURE__*/function (_MapBaseLayer2) {\n  _inherits(MapTransitLayer, _MapBaseLayer2);\n\n  var _super2 = _createSuper(MapTransitLayer);\n\n  function MapTransitLayer() {\n    _classCallCheck(this, MapTransitLayer);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(MapTransitLayer, [{\n    key: \"_initializeObject\",\n    value: function _initializeObject() {\n      this.transitLayer = new google.maps.TransitLayer();\n    }\n  }, {\n    key: \"_setMap\",\n    value: function _setMap() {\n      this._assertLayerInitialized();\n\n      this.transitLayer.setMap(this._map.googleMap);\n    }\n  }, {\n    key: \"_unsetMap\",\n    value: function _unsetMap() {\n      if (this.transitLayer) {\n        this.transitLayer.setMap(null);\n      }\n    }\n  }, {\n    key: \"_assertLayerInitialized\",\n    value: function _assertLayerInitialized() {\n      if (!this.transitLayer) {\n        throw Error('Cannot interact with a Google Map Transit Layer before it has been initialized. ' + 'Please wait for the Transit Layer to load before trying to interact with it.');\n      }\n    }\n  }]);\n\n  return MapTransitLayer;\n}(MapBaseLayer);\n\nMapTransitLayer.Éµfac = function MapTransitLayer_Factory(t) {\n  return ÉµMapTransitLayer_BaseFactory(t || MapTransitLayer);\n};\n\nMapTransitLayer.Éµdir = Éµngcc0.ÉµÉµdefineDirective({\n  type: MapTransitLayer,\n  selectors: [[\"map-transit-layer\"]],\n  exportAs: [\"mapTransitLayer\"],\n  features: [Éµngcc0.ÉµÉµInheritDefinitionFeature]\n});\nvar ÉµMapTransitLayer_BaseFactory = /*@__PURE__*/Éµngcc0.ÉµÉµgetInheritedFactory(MapTransitLayer);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MapTransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'map-transit-layer',\n      exportAs: 'mapTransitLayer'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar COMPONENTS = [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer];\n\nvar GoogleMapsModule = function GoogleMapsModule() {\n  _classCallCheck(this, GoogleMapsModule);\n};\n\nGoogleMapsModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: GoogleMapsModule\n});\nGoogleMapsModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function GoogleMapsModule_Factory(t) {\n    return new (t || GoogleMapsModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(GoogleMapsModule, {\n    declarations: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer],\n    exports: [GoogleMap, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(GoogleMapsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: COMPONENTS,\n      exports: COMPONENTS\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GoogleMap, GoogleMapsModule, MapBaseLayer, MapBicyclingLayer, MapCircle, MapGroundOverlay, MapInfoWindow, MapKmlLayer, MapMarker, MapMarkerClusterer, MapPolygon, MapPolyline, MapRectangle, MapTrafficLayer, MapTransitLayer };","map":{"version":3,"sources":["../../../../../../src/google-maps/map-event-manager.ts","../../../../../../src/google-maps/google-map/google-map.ts","../../../../../../src/google-maps/map-base-layer.ts","../../../../../../src/google-maps/map-bicycling-layer/map-bicycling-layer.ts","../../../../../../src/google-maps/map-circle/map-circle.ts","../../../../../../src/google-maps/map-ground-overlay/map-ground-overlay.ts","../../../../../../src/google-maps/map-info-window/map-info-window.ts","../../../../../../src/google-maps/map-kml-layer/map-kml-layer.ts","../../../../../../src/google-maps/map-marker/map-marker.ts","../../../../../../src/google-maps/map-marker-clusterer/map-marker-clusterer.ts","../../../../../../src/google-maps/map-polygon/map-polygon.ts","../../../../../../src/google-maps/map-polyline/map-polyline.ts","../../../../../../src/google-maps/map-rectangle/map-rectangle.ts","../../../../../../src/google-maps/map-traffic-layer/map-traffic-layer.ts","../../../../../../src/google-maps/map-transit-layer/map-transit-layer.ts","../../../../../../src/google-maps/google-maps-module.ts","../../../../../../src/google-maps/public-api.ts","../../../../../../src/google-maps/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {BehaviorSubject, Observable, Subscriber} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\ntype MapEventManagerTarget = {\n  addListener: (name: string, callback: (...args: any[]) => void) => google.maps.MapsEventListener;\n} | undefined;\n\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\nexport class MapEventManager {\n  /** Pending listeners that were added before the target was set. */\n  private _pending: {observable: Observable<any>, observer: Subscriber<any>}[] = [];\n  private _listeners: google.maps.MapsEventListener[] = [];\n  private _targetStream = new BehaviorSubject<MapEventManagerTarget>(undefined);\n\n  /** Clears all currently-registered event listeners. */\n  private _clearListeners() {\n    for (const listener of this._listeners) {\n      listener.remove();\n    }\n\n    this._listeners = [];\n  }\n\n  constructor(private _ngZone: NgZone) {}\n\n  /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n  getLazyEmitter<T>(name: string): Observable<T> {\n    return this._targetStream.pipe(switchMap(target => {\n      const observable = new Observable<T>(observer => {\n        // If the target hasn't been initialized yet, cache the observer so it can be added later.\n        if (!target) {\n          this._pending.push({observable, observer});\n          return undefined;\n        }\n\n        const listener = target.addListener(name, (event: T) => {\n          this._ngZone.run(() => observer.next(event));\n        });\n        this._listeners.push(listener);\n        return () => listener.remove();\n      });\n\n      return observable;\n    }));\n  }\n\n  /** Sets the current target that the manager should bind events to. */\n  setTarget(target: MapEventManagerTarget) {\n    const currentTarget = this._targetStream.value;\n\n    if (target === currentTarget) {\n      return;\n    }\n\n    // Clear the listeners from the pre-existing target.\n    if (currentTarget) {\n      this._clearListeners();\n      this._pending = [];\n    }\n\n    this._targetStream.next(target);\n\n    // Add the listeners that were bound before the map was initialized.\n    this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n    this._pending = [];\n  }\n\n  /** Destroys the manager and clears the event listeners. */\n  destroy() {\n    this._clearListeners();\n    this._pending = [];\n    this._targetStream.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  Inject,\n  PLATFORM_ID,\n  NgZone,\n  SimpleChanges,\n} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\nimport {Observable} from 'rxjs';\nimport {MapEventManager} from '../map-event-manager';\n\ninterface GoogleMapsWindow extends Window {\n  google?: typeof google;\n}\n\n/** default options set to the Googleplex */\nexport const DEFAULT_OPTIONS: google.maps.MapOptions = {\n  center: {lat: 37.421995, lng: -122.084092},\n  zoom: 17\n};\n\n/** Arbitrary default height for the map element */\nexport const DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nexport const DEFAULT_WIDTH = '500px';\n\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\n@Component({\n  selector: 'google-map',\n  exportAs: 'googleMap',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<div class=\"map-container\"></div><ng-content></ng-content>',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class GoogleMap implements OnChanges, OnInit, OnDestroy {\n  private _eventManager: MapEventManager = new MapEventManager(this._ngZone);\n  private _mapEl: HTMLElement;\n\n  /**\n   * The underlying google.maps.Map object\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#Map\n   */\n  googleMap?: google.maps.Map;\n\n  /** Whether we're currently rendering inside a browser. */\n  _isBrowser: boolean;\n\n  /** Height of the map. Set this to `null` if you'd like to control the height through CSS. */\n  @Input() height: string | number | null = DEFAULT_HEIGHT;\n\n  /** Width of the map. Set this to `null` if you'd like to control the width through CSS. */\n  @Input() width: string | number | null = DEFAULT_WIDTH;\n\n  /**\n   * Type of map that should be rendered. E.g. hybrid map, terrain map etc.\n   * See: https://developers.google.com/maps/documentation/javascript/reference/map#MapTypeId\n   */\n  @Input() mapTypeId: google.maps.MapTypeId | undefined;\n\n  @Input()\n  set center(center: google.maps.LatLngLiteral|google.maps.LatLng) {\n    this._center = center;\n  }\n  private _center: google.maps.LatLngLiteral|google.maps.LatLng;\n\n  @Input()\n  set zoom(zoom: number) {\n    this._zoom = zoom;\n  }\n  private _zoom: number;\n\n  @Input()\n  set options(options: google.maps.MapOptions) {\n    this._options = options || DEFAULT_OPTIONS;\n  }\n  private _options = DEFAULT_OPTIONS;\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n   */\n  @Output()\n  boundsChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('bounds_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n   */\n  @Output()\n  centerChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('center_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n   */\n  @Output()\n  mapClick: Observable<google.maps.MapMouseEvent|google.maps.IconMouseEvent> = this._eventManager\n      .getLazyEmitter<google.maps.MapMouseEvent|google.maps.IconMouseEvent>('click');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n   */\n  @Output()\n  mapDblclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n   */\n  @Output() mapDrag: Observable<void> = this._eventManager.getLazyEmitter<void>('drag');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n   */\n  @Output() mapDragend: Observable<void> = this._eventManager.getLazyEmitter<void>('dragend');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n   */\n  @Output() mapDragstart: Observable<void> = this._eventManager.getLazyEmitter<void>('dragstart');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n   */\n  @Output()\n  headingChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('heading_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n   */\n  @Output() idle: Observable<void> = this._eventManager.getLazyEmitter<void>('idle');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n   */\n  @Output()\n  maptypeidChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('maptypeid_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n   */\n  @Output()\n  mapMousemove: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n   */\n  @Output()\n  mapMouseout: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n   */\n  @Output()\n  mapMouseover: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n   */\n  @Output()\n  projectionChanged: Observable<void> =\n      this._eventManager.getLazyEmitter<void>('projection_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n   */\n  @Output()\n  mapRightclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n   */\n  @Output() tilesloaded: Observable<void> = this._eventManager.getLazyEmitter<void>('tilesloaded');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n   */\n  @Output() tiltChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('tilt_changed');\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n   */\n  @Output() zoomChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('zoom_changed');\n\n  constructor(\n    private readonly _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(PLATFORM_ID) platformId: Object) {\n\n    this._isBrowser = isPlatformBrowser(platformId);\n\n    if (this._isBrowser) {\n      const googleMapsWindow: GoogleMapsWindow = window;\n      if (!googleMapsWindow.google && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(\n            'Namespace google not found, cannot construct embedded google ' +\n            'map. Please install the Google Maps JavaScript API: ' +\n            'https://developers.google.com/maps/documentation/javascript/' +\n            'tutorial#Loading_the_Maps_API');\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['height'] || changes['width']) {\n      this._setSize();\n    }\n\n    const googleMap = this.googleMap;\n\n    if (googleMap) {\n      if (changes['options'] && this._options) {\n        googleMap.setOptions(this._options);\n      }\n\n      if (changes['center'] && this._center) {\n        googleMap.setCenter(this._center);\n      }\n\n      // Note that the zoom can be zero.\n      if (changes['zoom'] && this._zoom != null) {\n        googleMap.setZoom(this._zoom);\n      }\n\n      if (changes['mapTypeId'] && this.mapTypeId) {\n        googleMap.setMapTypeId(this.mapTypeId);\n      }\n    }\n  }\n\n  ngOnInit() {\n    // It should be a noop during server-side rendering.\n    if (this._isBrowser) {\n      this._mapEl = this._elementRef.nativeElement.querySelector('.map-container')!;\n      this._setSize();\n\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      this._ngZone.runOutsideAngular(() => {\n        this.googleMap = new google.maps.Map(this._mapEl, this._combineOptions());\n      });\n      this._eventManager.setTarget(this.googleMap);\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n   */\n  fitBounds(\n      bounds: google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral,\n      padding?: number|google.maps.Padding) {\n    this._assertInitialized();\n    this.googleMap.fitBounds(bounds, padding);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n   */\n  panBy(x: number, y: number) {\n    this._assertInitialized();\n    this.googleMap.panBy(x, y);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n   */\n  panTo(latLng: google.maps.LatLng|google.maps.LatLngLiteral) {\n    this._assertInitialized();\n    this.googleMap.panTo(latLng);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n   */\n  panToBounds(\n      latLngBounds: google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral,\n      padding?: number|google.maps.Padding) {\n    this._assertInitialized();\n    this.googleMap.panToBounds(latLngBounds, padding);\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds|null {\n    this._assertInitialized();\n    return this.googleMap.getBounds() || null;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n   */\n  getCenter(): google.maps.LatLng {\n    this._assertInitialized();\n    return this.googleMap.getCenter();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n   */\n  getClickableIcons(): boolean {\n    this._assertInitialized();\n    return this.googleMap.getClickableIcons();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n   */\n  getHeading(): number {\n    this._assertInitialized();\n    return this.googleMap.getHeading();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n   */\n  getMapTypeId(): google.maps.MapTypeId|string {\n    this._assertInitialized();\n    return this.googleMap.getMapTypeId();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n   */\n  getProjection(): google.maps.Projection|null {\n    this._assertInitialized();\n    return this.googleMap.getProjection();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n   */\n  getStreetView(): google.maps.StreetViewPanorama {\n    this._assertInitialized();\n    return this.googleMap.getStreetView();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n   */\n  getTilt(): number {\n    this._assertInitialized();\n    return this.googleMap.getTilt();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n   */\n  getZoom(): number {\n    this._assertInitialized();\n    return this.googleMap.getZoom();\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n   */\n  get controls(): google.maps.MVCArray<Node>[] {\n    this._assertInitialized();\n    return this.googleMap.controls;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n   */\n  get data(): google.maps.Data {\n    this._assertInitialized();\n    return this.googleMap.data;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n   */\n  get mapTypes(): google.maps.MapTypeRegistry {\n    this._assertInitialized();\n    return this.googleMap.mapTypes;\n  }\n\n  /**\n   * See\n   * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n   */\n  get overlayMapTypes(): google.maps.MVCArray<google.maps.MapType> {\n    this._assertInitialized();\n    return this.googleMap.overlayMapTypes;\n  }\n\n  private _setSize() {\n    if (this._mapEl) {\n      const styles = this._mapEl.style;\n      styles.height =\n          this.height === null ? '' : (coerceCssPixelValue(this.height) || DEFAULT_HEIGHT);\n      styles.width = this.width === null ? '' : (coerceCssPixelValue(this.width) || DEFAULT_WIDTH);\n    }\n  }\n\n  /** Combines the center and zoom and the other map options into a single object */\n  private _combineOptions(): google.maps.MapOptions {\n    const options = this._options;\n    return {\n      ...options,\n      // It's important that we set **some** kind of `center` and `zoom`, otherwise\n      // Google Maps will render a blank rectangle which looks broken.\n      center: this._center || options.center || DEFAULT_OPTIONS.center,\n      zoom: this._zoom ?? options.zoom ?? DEFAULT_OPTIONS.zoom,\n      mapTypeId: this.mapTypeId\n    };\n  }\n\n  /** Asserts that the map has been initialized. */\n  private _assertInitialized(): asserts this is {googleMap: google.maps.Map} {\n    if (!this.googleMap && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                  'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n}\n\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value: any): string {\n  if (value == null) {\n    return '';\n  }\n\n  return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive, NgZone, OnDestroy, OnInit} from '@angular/core';\n\nimport {GoogleMap} from './google-map/google-map';\n\n@Directive({\n  selector: 'map-base-layer',\n  exportAs: 'mapBaseLayer',\n})\nexport class MapBaseLayer implements OnInit, OnDestroy {\n  constructor(protected readonly _map: GoogleMap, protected readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._ngZone.runOutsideAngular(() => {\n        this._initializeObject();\n      });\n      this._assertInitialized();\n      this._setMap();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsetMap();\n  }\n\n  private _assertInitialized() {\n    if (!this._map.googleMap) {\n      throw Error(\n          'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.');\n    }\n  }\n\n  protected _initializeObject() {}\n  protected _setMap() {}\n  protected _unsetMap() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive} from '@angular/core';\n\nimport {MapBaseLayer} from '../map-base-layer';\n\n/**\n * Angular component that renders a Google Maps Bicycling Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n */\n@Directive({\n  selector: 'map-bicycling-layer',\n  exportAs: 'mapBicyclingLayer',\n})\nexport class MapBicyclingLayer extends MapBaseLayer {\n  /**\n   * The underlying google.maps.BicyclingLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#BicyclingLayer\n   */\n  bicyclingLayer?: google.maps.BicyclingLayer;\n\n  protected _initializeObject() {\n    this.bicyclingLayer = new google.maps.BicyclingLayer();\n  }\n\n  protected _setMap() {\n    this._assertLayerInitialized();\n    this.bicyclingLayer.setMap(this._map.googleMap!);\n  }\n\n  protected _unsetMap() {\n    if (this.bicyclingLayer) {\n      this.bicyclingLayer.setMap(null);\n    }\n  }\n\n  private _assertLayerInitialized(): asserts this is {bicyclingLayer: google.maps.BicyclingLayer} {\n    if (!this.bicyclingLayer) {\n      throw Error(\n          'Cannot interact with a Google Map Bicycling Layer before it has been initialized. ' +\n          'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\n@Directive({\n  selector: 'map-circle',\n  exportAs: 'mapCircle',\n})\nexport class MapCircle implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.CircleOptions>({});\n  private readonly _center =\n      new BehaviorSubject<google.maps.LatLng|google.maps.LatLngLiteral|undefined>(undefined);\n  private readonly _radius = new BehaviorSubject<number|undefined>(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * Underlying google.maps.Circle object.\n   *\n   * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n   */\n  circle?: google.maps.Circle;  // initialized in ngOnInit\n\n  @Input()\n  set options(options: google.maps.CircleOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set center(center: google.maps.LatLng|google.maps.LatLngLiteral) {\n    this._center.next(center);\n  }\n\n  @Input()\n  set radius(radius: number) {\n    this._radius.next(radius);\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n   */\n  @Output()\n  centerChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('center_changed');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n   */\n  @Output()\n  circleClick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n   */\n  @Output()\n  circleDblclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n   */\n  @Output()\n  circleDrag: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n   */\n  @Output()\n  circleDragend: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n   */\n  @Output()\n  circleDragstart: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n   */\n  @Output()\n  circleMousedown: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n   */\n  @Output()\n  circleMousemove: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n   */\n  @Output()\n  circleMouseout: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n   */\n  @Output()\n  circleMouseover: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n   */\n  @Output()\n  circleMouseup: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n   */\n  @Output()\n  radiusChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('radius_changed');\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n   */\n  @Output()\n  circleRightclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  constructor(private readonly _map: GoogleMap, private readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.circle = new google.maps.Circle(options);\n        });\n        this._assertInitialized();\n        this.circle.setMap(this._map.googleMap!);\n        this._eventManager.setTarget(this.circle);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForCenterChanges();\n      this._watchForRadiusChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.circle) {\n      this.circle.setMap(null);\n    }\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds {\n    this._assertInitialized();\n    return this.circle.getBounds();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n   */\n  getCenter(): google.maps.LatLng {\n    this._assertInitialized();\n    return this.circle.getCenter();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.circle.getDraggable();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.circle.getEditable();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getRadius\n   */\n  getRadius(): number {\n    this._assertInitialized();\n    return this.circle.getRadius();\n  }\n\n  /**\n   * @see\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.circle.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.CircleOptions> {\n    return combineLatest([this._options, this._center, this._radius])\n        .pipe(map(([options, center, radius]) => {\n          const combinedOptions: google.maps.CircleOptions = {\n            ...options,\n            center: center || options.center,\n            radius: radius !== undefined ? radius : options.radius,\n          };\n          return combinedOptions;\n        }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.circle.setOptions(options);\n    });\n  }\n\n  private _watchForCenterChanges() {\n    this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n      if (center) {\n        this._assertInitialized();\n        this.circle.setCenter(center);\n      }\n    });\n  }\n\n  private _watchForRadiusChanges() {\n    this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n      if (radius !== undefined) {\n        this._assertInitialized();\n        this.circle.setRadius(radius);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {circle: google.maps.Circle} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n          'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.circle) {\n        throw Error(\n          'Cannot interact with a Google Map Circle before it has been ' +\n          'initialized. Please wait for the Circle to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive, Input, NgZone, OnDestroy, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\n@Directive({\n  selector: 'map-ground-overlay',\n  exportAs: 'mapGroundOverlay',\n})\nexport class MapGroundOverlay implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n\n  private readonly _opacity = new BehaviorSubject<number>(1);\n  private readonly _url = new BehaviorSubject<string>('');\n  private readonly _bounds =\n      new BehaviorSubject<google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral|undefined>(\n          undefined);\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.GroundOverlay object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n   */\n  groundOverlay?: google.maps.GroundOverlay;\n\n  /** URL of the image that will be shown in the overlay. */\n  @Input()\n  set url(url: string) {\n    this._url.next(url);\n  }\n\n  /** Bounds for the overlay. */\n  @Input()\n  get bounds(): google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral {\n    return this._bounds.value!;\n  }\n  set bounds(bounds: google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral) {\n    this._bounds.next(bounds);\n  }\n\n  /** Whether the overlay is clickable */\n  @Input() clickable: boolean = false;\n\n  /** Opacity of the overlay. */\n  @Input()\n  set opacity(opacity: number) {\n    this._opacity.next(opacity);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n   */\n  @Output()\n  mapClick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.dblclick\n   */\n  @Output()\n  mapDblclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  constructor(private readonly _map: GoogleMap, private readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      // The ground overlay setup is slightly different from the other Google Maps objects in that\n      // we have to recreate the `GroundOverlay` object whenever the bounds change, because\n      // Google Maps doesn't provide an API to update the bounds of an existing overlay.\n      this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n        if (this.groundOverlay) {\n          this.groundOverlay.setMap(null);\n          this.groundOverlay = undefined;\n        }\n\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        if (bounds) {\n          this._ngZone.runOutsideAngular(() => {\n            this.groundOverlay = new google.maps.GroundOverlay(this._url.getValue(), bounds, {\n              clickable: this.clickable,\n              opacity: this._opacity.value,\n            });\n          });\n          this._assertInitialized();\n          this.groundOverlay.setMap(this._map.googleMap!);\n          this._eventManager.setTarget(this.groundOverlay);\n        }\n      });\n\n      this._watchForOpacityChanges();\n      this._watchForUrlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.groundOverlay) {\n      this.groundOverlay.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds {\n    this._assertInitialized();\n    return this.groundOverlay.getBounds();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getOpacity\n   */\n  getOpacity(): number {\n    this._assertInitialized();\n    return this.groundOverlay.getOpacity();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/image-overlay\n   * #GroundOverlay.getUrl\n   */\n  getUrl(): string {\n    this._assertInitialized();\n    return this.groundOverlay.getUrl();\n  }\n\n  private _watchForOpacityChanges() {\n    this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n      if (opacity != null) {\n        this._assertInitialized();\n        this.groundOverlay.setOpacity(opacity);\n      }\n    });\n  }\n\n  private _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      this._assertInitialized();\n      const overlay = this.groundOverlay;\n      overlay.set('url', url);\n\n      // Google Maps only redraws the overlay if we re-set the map.\n      overlay.setMap(null);\n      overlay.setMap(this._map.googleMap!);\n    });\n  }\n\n  private _assertInitialized(): asserts this is {groundOverlay: google.maps.GroundOverlay} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.groundOverlay) {\n        throw Error(\n            'Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\n            'Please wait for the GroundOverlay to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapAnchorPoint} from '../map-anchor-point';\n\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\n@Directive({\n  selector: 'map-info-window',\n  exportAs: 'mapInfoWindow',\n  host: {'style': 'display: none'},\n})\nexport class MapInfoWindow implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.InfoWindowOptions>({});\n  private readonly _position =\n      new BehaviorSubject<google.maps.LatLngLiteral|google.maps.LatLng|undefined>(undefined);\n  private readonly _destroy = new Subject<void>();\n\n  /**\n   * Underlying google.maps.InfoWindow\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow\n   */\n  infoWindow?: google.maps.InfoWindow;\n\n  @Input()\n  set options(options: google.maps.InfoWindowOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set position(position: google.maps.LatLngLiteral|google.maps.LatLng) {\n    this._position.next(position);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n   */\n  @Output() closeclick: Observable<void> = this._eventManager.getLazyEmitter<void>('closeclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.content_changed\n   */\n  @Output()\n  contentChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('content_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n   */\n  @Output() domready: Observable<void> = this._eventManager.getLazyEmitter<void>('domready');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.position_changed\n   */\n  @Output()\n  positionChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('position_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.zindex_changed\n   */\n  @Output()\n  zindexChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('zindex_changed');\n\n  constructor(private readonly _googleMap: GoogleMap,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      const combinedOptionsChanges = this._combineOptions();\n\n      combinedOptionsChanges.pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.infoWindow = new google.maps.InfoWindow(options);\n        });\n\n        this._eventManager.setTarget(this.infoWindow);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForPositionChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroy.next();\n    this._destroy.complete();\n\n    // If no info window has been created on the server, we do not try closing it.\n    // On the server, an info window cannot be created and this would cause errors.\n    if (this.infoWindow) {\n      this.close();\n    }\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n   */\n  close() {\n    this._assertInitialized();\n    this.infoWindow.close();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n   */\n  getContent(): string|Node {\n    this._assertInitialized();\n    return this.infoWindow.getContent();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window\n   * #InfoWindow.getPosition\n   */\n  getPosition(): google.maps.LatLng|null {\n    this._assertInitialized();\n    return this.infoWindow.getPosition();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n   */\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.infoWindow.getZIndex();\n  }\n\n  /**\n   * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n   * then the position property of the options input is used instead.\n   */\n  open(anchor?: MapAnchorPoint) {\n    this._assertInitialized();\n    const anchorObject = anchor ? anchor.getAnchor() : undefined;\n\n    // Prevent the info window from initializing when trying to reopen on the same anchor.\n    // Note that when the window is opened for the first time, the anchor will always be\n    // undefined. If that's the case, we have to allow it to open in order to handle the\n    // case where the window doesn't have an anchor, but is placed at a particular position.\n    if (this.infoWindow.get('anchor') !== anchorObject || !anchorObject) {\n      this._elementRef.nativeElement.style.display = '';\n      this.infoWindow.open(this._googleMap.googleMap, anchorObject);\n    }\n  }\n\n  private _combineOptions(): Observable<google.maps.InfoWindowOptions> {\n    return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\n      const combinedOptions: google.maps.InfoWindowOptions = {\n        ...options,\n        position: position || options.position,\n        content: this._elementRef.nativeElement,\n      };\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n      this._assertInitialized();\n      this.infoWindow.setOptions(options);\n    });\n  }\n\n  private _watchForPositionChanges() {\n    this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n      if (position) {\n        this._assertInitialized();\n        this.infoWindow.setPosition(position);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {infoWindow: google.maps.InfoWindow} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.infoWindow) {\n        throw Error(\n            'Cannot interact with a Google Map Info Window before it has been ' +\n            'initialized. Please wait for the Info Window to load before trying to interact with ' +\n            'it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  Directive,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps KML Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n */\n@Directive({\n  selector: 'map-kml-layer',\n  exportAs: 'mapKmlLayer',\n})\nexport class MapKmlLayer implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.KmlLayerOptions>({});\n  private readonly _url = new BehaviorSubject<string>('');\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.KmlLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer\n   */\n  kmlLayer?: google.maps.KmlLayer;\n\n  @Input()\n  set options(options: google.maps.KmlLayerOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set url(url: string) {\n    this._url.next(url);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.click\n   */\n  @Output()\n  kmlClick: Observable<google.maps.KmlMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.KmlMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml\n   * #KmlLayer.defaultviewport_changed\n   */\n  @Output()\n  defaultviewportChanged: Observable<void> =\n      this._eventManager.getLazyEmitter<void>('defaultviewport_changed');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.status_changed\n   */\n  @Output()\n  statusChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('status_changed');\n\n  constructor(private readonly _map: GoogleMap, private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => this.kmlLayer = new google.maps.KmlLayer(options));\n        this._assertInitialized();\n        this.kmlLayer.setMap(this._map.googleMap!);\n        this._eventManager.setTarget(this.kmlLayer);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForUrlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.kmlLayer) {\n      this.kmlLayer.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getDefaultViewport\n   */\n  getDefaultViewport(): google.maps.LatLngBounds {\n    this._assertInitialized();\n    return this.kmlLayer.getDefaultViewport();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getMetadata\n   */\n  getMetadata(): google.maps.KmlLayerMetadata {\n    this._assertInitialized();\n    return this.kmlLayer.getMetadata();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getStatus\n   */\n  getStatus(): google.maps.KmlLayerStatus {\n    this._assertInitialized();\n    return this.kmlLayer.getStatus();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getUrl\n   */\n  getUrl(): string {\n    this._assertInitialized();\n    return this.kmlLayer.getUrl();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/kml#KmlLayer.getZIndex\n   */\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.kmlLayer.getZIndex();\n  }\n\n  private _combineOptions(): Observable<google.maps.KmlLayerOptions> {\n    return combineLatest([this._options, this._url]).pipe(map(([options, url]) => {\n      const combinedOptions: google.maps.KmlLayerOptions = {\n        ...options,\n        url: url || options.url,\n      };\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      if (this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setOptions(options);\n      }\n    });\n  }\n\n  private _watchForUrlChanges() {\n    this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n      if (url && this.kmlLayer) {\n        this._assertInitialized();\n        this.kmlLayer.setUrl(url);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is { kmlLayer: google.maps.KmlLayer } {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.kmlLayer) {\n        throw Error(\n            'Cannot interact with a Google Map KmlLayer before it has been ' +\n            'initialized. Please wait for the KmlLayer to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapAnchorPoint} from '../map-anchor-point';\n\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nexport const DEFAULT_MARKER_OPTIONS = {\n  position: {lat: 37.421995, lng: -122.084092},\n};\n\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\n@Directive({\n  selector: 'map-marker',\n  exportAs: 'mapMarker',\n})\nexport class MapMarker implements OnInit, OnChanges, OnDestroy, MapAnchorPoint {\n  private _eventManager = new MapEventManager(this._ngZone);\n\n  /**\n   * Title of the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.title\n   */\n  @Input()\n  set title(title: string) {\n    this._title = title;\n  }\n  private _title: string;\n\n  /**\n   * Position of the marker. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.position\n   */\n  @Input()\n  set position(position: google.maps.LatLngLiteral|google.maps.LatLng) {\n    this._position = position;\n  }\n  private _position: google.maps.LatLngLiteral|google.maps.LatLng;\n\n  /**\n   * Label for the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.label\n   */\n  @Input()\n  set label(label: string|google.maps.MarkerLabel) {\n    this._label = label;\n  }\n  private _label: string|google.maps.MarkerLabel;\n\n  /**\n   * Whether the marker is clickable. See:\n   * developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions.clickable\n   */\n  @Input()\n  set clickable(clickable: boolean) {\n    this._clickable = clickable;\n  }\n  private _clickable: boolean;\n\n  /**\n   * Options used to configure the marker.\n   * See: developers.google.com/maps/documentation/javascript/reference/marker#MarkerOptions\n   */\n  @Input()\n  set options(options: google.maps.MarkerOptions) {\n    this._options = options;\n  }\n  private _options: google.maps.MarkerOptions;\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n   */\n  @Output()\n  animationChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('animation_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n   */\n  @Output()\n  mapClick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n   */\n  @Output()\n  clickableChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('clickable_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n   */\n  @Output()\n  cursorChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('cursor_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n   */\n  @Output()\n  mapDblclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n   */\n  @Output()\n  mapDrag: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n   */\n  @Output()\n  mapDragend: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n   */\n  @Output()\n  draggableChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('draggable_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n   */\n  @Output()\n  mapDragstart: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n   */\n  @Output() flatChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('flat_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n   */\n  @Output() iconChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('icon_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n   */\n  @Output()\n  mapMousedown: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n   */\n  @Output()\n  mapMouseout: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n   */\n  @Output()\n  mapMouseover: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n   */\n  @Output()\n  mapMouseup: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n   */\n  @Output()\n  positionChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('position_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n   */\n  @Output()\n  mapRightclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n   */\n  @Output() shapeChanged:\n  Observable<void> = this._eventManager.getLazyEmitter<void>('shape_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n   */\n  @Output()\n  titleChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('title_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n   */\n  @Output()\n  visibleChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('visible_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n   */\n  @Output()\n  zindexChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('zindex_changed');\n\n  /**\n   * The underlying google.maps.Marker object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/marker#Marker\n   */\n  marker?: google.maps.Marker;\n\n  constructor(\n    private readonly _googleMap: GoogleMap,\n    private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._googleMap._isBrowser) {\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      this._ngZone.runOutsideAngular(() => {\n        this.marker = new google.maps.Marker(this._combineOptions());\n      });\n      this._assertInitialized();\n      this.marker.setMap(this._googleMap.googleMap!);\n      this._eventManager.setTarget(this.marker);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {marker, _title, _position, _label, _clickable} = this;\n\n    if (marker) {\n      if (changes['options']) {\n        marker.setOptions(this._combineOptions());\n      }\n\n      if (changes['title'] && _title !== undefined) {\n        marker.setTitle(_title);\n      }\n\n      if (changes['position'] && _position) {\n        marker.setPosition(_position);\n      }\n\n      if (changes['label'] && _label !== undefined) {\n        marker.setLabel(_label);\n      }\n\n      if (changes['clickable'] && _clickable !== undefined) {\n        marker.setClickable(_clickable);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    if (this.marker) {\n      this.marker.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n   */\n  getAnimation(): google.maps.Animation|null {\n    this._assertInitialized();\n    return this.marker.getAnimation() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n   */\n  getClickable(): boolean {\n    this._assertInitialized();\n    return this.marker.getClickable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n   */\n  getCursor(): string|null {\n    this._assertInitialized();\n    return this.marker.getCursor() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return !!this.marker.getDraggable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n   */\n  getIcon(): string|google.maps.Icon|google.maps.Symbol|null {\n    this._assertInitialized();\n    return this.marker.getIcon() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n   */\n  getLabel(): google.maps.MarkerLabel|null {\n    this._assertInitialized();\n    return this.marker.getLabel() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n   */\n  getOpacity(): number|null {\n    this._assertInitialized();\n    return this.marker.getOpacity() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n   */\n  getPosition(): google.maps.LatLng|null {\n    this._assertInitialized();\n    return this.marker.getPosition() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n   */\n  getShape(): google.maps.MarkerShape|null {\n    this._assertInitialized();\n    return this.marker.getShape() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n   */\n  getTitle(): string|null {\n    this._assertInitialized();\n    return this.marker.getTitle() || null;\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.marker.getVisible();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n   */\n  getZIndex(): number|null {\n    this._assertInitialized();\n    return this.marker.getZIndex() || null;\n  }\n\n  /** Gets the anchor point that can be used to attach other Google Maps objects. */\n  getAnchor(): google.maps.MVCObject {\n    this._assertInitialized();\n    return this.marker;\n  }\n\n  /** Creates a combined options object using the passed-in options and the individual inputs. */\n  private _combineOptions(): google.maps.MarkerOptions {\n    const options = this._options || DEFAULT_MARKER_OPTIONS;\n    return {\n      ...options,\n      title: this._title || options.title,\n      position: this._position || options.position,\n      label: this._label || options.label,\n      clickable: this._clickable !== undefined ? this._clickable : options.clickable,\n      map: this._googleMap.googleMap,\n    };\n  }\n\n  private _assertInitialized(): asserts this is {marker: google.maps.Marker} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.marker) {\n        throw Error(\n            'Cannot interact with a Google Map Marker before it has been ' +\n            'initialized. Please wait for the Marker to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n/// <reference path=\"marker-clusterer-types.ts\" />\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\nimport {MapMarker} from '../map-marker/map-marker';\n\n/**\n * Angular component for implementing a Google Maps Marker Clusterer.\n *\n * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n */\n@Component({\n  selector: 'map-marker-clusterer',\n  exportAs: 'mapMarkerClusterer',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: '<ng-content></ng-content>',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MapMarkerClusterer implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n  private readonly _currentMarkers = new Set<google.maps.Marker>();\n  private readonly _eventManager = new MapEventManager(this._ngZone);\n  private readonly _destroy = new Subject<void>();\n\n  /** Whether the clusterer is allowed to be initialized. */\n  private readonly _canInitialize: boolean;\n\n  @Input()\n  ariaLabelFn: AriaLabelFn = () => ''\n\n  @Input()\n  set averageCenter(averageCenter: boolean) {\n    this._averageCenter = averageCenter;\n  }\n  private _averageCenter: boolean;\n\n  @Input() batchSize?: number;\n\n  @Input()\n  set batchSizeIE(batchSizeIE: number) {\n    this._batchSizeIE = batchSizeIE;\n  }\n  private _batchSizeIE: number;\n\n  @Input()\n  set calculator(calculator: Calculator) {\n    this._calculator = calculator;\n  }\n  private _calculator: Calculator;\n\n  @Input()\n  set clusterClass(clusterClass: string) {\n    this._clusterClass = clusterClass;\n  }\n  private _clusterClass: string;\n\n  @Input()\n  set enableRetinaIcons(enableRetinaIcons: boolean) {\n    this._enableRetinaIcons = enableRetinaIcons;\n  }\n  private _enableRetinaIcons: boolean;\n\n  @Input()\n  set gridSize(gridSize: number) {\n    this._gridSize = gridSize;\n  }\n  private _gridSize: number;\n\n  @Input()\n  set ignoreHidden(ignoreHidden: boolean) {\n    this._ignoreHidden = ignoreHidden;\n  }\n  private _ignoreHidden: boolean;\n\n  @Input()\n  set imageExtension(imageExtension: string) {\n    this._imageExtension = imageExtension;\n  }\n  private _imageExtension: string;\n\n  @Input()\n  set imagePath(imagePath: string) {\n    this._imagePath = imagePath;\n  }\n  private _imagePath: string;\n\n  @Input()\n  set imageSizes(imageSizes: number[]) {\n    this._imageSizes = imageSizes;\n  }\n  private _imageSizes: number[];\n\n  @Input()\n  set maxZoom(maxZoom: number) {\n    this._maxZoom = maxZoom;\n  }\n  private _maxZoom: number;\n\n  @Input()\n  set minimumClusterSize(minimumClusterSize: number) {\n    this._minimumClusterSize = minimumClusterSize;\n  }\n  private _minimumClusterSize: number;\n\n  @Input()\n  set styles(styles: ClusterIconStyle[]) {\n    this._styles = styles;\n  }\n  private _styles: ClusterIconStyle[];\n\n  @Input()\n  set title(title: string) {\n    this._title = title;\n  }\n  private _title: string;\n\n  @Input()\n  set zIndex(zIndex: number) {\n    this._zIndex = zIndex;\n  }\n  private _zIndex: number;\n\n  @Input()\n  set zoomOnClick(zoomOnClick: boolean) {\n    this._zoomOnClick = zoomOnClick;\n  }\n  private _zoomOnClick: boolean;\n\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/\n   * _google_markerclustererplus.html#clusteringbegin\n   */\n  @Output()\n  clusteringbegin: Observable<void> = this._eventManager.getLazyEmitter<void>('clusteringbegin');\n\n  /**\n   * See\n   * googlemaps.github.io/v3-utility-library/modules/_google_markerclustererplus.html#clusteringend\n   */\n  @Output()\n  clusteringend: Observable<void> = this._eventManager.getLazyEmitter<void>('clusteringend');\n\n  @ContentChildren(MapMarker, {descendants: true}) _markers: QueryList<MapMarker>;\n\n  /**\n   * The underlying MarkerClusterer object.\n   *\n   * See\n   * googlemaps.github.io/v3-utility-library/classes/\n   * _google_markerclustererplus.markerclusterer.html\n   */\n  markerClusterer?: MarkerClusterer;\n\n  constructor(private readonly _googleMap: GoogleMap, private readonly _ngZone: NgZone) {\n    this._canInitialize = this._googleMap._isBrowser;\n  }\n\n  ngOnInit() {\n    if (this._canInitialize) {\n      // Create the object outside the zone so its events don't trigger change detection.\n      // We'll bring it back in inside the `MapEventManager` only for the events that the\n      // user has subscribed to.\n      this._ngZone.runOutsideAngular(() => {\n        this.markerClusterer = new MarkerClusterer(this._googleMap.googleMap!, [],\n            this._combineOptions());\n      });\n\n      this._assertInitialized();\n      this._eventManager.setTarget(this.markerClusterer);\n    }\n  }\n\n  ngAfterContentInit() {\n    if (this._canInitialize) {\n      this._watchForMarkerChanges();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const {\n      markerClusterer: clusterer, ariaLabelFn, _averageCenter, _batchSizeIE, _calculator, _styles,\n      _clusterClass, _enableRetinaIcons, _gridSize, _ignoreHidden, _imageExtension, _imagePath,\n      _imageSizes, _maxZoom, _minimumClusterSize, _title, _zIndex, _zoomOnClick\n    } = this;\n\n    if (clusterer) {\n      if (changes['ariaLabelFn']) {\n        clusterer.ariaLabelFn = ariaLabelFn;\n      }\n      if (changes['averageCenter'] && _averageCenter !== undefined) {\n        clusterer.setAverageCenter(_averageCenter);\n      }\n      if (changes['batchSizeIE'] && _batchSizeIE !== undefined) {\n        clusterer.setBatchSizeIE(_batchSizeIE);\n      }\n      if (changes['calculator'] && _calculator) {\n        clusterer.setCalculator(_calculator);\n      }\n      if (changes['clusterClass'] && _clusterClass !== undefined) {\n        clusterer.setClusterClass(_clusterClass);\n      }\n      if (changes['enableRetinaIcons'] && _enableRetinaIcons !== undefined) {\n        clusterer.setEnableRetinaIcons(_enableRetinaIcons);\n      }\n      if (changes['gridSize'] && _gridSize !== undefined) {\n        clusterer.setGridSize(_gridSize);\n      }\n      if (changes['ignoreHidden'] && _ignoreHidden !== undefined) {\n        clusterer.setIgnoreHidden(_ignoreHidden);\n      }\n      if (changes['imageExtension'] && _imageExtension !== undefined) {\n        clusterer.setImageExtension(_imageExtension);\n      }\n      if (changes['imagePath'] && _imagePath !== undefined) {\n        clusterer.setImagePath(_imagePath);\n      }\n      if (changes['imageSizes'] && _imageSizes) {\n        clusterer.setImageSizes(_imageSizes);\n      }\n      if (changes['maxZoom'] && _maxZoom !== undefined) {\n        clusterer.setMaxZoom(_maxZoom);\n      }\n      if (changes['minimumClusterSize'] && _minimumClusterSize !== undefined) {\n        clusterer.setMinimumClusterSize(_minimumClusterSize);\n      }\n      if (changes['styles'] && _styles) {\n        clusterer.setStyles(_styles);\n      }\n      if (changes['title'] && _title !== undefined) {\n        clusterer.setTitle(_title);\n      }\n      if (changes['zIndex'] && _zIndex !== undefined) {\n        clusterer.setZIndex(_zIndex);\n      }\n      if (changes['zoomOnClick'] && _zoomOnClick !== undefined) {\n        clusterer.setZoomOnClick(_zoomOnClick);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this._eventManager.destroy();\n    if (this.markerClusterer) {\n      this.markerClusterer.setMap(null);\n    }\n  }\n\n  fitMapToMarkers(padding: number|google.maps.Padding) {\n    this._assertInitialized();\n    this.markerClusterer.fitMapToMarkers(padding);\n  }\n\n  getAverageCenter(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getAverageCenter();\n  }\n\n  getBatchSizeIE(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getBatchSizeIE();\n  }\n\n  getCalculator(): Calculator {\n    this._assertInitialized();\n    return this.markerClusterer.getCalculator();\n  }\n\n  getClusterClass(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getClusterClass();\n  }\n\n  getClusters(): Cluster[] {\n    this._assertInitialized();\n    return this.markerClusterer.getClusters();\n  }\n\n  getEnableRetinaIcons(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getEnableRetinaIcons();\n  }\n\n  getGridSize(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getGridSize();\n  }\n\n  getIgnoreHidden(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getIgnoreHidden();\n  }\n\n  getImageExtension(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getImageExtension();\n  }\n\n  getImagePath(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getImagePath();\n  }\n\n  getImageSizes(): number[] {\n    this._assertInitialized();\n    return this.markerClusterer.getImageSizes();\n  }\n\n  getMaxZoom(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getMaxZoom();\n  }\n\n  getMinimumClusterSize(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getMinimumClusterSize();\n  }\n\n  getStyles(): ClusterIconStyle[] {\n    this._assertInitialized();\n    return this.markerClusterer.getStyles();\n  }\n\n  getTitle(): string {\n    this._assertInitialized();\n    return this.markerClusterer.getTitle();\n  }\n\n  getTotalClusters(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalClusters();\n  }\n\n  getTotalMarkers(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getTotalMarkers();\n  }\n\n  getZIndex(): number {\n    this._assertInitialized();\n    return this.markerClusterer.getZIndex();\n  }\n\n  getZoomOnClick(): boolean {\n    this._assertInitialized();\n    return this.markerClusterer.getZoomOnClick();\n  }\n\n  private _combineOptions(): MarkerClustererOptions {\n    return {\n      ariaLabelFn: this.ariaLabelFn,\n      averageCenter: this._averageCenter,\n      batchSize: this.batchSize,\n      batchSizeIE: this._batchSizeIE,\n      calculator: this._calculator,\n      clusterClass: this._clusterClass,\n      enableRetinaIcons: this._enableRetinaIcons,\n      gridSize: this._gridSize,\n      ignoreHidden: this._ignoreHidden,\n      imageExtension: this._imageExtension,\n      imagePath: this._imagePath,\n      imageSizes: this._imageSizes,\n      maxZoom: this._maxZoom,\n      minimumClusterSize: this._minimumClusterSize,\n      styles: this._styles,\n      title: this._title,\n      zIndex: this._zIndex,\n      zoomOnClick: this._zoomOnClick,\n    };\n  }\n\n  private _watchForMarkerChanges() {\n    this._assertInitialized();\n    const initialMarkers: google.maps.Marker[] = [];\n    for (const marker of this._getInternalMarkers(this._markers.toArray())) {\n      this._currentMarkers.add(marker);\n      initialMarkers.push(marker);\n    }\n    this.markerClusterer.addMarkers(initialMarkers);\n\n    this._markers.changes.pipe(takeUntil(this._destroy)).subscribe(\n      (markerComponents: MapMarker[]) => {\n        this._assertInitialized();\n        const newMarkers = new Set<google.maps.Marker>(this._getInternalMarkers(markerComponents));\n        const markersToAdd: google.maps.Marker[] = [];\n        const markersToRemove: google.maps.Marker[] = [];\n        for (const marker of Array.from(newMarkers)) {\n          if (!this._currentMarkers.has(marker)) {\n            this._currentMarkers.add(marker);\n            markersToAdd.push(marker);\n          }\n        }\n        for (const marker of Array.from(this._currentMarkers)) {\n          if (!newMarkers.has(marker)) {\n            markersToRemove.push(marker);\n          }\n        }\n        this.markerClusterer.addMarkers(markersToAdd, true);\n        this.markerClusterer.removeMarkers(markersToRemove, true);\n        this.markerClusterer.repaint();\n        for (const marker of markersToRemove) {\n          this._currentMarkers.delete(marker);\n        }\n    });\n  }\n\n  private _getInternalMarkers(markers: MapMarker[]): google.maps.Marker[] {\n    return markers.filter(markerComponent => !!markerComponent.marker)\n        .map(markerComponent => markerComponent.marker!);\n  }\n\n  private _assertInitialized(): asserts this is {markerClusterer: MarkerClusterer} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._googleMap.googleMap) {\n        throw Error(\n          'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.markerClusterer) {\n        throw Error(\n          'Cannot interact with a MarkerClusterer before it has been initialized. ' +\n          'Please wait for the MarkerClusterer to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\n@Directive({\n  selector: 'map-polygon',\n  exportAs: 'mapPolygon',\n})\nexport class MapPolygon implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.PolygonOptions>({});\n  private readonly _paths =\n      new BehaviorSubject<google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>>|\n                          google.maps.MVCArray<google.maps.LatLng>|google.maps.LatLng[]|\n                          google.maps.LatLngLiteral[]|undefined>(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Polygon object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n   */\n  polygon?: google.maps.Polygon;\n\n  @Input()\n  set options(options: google.maps.PolygonOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set paths(paths: google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>>|\n            google.maps.MVCArray<google.maps.LatLng>|google.maps.LatLng[]|\n            google.maps.LatLngLiteral[]) {\n    this._paths.next(paths);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n   */\n  @Output()\n  polygonClick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('click');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n   */\n  @Output()\n  polygonDblclick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('dblclick');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n   */\n  @Output()\n  polygonDrag: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n   */\n  @Output()\n  polygonDragend: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n   */\n  @Output()\n  polygonDragstart: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n   */\n  @Output()\n  polygonMousedown: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousedown');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n   */\n  @Output()\n  polygonMousemove: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousemove');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n   */\n  @Output()\n  polygonMouseout: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseout');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n   */\n  @Output()\n  polygonMouseover: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseover');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n   */\n  @Output()\n  polygonMouseup: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseup');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n   */\n  @Output()\n  polygonRightclick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('rightclick');\n\n  constructor(private readonly _map: GoogleMap, private readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.polygon = new google.maps.Polygon(options);\n        });\n        this._assertInitialized();\n        this.polygon.setMap(this._map.googleMap!);\n        this._eventManager.setTarget(this.polygon);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.polygon) {\n      this.polygon.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.polygon.getDraggable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.polygon.getEditable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n   */\n  getPath(): google.maps.MVCArray<google.maps.LatLng> {\n    this._assertInitialized();\n    return this.polygon.getPath();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n   */\n  getPaths(): google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>> {\n    this._assertInitialized();\n    return this.polygon.getPaths();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.polygon.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.PolygonOptions> {\n    return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\n      const combinedOptions: google.maps.PolygonOptions = {\n        ...options,\n        paths: paths || options.paths,\n      };\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polygon.setOptions(options);\n    });\n  }\n\n  private _watchForPathChanges() {\n    this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n      if (paths) {\n        this._assertInitialized();\n        this.polygon.setPaths(paths);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {polygon: google.maps.Polygon} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.polygon) {\n        throw Error(\n            'Cannot interact with a Google Map Polygon before it has been ' +\n            'initialized. Please wait for the Polygon to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  NgZone,\n} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\n@Directive({\n  selector: 'map-polyline',\n  exportAs: 'mapPolyline',\n})\nexport class MapPolyline implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.PolylineOptions>({});\n  private readonly _path =\n      new BehaviorSubject<google.maps.MVCArray<google.maps.LatLng>|google.maps.LatLng[]|\n                          google.maps.LatLngLiteral[]|undefined>(undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Polyline object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n   */\n  polyline?: google.maps.Polyline;\n\n  @Input()\n  set options(options: google.maps.PolylineOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set path(path: google.maps.MVCArray<google.maps.LatLng>|google.maps.LatLng[]|\n           google.maps.LatLngLiteral[]) {\n    this._path.next(path);\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n   */\n  @Output()\n  polylineClick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('click');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n   */\n  @Output()\n  polylineDblclick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('dblclick');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n   */\n  @Output()\n  polylineDrag: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n   */\n  @Output()\n  polylineDragend: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n   */\n  @Output()\n  polylineDragstart: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n   */\n  @Output()\n  polylineMousedown: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousedown');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n   */\n  @Output()\n  polylineMousemove: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mousemove');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n   */\n  @Output()\n  polylineMouseout: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseout');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n   */\n  @Output()\n  polylineMouseover: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseover');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n   */\n  @Output()\n  polylineMouseup: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('mouseup');\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n   */\n  @Output()\n  polylineRightclick: Observable<google.maps.PolyMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.PolyMouseEvent>('rightclick');\n\n  constructor(\n    private readonly _map: GoogleMap,\n    private _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => this.polyline = new google.maps.Polyline(options));\n        this._assertInitialized();\n        this.polyline.setMap(this._map.googleMap!);\n        this._eventManager.setTarget(this.polyline);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForPathChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.polyline) {\n      this.polyline.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.polyline.getDraggable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.polyline.getEditable();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n   */\n  getPath(): google.maps.MVCArray<google.maps.LatLng> {\n    this._assertInitialized();\n    return this.polyline.getPath();\n  }\n\n  /**\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.polyline.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.PolylineOptions> {\n    return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\n      const combinedOptions: google.maps.PolylineOptions = {\n        ...options,\n        path: path || options.path,\n      };\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.polyline.setOptions(options);\n    });\n  }\n\n  private _watchForPathChanges() {\n    this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n      if (path) {\n        this._assertInitialized();\n        this.polyline.setPath(path);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {polyline: google.maps.Polyline} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.polyline) {\n        throw Error(\n            'Cannot interact with a Google Map Polyline before it has been ' +\n            'initialized. Please wait for the Polyline to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive, Input, OnDestroy, OnInit, Output, NgZone} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\nimport {MapEventManager} from '../map-event-manager';\n\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\n@Directive({\n  selector: 'map-rectangle',\n  exportAs: 'mapRectangle',\n})\nexport class MapRectangle implements OnInit, OnDestroy {\n  private _eventManager = new MapEventManager(this._ngZone);\n  private readonly _options = new BehaviorSubject<google.maps.RectangleOptions>({});\n  private readonly _bounds =\n      new BehaviorSubject<google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral|undefined>(\n          undefined);\n\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.Rectangle object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n   */\n  rectangle?: google.maps.Rectangle;\n\n  @Input()\n  set options(options: google.maps.RectangleOptions) {\n    this._options.next(options || {});\n  }\n\n  @Input()\n  set bounds(bounds: google.maps.LatLngBounds|google.maps.LatLngBoundsLiteral) {\n    this._bounds.next(bounds);\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n   */\n  @Output()\n  boundsChanged: Observable<void> = this._eventManager.getLazyEmitter<void>('bounds_changed');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n   */\n  @Output()\n  rectangleClick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('click');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n   */\n  @Output()\n  rectangleDblclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dblclick');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n   */\n  @Output()\n  rectangleDrag: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('drag');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n   */\n  @Output()\n  rectangleDragend: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragend');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n   */\n  @Output()\n  rectangleDragstart: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('dragstart');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n   */\n  @Output()\n  rectangleMousedown: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousedown');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n   */\n  @Output()\n  rectangleMousemove: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mousemove');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n   */\n  @Output()\n  rectangleMouseout: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseout');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n   */\n  @Output()\n  rectangleMouseover: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseover');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n   */\n  @Output()\n  rectangleMouseup: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('mouseup');\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n   */\n  @Output()\n  rectangleRightclick: Observable<google.maps.MapMouseEvent> =\n      this._eventManager.getLazyEmitter<google.maps.MapMouseEvent>('rightclick');\n\n  constructor(private readonly _map: GoogleMap, private readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        // We'll bring it back in inside the `MapEventManager` only for the events that the\n        // user has subscribed to.\n        this._ngZone.runOutsideAngular(() => {\n          this.rectangle = new google.maps.Rectangle(options);\n        });\n        this._assertInitialized();\n        this.rectangle.setMap(this._map.googleMap!);\n        this._eventManager.setTarget(this.rectangle);\n      });\n\n      this._watchForOptionsChanges();\n      this._watchForBoundsChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._eventManager.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.rectangle) {\n      this.rectangle.setMap(null);\n    }\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n   */\n  getBounds(): google.maps.LatLngBounds {\n    this._assertInitialized();\n    return this.rectangle.getBounds();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n   */\n  getDraggable(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getDraggable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n   */\n  getEditable(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getEditable();\n  }\n\n  /**\n   * See\n   * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n   */\n  getVisible(): boolean {\n    this._assertInitialized();\n    return this.rectangle.getVisible();\n  }\n\n  private _combineOptions(): Observable<google.maps.RectangleOptions> {\n    return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\n      const combinedOptions: google.maps.RectangleOptions = {\n        ...options,\n        bounds: bounds || options.bounds,\n      };\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForOptionsChanges() {\n    this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.rectangle.setOptions(options);\n    });\n  }\n\n  private _watchForBoundsChanges() {\n    this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n      if (bounds) {\n        this._assertInitialized();\n        this.rectangle.setBounds(bounds);\n      }\n    });\n  }\n\n  private _assertInitialized(): asserts this is {rectangle: google.maps.Rectangle} {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._map.googleMap) {\n        throw Error(\n            'Cannot access Google Map information before the API has been initialized. ' +\n            'Please wait for the API to load before trying to interact with it.');\n      }\n      if (!this.rectangle) {\n        throw Error(\n            'Cannot interact with a Google Map Rectangle before it has been initialized. ' +\n            'Please wait for the Rectangle to load before trying to interact with it.');\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive, Input, NgZone, OnDestroy, OnInit} from '@angular/core';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map, take, takeUntil} from 'rxjs/operators';\n\nimport {GoogleMap} from '../google-map/google-map';\n\n/**\n * Angular component that renders a Google Maps Traffic Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n */\n@Directive({\n  selector: 'map-traffic-layer',\n  exportAs: 'mapTrafficLayer',\n})\nexport class MapTrafficLayer implements OnInit, OnDestroy {\n  private readonly _autoRefresh = new BehaviorSubject<boolean>(true);\n  private readonly _destroyed = new Subject<void>();\n\n  /**\n   * The underlying google.maps.TrafficLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TrafficLayer\n   */\n  trafficLayer?: google.maps.TrafficLayer;\n\n  /**\n   * Whether the traffic layer refreshes with updated information automatically.\n   */\n  @Input()\n  set autoRefresh(autoRefresh: boolean) {\n    this._autoRefresh.next(autoRefresh);\n  }\n\n  constructor(private readonly _map: GoogleMap, private readonly _ngZone: NgZone) {}\n\n  ngOnInit() {\n    if (this._map._isBrowser) {\n      this._combineOptions().pipe(take(1)).subscribe(options => {\n        // Create the object outside the zone so its events don't trigger change detection.\n        this._ngZone.runOutsideAngular(() => {\n          this.trafficLayer = new google.maps.TrafficLayer(options);\n        });\n        this._assertInitialized();\n        this.trafficLayer.setMap(this._map.googleMap!);\n      });\n\n      this._watchForAutoRefreshChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    if (this.trafficLayer) {\n      this.trafficLayer.setMap(null);\n    }\n  }\n\n  private _combineOptions(): Observable<google.maps.TrafficLayerOptions> {\n    return this._autoRefresh.pipe(map(autoRefresh => {\n      const combinedOptions: google.maps.TrafficLayerOptions = {autoRefresh};\n      return combinedOptions;\n    }));\n  }\n\n  private _watchForAutoRefreshChanges() {\n    this._combineOptions().pipe(takeUntil(this._destroyed)).subscribe(options => {\n      this._assertInitialized();\n      this.trafficLayer.setOptions(options);\n    });\n  }\n\n  private _assertInitialized(): asserts this is {trafficLayer: google.maps.TrafficLayer} {\n    if (!this._map.googleMap) {\n      throw Error(\n          'Cannot access Google Map information before the API has been initialized. ' +\n          'Please wait for the API to load before trying to interact with it.');\n    }\n    if (!this.trafficLayer) {\n      throw Error(\n          'Cannot interact with a Google Map Traffic Layer before it has been initialized. ' +\n          'Please wait for the Traffic Layer to load before trying to interact with it.');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"googlemaps\" />\n\nimport {Directive} from '@angular/core';\n\nimport {MapBaseLayer} from '../map-base-layer';\n\n/**\n * Angular component that renders a Google Maps Transit Layer via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n */\n@Directive({\n  selector: 'map-transit-layer',\n  exportAs: 'mapTransitLayer',\n})\nexport class MapTransitLayer extends MapBaseLayer {\n  /**\n   * The underlying google.maps.TransitLayer object.\n   *\n   * See developers.google.com/maps/documentation/javascript/reference/map#TransitLayer\n   */\n  transitLayer?: google.maps.TransitLayer;\n\n  protected _initializeObject() {\n    this.transitLayer = new google.maps.TransitLayer();\n  }\n\n  protected _setMap() {\n    this._assertLayerInitialized();\n    this.transitLayer.setMap(this._map.googleMap!);\n  }\n\n  protected _unsetMap() {\n    if (this.transitLayer) {\n      this.transitLayer.setMap(null);\n    }\n  }\n\n  private _assertLayerInitialized(): asserts this is {transitLayer: google.maps.TransitLayer} {\n    if (!this.transitLayer) {\n      throw Error(\n          'Cannot interact with a Google Map Transit Layer before it has been initialized. ' +\n          'Please wait for the Transit Layer to load before trying to interact with it.');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {GoogleMap} from './google-map/google-map';\nimport {MapBaseLayer} from './map-base-layer';\nimport {MapBicyclingLayer} from './map-bicycling-layer/map-bicycling-layer';\nimport {MapCircle} from './map-circle/map-circle';\nimport {MapGroundOverlay} from './map-ground-overlay/map-ground-overlay';\nimport {MapInfoWindow} from './map-info-window/map-info-window';\nimport {MapKmlLayer} from './map-kml-layer/map-kml-layer';\nimport {MapMarker} from './map-marker/map-marker';\nimport {MapMarkerClusterer} from './map-marker-clusterer/map-marker-clusterer';\nimport {MapPolygon} from './map-polygon/map-polygon';\nimport {MapPolyline} from './map-polyline/map-polyline';\nimport {MapRectangle} from './map-rectangle/map-rectangle';\nimport {MapTrafficLayer} from './map-traffic-layer/map-traffic-layer';\nimport {MapTransitLayer} from './map-transit-layer/map-transit-layer';\n\nconst COMPONENTS = [\n  GoogleMap,\n  MapBaseLayer,\n  MapBicyclingLayer,\n  MapCircle,\n  MapGroundOverlay,\n  MapInfoWindow,\n  MapKmlLayer,\n  MapMarker,\n  MapMarkerClusterer,\n  MapPolygon,\n  MapPolyline,\n  MapRectangle,\n  MapTrafficLayer,\n  MapTransitLayer,\n];\n\n@NgModule({\n  declarations: COMPONENTS,\n  exports: COMPONENTS,\n})\nexport class GoogleMapsModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {GoogleMap} from './google-map/google-map';\nexport {GoogleMapsModule} from './google-maps-module';\nexport {MapAnchorPoint} from './map-anchor-point';\nexport {MapBaseLayer} from './map-base-layer';\nexport {MapBicyclingLayer} from './map-bicycling-layer/map-bicycling-layer';\nexport {MapCircle} from './map-circle/map-circle';\nexport {MapGroundOverlay} from './map-ground-overlay/map-ground-overlay';\nexport {MapInfoWindow} from './map-info-window/map-info-window';\nexport {MapKmlLayer} from './map-kml-layer/map-kml-layer';\nexport {MapMarker} from './map-marker/map-marker';\nexport {MapMarkerClusterer} from './map-marker-clusterer/map-marker-clusterer';\nexport {MapPolygon} from './map-polygon/map-polygon';\nexport {MapPolyline} from './map-polyline/map-polyline';\nexport {MapRectangle} from './map-rectangle/map-rectangle';\nexport {MapTrafficLayer} from './map-traffic-layer/map-traffic-layer';\nexport {MapTransitLayer} from './map-transit-layer/map-transit-layer';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}