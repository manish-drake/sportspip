{"version":3,"sources":["../../../src/@ionic-native/plugins/zip/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;GAoBG;AASH,IAAa,GAAG;IAAS,uBAAiB;IAA1C;;IAqBA,CAAC;IAnBC;;;;;;OAMG;IAKH,mBAAK,GAAL,UAAM,SAAiB,EAAE,OAAe,EAAE,UAAqB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAQ/F,UAAC;AAAD,CArBA,AAqBC,CArBwB,iBAAiB,GAqBzC;AANM,cAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAPA;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;qDACqD,QAAQ;;gCAA8B;AAblF,GAAG;IARf,MAAM,CAAC;QACN,UAAU,EAAE,KAAK;QACjB,MAAM,EAAE,oBAAoB;QAC5B,SAAS,EAAE,KAAK;QAChB,IAAI,EAAE,wDAAwD;QAC9D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,GAAG,CAqBf;SArBY,GAAG","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Zip\n * @description\n * A Cordova plugin to unzip files in Android and iOS.\n *\n * @usage\n * ```typescript\n * import { Zip } from '@ionic-native/zip';\n *\n * constructor(private zip: Zip) { }\n *\n * ...\n *\n * this.zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))\n *  .then((result) => {\n *    if(result === 0) console.log('SUCCESS');\n *    if(result === -1) console.log('FAILED');\n *  });\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Zip',\n  plugin: 'cordova-plugin-zip',\n  pluginRef: 'zip',\n  repo: 'https://github.com/MobileChromeApps/cordova-plugin-zip',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Zip extends IonicNativePlugin {\n\n  /**\n   * Extracts files from a ZIP archive\n   * @param sourceZip {string} Source ZIP file\n   * @param destUrl {string} Destination folder\n   * @param onProgress {Function} optional callback to be called on progress update\n   * @returns {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 4\n  })\n  unzip(sourceZip: string, destUrl: string, onProgress?: Function): Promise<number> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}